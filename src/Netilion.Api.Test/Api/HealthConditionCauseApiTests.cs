/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing HealthConditionCauseApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class HealthConditionCauseApiTests
    {
        private HealthConditionCauseApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new HealthConditionCauseApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of HealthConditionCauseApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' HealthConditionCauseApi
            //Assert.IsInstanceOfType(typeof(HealthConditionCauseApi), instance, "instance is a HealthConditionCauseApi");
        }

        /// <summary>
        /// Test CreateHealthConditionCause
        /// </summary>
        [Test]
        public void CreateHealthConditionCauseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HealthConditionCauseRequest body = null;
            //long? healthConditionId = null;
            //var response = instance.CreateHealthConditionCause(body, healthConditionId);
            //Assert.IsInstanceOf<HealthConditionCauseResponse> (response, "response is HealthConditionCauseResponse");
        }
        /// <summary>
        /// Test DeleteCause
        /// </summary>
        [Test]
        public void DeleteCauseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? healthConditionId = null;
            //long? id = null;
            //instance.DeleteCause(healthConditionId, id);
            
        }
        /// <summary>
        /// Test GetHealthConditionCauseById
        /// </summary>
        [Test]
        public void GetHealthConditionCauseByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? healthConditionId = null;
            //long? id = null;
            //string include = null;
            //string acceptLanguage = null;
            //var response = instance.GetHealthConditionCauseById(healthConditionId, id, include, acceptLanguage);
            //Assert.IsInstanceOf<HealthConditionCauseResponse> (response, "response is HealthConditionCauseResponse");
        }
        /// <summary>
        /// Test GetHealthConditionCauses
        /// </summary>
        [Test]
        public void GetHealthConditionCausesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? healthConditionId = null;
            //int? page = null;
            //int? perPage = null;
            //string code = null;
            //string description = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetHealthConditionCauses(healthConditionId, page, perPage, code, description, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<Causes> (response, "response is Causes");
        }
        /// <summary>
        /// Test UpdateHealthConditionCause
        /// </summary>
        [Test]
        public void UpdateHealthConditionCauseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HealthConditionCauseRequest body = null;
            //long? healthConditionId = null;
            //long? id = null;
            //string contentLanguage = null;
            //instance.UpdateHealthConditionCause(body, healthConditionId, id, contentLanguage);
            
        }
    }

}
