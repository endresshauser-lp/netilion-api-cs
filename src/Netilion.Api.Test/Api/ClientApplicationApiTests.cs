/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing ClientApplicationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ClientApplicationApiTests
    {
        private ClientApplicationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ClientApplicationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ClientApplicationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ClientApplicationApi
            //Assert.IsInstanceOfType(typeof(ClientApplicationApi), instance, "instance is a ClientApplicationApi");
        }

        /// <summary>
        /// Test AddClientApplicationsToEdgeApplication
        /// </summary>
        [Test]
        public void AddClientApplicationsToEdgeApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientApplicationIDs body = null;
            //long? edgeDeviceApplicationId = null;
            //instance.AddClientApplicationsToEdgeApplication(body, edgeDeviceApplicationId);
            
        }
        /// <summary>
        /// Test AddTechnicalUsersToClientApplication
        /// </summary>
        [Test]
        public void AddTechnicalUsersToClientApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? clientApplicationId = null;
            //var response = instance.AddTechnicalUsersToClientApplication(clientApplicationId);
            //Assert.IsInstanceOf<TechnicalUserCreateResponse> (response, "response is TechnicalUserCreateResponse");
        }
        /// <summary>
        /// Test AddUsersToClientApplicationUserRole
        /// </summary>
        [Test]
        public void AddUsersToClientApplicationUserRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserIDs body = null;
            //long? clientApplicationId = null;
            //long? userroleId = null;
            //instance.AddUsersToClientApplicationUserRole(body, clientApplicationId, userroleId);
            
        }
        /// <summary>
        /// Test CreateClientApplication
        /// </summary>
        [Test]
        public void CreateClientApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientApplicationRequest body = null;
            //var response = instance.CreateClientApplication(body);
            //Assert.IsInstanceOf<ClientApplicationResponse> (response, "response is ClientApplicationResponse");
        }
        /// <summary>
        /// Test CreateWebhookToClientApplication
        /// </summary>
        [Test]
        public void CreateWebhookToClientApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WebhookRequest body = null;
            //long? clientApplicationId = null;
            //var response = instance.CreateWebhookToClientApplication(body, clientApplicationId);
            //Assert.IsInstanceOf<WebhookCreateResponse> (response, "response is WebhookCreateResponse");
        }
        /// <summary>
        /// Test DeleteClientApplication
        /// </summary>
        [Test]
        public void DeleteClientApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteClientApplication(id);
            
        }
        /// <summary>
        /// Test DeleteUsersFromClientApplicationUserRole
        /// </summary>
        [Test]
        public void DeleteUsersFromClientApplicationUserRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserIDs body = null;
            //long? clientApplicationId = null;
            //long? userroleId = null;
            //instance.DeleteUsersFromClientApplicationUserRole(body, clientApplicationId, userroleId);
            
        }
        /// <summary>
        /// Test DeleteWebhook
        /// </summary>
        [Test]
        public void DeleteWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? clientApplicationId = null;
            //long? id = null;
            //instance.DeleteWebhook(clientApplicationId, id);
            
        }
        /// <summary>
        /// Test GetAPIKeysOfClientApplication
        /// </summary>
        [Test]
        public void GetAPIKeysOfClientApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? clientApplicationId = null;
            //int? page = null;
            //int? perPage = null;
            //string apiKey = null;
            //DateTime? validFrom = null;
            //DateTime? validFromFrom = null;
            //DateTime? validFromTo = null;
            //DateTime? validUntil = null;
            //DateTime? validUntilFrom = null;
            //DateTime? validUntilTo = null;
            //string orderBy = null;
            //var response = instance.GetAPIKeysOfClientApplication(clientApplicationId, page, perPage, apiKey, validFrom, validFromFrom, validFromTo, validUntil, validUntilFrom, validUntilTo, orderBy);
            //Assert.IsInstanceOf<ClientApplicationResponse> (response, "response is ClientApplicationResponse");
        }
        /// <summary>
        /// Test GetClientApplicationById
        /// </summary>
        [Test]
        public void GetClientApplicationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //var response = instance.GetClientApplicationById(id, include);
            //Assert.IsInstanceOf<ClientApplicationResponse> (response, "response is ClientApplicationResponse");
        }
        /// <summary>
        /// Test GetClientApplications
        /// </summary>
        [Test]
        public void GetClientApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string contactPersonId = null;
            //string orderBy = null;
            //var response = instance.GetClientApplications(page, perPage, include, name, contactPersonId, orderBy);
            //Assert.IsInstanceOf<ClientApplicationsResponse> (response, "response is ClientApplicationsResponse");
        }
        /// <summary>
        /// Test GetClientApplicationsOfEdgeDeviceApplication
        /// </summary>
        [Test]
        public void GetClientApplicationsOfEdgeDeviceApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? edgeDeviceApplicationId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string code = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetClientApplicationsOfEdgeDeviceApplication(edgeDeviceApplicationId, page, perPage, include, name, code, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<ClientApplicationsResponse> (response, "response is ClientApplicationsResponse");
        }
        /// <summary>
        /// Test GetCurrentClientApplication
        /// </summary>
        [Test]
        public void GetCurrentClientApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCurrentClientApplication();
            //Assert.IsInstanceOf<ClientApplicationPublicResponse> (response, "response is ClientApplicationPublicResponse");
        }
        /// <summary>
        /// Test GetEdgeDeviceApplicationsOfClientApplication
        /// </summary>
        [Test]
        public void GetEdgeDeviceApplicationsOfClientApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? clientApplicationId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string code = null;
            //string edgeDeviceTypeId = null;
            //string softwareVersionId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetEdgeDeviceApplicationsOfClientApplication(clientApplicationId, page, perPage, name, code, edgeDeviceTypeId, softwareVersionId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<EdgeDeviceApplicationsResponse> (response, "response is EdgeDeviceApplicationsResponse");
        }
        /// <summary>
        /// Test GetTechnicalUsersOfClientApplication
        /// </summary>
        [Test]
        public void GetTechnicalUsersOfClientApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? clientApplicationId = null;
            //int? page = null;
            //int? perPage = null;
            //string email = null;
            //string orderBy = null;
            //var response = instance.GetTechnicalUsersOfClientApplication(clientApplicationId, page, perPage, email, orderBy);
            //Assert.IsInstanceOf<TechnicalUsersResponse> (response, "response is TechnicalUsersResponse");
        }
        /// <summary>
        /// Test GetUsersOfClientApplicationUserRole
        /// </summary>
        [Test]
        public void GetUsersOfClientApplicationUserRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? clientApplicationId = null;
            //long? userroleId = null;
            //int? page = null;
            //int? perPage = null;
            //string firstName = null;
            //string lastName = null;
            //string orderBy = null;
            //var response = instance.GetUsersOfClientApplicationUserRole(clientApplicationId, userroleId, page, perPage, firstName, lastName, orderBy);
            //Assert.IsInstanceOf<UsersPublicResponse> (response, "response is UsersPublicResponse");
        }
        /// <summary>
        /// Test GetWebhookById
        /// </summary>
        [Test]
        public void GetWebhookByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? clientApplicationId = null;
            //long? id = null;
            //var response = instance.GetWebhookById(clientApplicationId, id);
            //Assert.IsInstanceOf<WebhookResponse> (response, "response is WebhookResponse");
        }
        /// <summary>
        /// Test GetWebhookEvents
        /// </summary>
        [Test]
        public void GetWebhookEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? clientApplicationId = null;
            //long? id = null;
            //int? page = null;
            //int? perPage = null;
            //string status = null;
            //string eventType = null;
            //DateTime? occurredAt = null;
            //string occurredAtFrom = null;
            //string occurredAtTo = null;
            //string orderBy = null;
            //var response = instance.GetWebhookEvents(clientApplicationId, id, page, perPage, status, eventType, occurredAt, occurredAtFrom, occurredAtTo, orderBy);
            //Assert.IsInstanceOf<WebhookEventResponses> (response, "response is WebhookEventResponses");
        }
        /// <summary>
        /// Test GetWebhooksOfClientApplication
        /// </summary>
        [Test]
        public void GetWebhooksOfClientApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? clientApplicationId = null;
            //int? page = null;
            //int? perPage = null;
            //string orderBy = null;
            //var response = instance.GetWebhooksOfClientApplication(clientApplicationId, page, perPage, orderBy);
            //Assert.IsInstanceOf<WebhookResponses> (response, "response is WebhookResponses");
        }
        /// <summary>
        /// Test RemoveClientApplicationsOfEdgeDeviceApplication
        /// </summary>
        [Test]
        public void RemoveClientApplicationsOfEdgeDeviceApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientApplicationIDs body = null;
            //long? edgeDeviceApplicationId = null;
            //instance.RemoveClientApplicationsOfEdgeDeviceApplication(body, edgeDeviceApplicationId);
            
        }
        /// <summary>
        /// Test ReplaceClientApplicationsOfEdgeDeviceApplication
        /// </summary>
        [Test]
        public void ReplaceClientApplicationsOfEdgeDeviceApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientApplicationIDs body = null;
            //long? edgeDeviceApplicationId = null;
            //instance.ReplaceClientApplicationsOfEdgeDeviceApplication(body, edgeDeviceApplicationId);
            
        }
        /// <summary>
        /// Test ResendWebhookEvents
        /// </summary>
        [Test]
        public void ResendWebhookEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WebhookEventIDs body = null;
            //long? clientApplicationId = null;
            //long? id = null;
            //instance.ResendWebhookEvents(body, clientApplicationId, id);
            
        }
        /// <summary>
        /// Test ResetSecretWebhook
        /// </summary>
        [Test]
        public void ResetSecretWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? clientApplicationId = null;
            //long? id = null;
            //var response = instance.ResetSecretWebhook(clientApplicationId, id);
            //Assert.IsInstanceOf<WebhookSecretResponse> (response, "response is WebhookSecretResponse");
        }
        /// <summary>
        /// Test UpdateClientApplication
        /// </summary>
        [Test]
        public void UpdateClientApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientApplicationRequest body = null;
            //long? id = null;
            //instance.UpdateClientApplication(body, id);
            
        }
        /// <summary>
        /// Test UpdateWebhook
        /// </summary>
        [Test]
        public void UpdateWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WebhookRequest body = null;
            //long? clientApplicationId = null;
            //long? id = null;
            //instance.UpdateWebhook(body, clientApplicationId, id);
            
        }
    }

}
