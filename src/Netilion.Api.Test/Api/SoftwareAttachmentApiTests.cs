/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing SoftwareAttachmentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SoftwareAttachmentApiTests
    {
        private SoftwareAttachmentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SoftwareAttachmentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SoftwareAttachmentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SoftwareAttachmentApi
            //Assert.IsInstanceOfType(typeof(SoftwareAttachmentApi), instance, "instance is a SoftwareAttachmentApi");
        }

        /// <summary>
        /// Test CreateLinkSoftwareAttachment
        /// </summary>
        [Test]
        public void CreateLinkSoftwareAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SoftwareAttachmentLinkRequestPost body = null;
            //var response = instance.CreateLinkSoftwareAttachment(body);
            //Assert.IsInstanceOf<SoftwareAttachmentResponse> (response, "response is SoftwareAttachmentResponse");
        }
        /// <summary>
        /// Test DeleteSoftwareAttachment
        /// </summary>
        [Test]
        public void DeleteSoftwareAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteSoftwareAttachment(id);
            
        }
        /// <summary>
        /// Test DownloadSoftwareAttachment
        /// </summary>
        [Test]
        public void DownloadSoftwareAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string disposition = null;
            //instance.DownloadSoftwareAttachment(id, disposition);
            
        }
        /// <summary>
        /// Test GetSoftwareAttachmentById
        /// </summary>
        [Test]
        public void GetSoftwareAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetSoftwareAttachmentById(id);
            //Assert.IsInstanceOf<SoftwareAttachmentResponse> (response, "response is SoftwareAttachmentResponse");
        }
        /// <summary>
        /// Test GetSoftwareAttachments
        /// </summary>
        [Test]
        public void GetSoftwareAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //DateTime? contentDate = null;
            //string remarks = null;
            //string fileName = null;
            //string orderBy = null;
            //var response = instance.GetSoftwareAttachments(page, perPage, contentDate, remarks, fileName, orderBy);
            //Assert.IsInstanceOf<SoftwareAttachmentsResponse> (response, "response is SoftwareAttachmentsResponse");
        }
        /// <summary>
        /// Test UpdateLinkSoftwareAttachment
        /// </summary>
        [Test]
        public void UpdateLinkSoftwareAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SoftwareAttachmentLinkRequestPatch body = null;
            //long? id = null;
            //var response = instance.UpdateLinkSoftwareAttachment(body, id);
            //Assert.IsInstanceOf<SoftwareAttachmentResponse> (response, "response is SoftwareAttachmentResponse");
        }
        /// <summary>
        /// Test UpdateSoftwareAttachment
        /// </summary>
        [Test]
        public void UpdateSoftwareAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //byte[] file = null;
            //long? softwareId = null;
            //string contentDate = null;
            //string remarks = null;
            //instance.UpdateSoftwareAttachment(id, file, softwareId, contentDate, remarks);
            
        }
        /// <summary>
        /// Test UploadSoftwareAttachment
        /// </summary>
        [Test]
        public void UploadSoftwareAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] file = null;
            //long? softwareId = null;
            //string contentDate = null;
            //string remarks = null;
            //var response = instance.UploadSoftwareAttachment(file, softwareId, contentDate, remarks);
            //Assert.IsInstanceOf<SoftwareAttachmentResponse> (response, "response is SoftwareAttachmentResponse");
        }
    }

}
