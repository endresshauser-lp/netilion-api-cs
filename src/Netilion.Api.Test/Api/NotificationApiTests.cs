/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing NotificationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class NotificationApiTests
    {
        private NotificationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new NotificationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of NotificationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' NotificationApi
            //Assert.IsInstanceOfType(typeof(NotificationApi), instance, "instance is a NotificationApi");
        }

        /// <summary>
        /// Test AddClientApplicationsToNotification
        /// </summary>
        [Test]
        public void AddClientApplicationsToNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientApplicationIDs body = null;
            //long? notificationId = null;
            //instance.AddClientApplicationsToNotification(body, notificationId);
            
        }
        /// <summary>
        /// Test CreateNotification
        /// </summary>
        [Test]
        public void CreateNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NotificationRequest body = null;
            //var response = instance.CreateNotification(body);
            //Assert.IsInstanceOf<NotificationResponse> (response, "response is NotificationResponse");
        }
        /// <summary>
        /// Test DeleteNotification
        /// </summary>
        [Test]
        public void DeleteNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteNotification(id);
            
        }
        /// <summary>
        /// Test GetClientApplicationsOfNotification
        /// </summary>
        [Test]
        public void GetClientApplicationsOfNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? notificationId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string contactPersonId = null;
            //string orderBy = null;
            //var response = instance.GetClientApplicationsOfNotification(notificationId, page, perPage, name, contactPersonId, orderBy);
            //Assert.IsInstanceOf<ClientApplicationsResponse> (response, "response is ClientApplicationsResponse");
        }
        /// <summary>
        /// Test GetNotificationById
        /// </summary>
        [Test]
        public void GetNotificationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string acceptLanguage = null;
            //var response = instance.GetNotificationById(id, acceptLanguage);
            //Assert.IsInstanceOf<NotificationResponse> (response, "response is NotificationResponse");
        }
        /// <summary>
        /// Test GetNotifications
        /// </summary>
        [Test]
        public void GetNotificationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //long? clientApplicationId = null;
            //string startDatetime = null;
            //string startDatetimeFrom = null;
            //string startDatetimeTo = null;
            //string endDatetime = null;
            //DateTime? endDatetimeFrom = null;
            //string endDatetimeTo = null;
            //string name = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetNotifications(page, perPage, clientApplicationId, startDatetime, startDatetimeFrom, startDatetimeTo, endDatetime, endDatetimeFrom, endDatetimeTo, name, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<Notifications> (response, "response is Notifications");
        }
        /// <summary>
        /// Test RemoteClientApplicationsFromNotification
        /// </summary>
        [Test]
        public void RemoteClientApplicationsFromNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientApplicationIDs body = null;
            //long? notificationId = null;
            //instance.RemoteClientApplicationsFromNotification(body, notificationId);
            
        }
        /// <summary>
        /// Test ReplaceClientApplicationsOfNotification
        /// </summary>
        [Test]
        public void ReplaceClientApplicationsOfNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientApplicationIDs body = null;
            //long? notificationId = null;
            //instance.ReplaceClientApplicationsOfNotification(body, notificationId);
            
        }
        /// <summary>
        /// Test UpdateNotification
        /// </summary>
        [Test]
        public void UpdateNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NotificationRequest body = null;
            //long? id = null;
            //string contentLanguage = null;
            //instance.UpdateNotification(body, id, contentLanguage);
            
        }
    }

}
