/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing ProductIdentifierApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProductIdentifierApiTests
    {
        private ProductIdentifierApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProductIdentifierApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProductIdentifierApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProductIdentifierApi
            //Assert.IsInstanceOfType(typeof(ProductIdentifierApi), instance, "instance is a ProductIdentifierApi");
        }

        /// <summary>
        /// Test AddProductsToProductIdentifier
        /// </summary>
        [Test]
        public void AddProductsToProductIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductIDs body = null;
            //long? productIdentifierId = null;
            //instance.AddProductsToProductIdentifier(body, productIdentifierId);
            
        }
        /// <summary>
        /// Test CreateProductIdentifier
        /// </summary>
        [Test]
        public void CreateProductIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductIdentifierRequest body = null;
            //var response = instance.CreateProductIdentifier(body);
            //Assert.IsInstanceOf<ProductIdentifierResponse> (response, "response is ProductIdentifierResponse");
        }
        /// <summary>
        /// Test CreateProductIdentifierForProduct
        /// </summary>
        [Test]
        public void CreateProductIdentifierForProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductIdentifierRequestNoProducts body = null;
            //long? productId = null;
            //var response = instance.CreateProductIdentifierForProduct(body, productId);
            //Assert.IsInstanceOf<ProductIdentifierResponse> (response, "response is ProductIdentifierResponse");
        }
        /// <summary>
        /// Test DeleteProductIdentifier
        /// </summary>
        [Test]
        public void DeleteProductIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteProductIdentifier(id);
            
        }
        /// <summary>
        /// Test GetProductIdentifierById
        /// </summary>
        [Test]
        public void GetProductIdentifierByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //var response = instance.GetProductIdentifierById(id, include);
            //Assert.IsInstanceOf<ProductIdentifierResponse> (response, "response is ProductIdentifierResponse");
        }
        /// <summary>
        /// Test GetProductIdentifiers
        /// </summary>
        [Test]
        public void GetProductIdentifiersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string organizationName = null;
            //string protocol = null;
            //string protocolVersion = null;
            //string productIdentifier = null;
            //string tenantId = null;
            //var response = instance.GetProductIdentifiers(page, perPage, include, organizationName, protocol, protocolVersion, productIdentifier, tenantId);
            //Assert.IsInstanceOf<ProductIdentifiersResponse> (response, "response is ProductIdentifiersResponse");
        }
        /// <summary>
        /// Test GetProductIdentifiersOfProduct
        /// </summary>
        [Test]
        public void GetProductIdentifiersOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //var response = instance.GetProductIdentifiersOfProduct(productId, page, perPage, include);
            //Assert.IsInstanceOf<ProductIdentifiersResponse> (response, "response is ProductIdentifiersResponse");
        }
        /// <summary>
        /// Test GetProductsOfProductIdentifier
        /// </summary>
        [Test]
        public void GetProductsOfProductIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productIdentifierId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string productCode = null;
            //string name = null;
            //string manufacturerId = null;
            //string statusId = null;
            //string categoryId = null;
            //string parentId = null;
            //string tenantId = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetProductsOfProductIdentifier(productIdentifierId, page, perPage, include, productCode, name, manufacturerId, statusId, categoryId, parentId, tenantId, specificationsKey, specificationsValue, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<ProductsResponse> (response, "response is ProductsResponse");
        }
        /// <summary>
        /// Test RemoveProductIdentifierFromProduct
        /// </summary>
        [Test]
        public void RemoveProductIdentifierFromProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductIdentifiers body = null;
            //long? productId = null;
            //instance.RemoveProductIdentifierFromProduct(body, productId);
            
        }
        /// <summary>
        /// Test RemoveProductsFromProductIdentifier
        /// </summary>
        [Test]
        public void RemoveProductsFromProductIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductIDs body = null;
            //long? productIdentifierId = null;
            //instance.RemoveProductsFromProductIdentifier(body, productIdentifierId);
            
        }
        /// <summary>
        /// Test UpdateProductIdentifier
        /// </summary>
        [Test]
        public void UpdateProductIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductIdentifierRequest body = null;
            //long? id = null;
            //instance.UpdateProductIdentifier(body, id);
            
        }
    }

}
