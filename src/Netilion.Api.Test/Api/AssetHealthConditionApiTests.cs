/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing AssetHealthConditionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AssetHealthConditionApiTests
    {
        private AssetHealthConditionApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AssetHealthConditionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AssetHealthConditionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AssetHealthConditionApi
            //Assert.IsInstanceOfType(typeof(AssetHealthConditionApi), instance, "instance is a AssetHealthConditionApi");
        }

        /// <summary>
        /// Test AddHealthConditionsToAsset
        /// </summary>
        [Test]
        public void AddHealthConditionsToAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetHealthConditionsRequest body = null;
            //long? assetId = null;
            //instance.AddHealthConditionsToAsset(body, assetId);
            
        }
        /// <summary>
        /// Test CalculateAssetHealthConditions
        /// </summary>
        [Test]
        public void CalculateAssetHealthConditionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //string protocol = null;
            //string diagnosisMessage = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string protocolVersion = null;
            //string deviceIdent = null;
            //string productIdentifier = null;
            //string acceptLanguage = null;
            //var response = instance.CalculateAssetHealthConditions(assetId, protocol, diagnosisMessage, page, perPage, include, protocolVersion, deviceIdent, productIdentifier, acceptLanguage);
            //Assert.IsInstanceOf<AssetHealthConditionsResponse> (response, "response is AssetHealthConditionsResponse");
        }
        /// <summary>
        /// Test CalculateAssetHealthConditionsAndUpdateAsset
        /// </summary>
        [Test]
        public void CalculateAssetHealthConditionsAndUpdateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetHealthConditionsCalculateRequest body = null;
            //long? assetId = null;
            //instance.CalculateAssetHealthConditionsAndUpdateAsset(body, assetId);
            
        }
        /// <summary>
        /// Test GetAssetHealthConditions
        /// </summary>
        [Test]
        public void GetAssetHealthConditionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string healthConditionId = null;
            //string diagnosisCode = null;
            //string assetStatusId = null;
            //string acceptLanguage = null;
            //var response = instance.GetAssetHealthConditions(assetId, page, perPage, include, healthConditionId, diagnosisCode, assetStatusId, acceptLanguage);
            //Assert.IsInstanceOf<AssetHealthConditionsResponse> (response, "response is AssetHealthConditionsResponse");
        }
        /// <summary>
        /// Test GetHealthConditionsOfAssetTimemachine
        /// </summary>
        [Test]
        public void GetHealthConditionsOfAssetTimemachineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //DateTime? from = null;
            //DateTime? to = null;
            //string orderBy = null;
            //var response = instance.GetHealthConditionsOfAssetTimemachine(assetId, page, perPage, from, to, orderBy);
            //Assert.IsInstanceOf<AssetHealthConditionsTimemachineResponse> (response, "response is AssetHealthConditionsTimemachineResponse");
        }
        /// <summary>
        /// Test ReaplaceHealthConditionsOfAsset
        /// </summary>
        [Test]
        public void ReaplaceHealthConditionsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetHealthConditionsRequest body = null;
            //long? assetId = null;
            //instance.ReaplaceHealthConditionsOfAsset(body, assetId);
            
        }
        /// <summary>
        /// Test RemoveHealthConditionsOfAsset
        /// </summary>
        [Test]
        public void RemoveHealthConditionsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetHealthConditionsRequest body = null;
            //long? assetId = null;
            //instance.RemoveHealthConditionsOfAsset(body, assetId);
            
        }
    }

}
