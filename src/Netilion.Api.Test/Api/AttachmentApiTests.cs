/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing AttachmentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AttachmentApiTests
    {
        private AttachmentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AttachmentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AttachmentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AttachmentApi
            //Assert.IsInstanceOfType(typeof(AttachmentApi), instance, "instance is a AttachmentApi");
        }

        /// <summary>
        /// Test CreateLinkAttachment
        /// </summary>
        [Test]
        public void CreateLinkAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AttachmentLinkRequest body = null;
            //var response = instance.CreateLinkAttachment(body);
            //Assert.IsInstanceOf<AttachmentResponse> (response, "response is AttachmentResponse");
        }
        /// <summary>
        /// Test DeleteAttachment
        /// </summary>
        [Test]
        public void DeleteAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteAttachment(id);
            
        }
        /// <summary>
        /// Test DownloadAttachment
        /// </summary>
        [Test]
        public void DownloadAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string disposition = null;
            //instance.DownloadAttachment(id, disposition);
            
        }
        /// <summary>
        /// Test GetAttachmentById
        /// </summary>
        [Test]
        public void GetAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetAttachmentById(id);
            //Assert.IsInstanceOf<AttachmentResponse> (response, "response is AttachmentResponse");
        }
        /// <summary>
        /// Test GetAttachments
        /// </summary>
        [Test]
        public void GetAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string contentAuthor = null;
            //string contentVersion = null;
            //string remarks = null;
            //DateTime? contentDate = null;
            //DateTime? contentDateFrom = null;
            //DateTime? contentDateTo = null;
            //string fileName = null;
            //string orderBy = null;
            //var response = instance.GetAttachments(page, perPage, contentAuthor, contentVersion, remarks, contentDate, contentDateFrom, contentDateTo, fileName, orderBy);
            //Assert.IsInstanceOf<AttachmentsResponse> (response, "response is AttachmentsResponse");
        }
        /// <summary>
        /// Test UpdateAttachment
        /// </summary>
        [Test]
        public void UpdateAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //byte[] file = null;
            //long? documentId = null;
            //string contentAuthor = null;
            //string contentDate = null;
            //string remarks = null;
            //string languages = null;
            //instance.UpdateAttachment(id, file, documentId, contentAuthor, contentDate, remarks, languages);
            
        }
        /// <summary>
        /// Test UpdateLinkAttachment
        /// </summary>
        [Test]
        public void UpdateLinkAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AttachmentLinkRequest body = null;
            //long? id = null;
            //var response = instance.UpdateLinkAttachment(body, id);
            //Assert.IsInstanceOf<AttachmentResponse> (response, "response is AttachmentResponse");
        }
        /// <summary>
        /// Test UploadAttachment
        /// </summary>
        [Test]
        public void UploadAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] file = null;
            //long? documentId = null;
            //string contentAuthor = null;
            //string contentVersion = null;
            //string contentDate = null;
            //string remarks = null;
            //string languages = null;
            //var response = instance.UploadAttachment(file, documentId, contentAuthor, contentVersion, contentDate, remarks, languages);
            //Assert.IsInstanceOf<AttachmentResponse> (response, "response is AttachmentResponse");
        }
    }

}
