/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing UserGroupApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserGroupApiTests
    {
        private UserGroupApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserGroupApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserGroupApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UserGroupApi
            //Assert.IsInstanceOfType(typeof(UserGroupApi), instance, "instance is a UserGroupApi");
        }

        /// <summary>
        /// Test AddUsersToUserGroup
        /// </summary>
        [Test]
        public void AddUsersToUserGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserIDs body = null;
            //long? usergroupId = null;
            //instance.AddUsersToUserGroup(body, usergroupId);
            
        }
        /// <summary>
        /// Test CreateUserGroup
        /// </summary>
        [Test]
        public void CreateUserGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserGroupRequest body = null;
            //var response = instance.CreateUserGroup(body);
            //Assert.IsInstanceOf<UserGroupResponse> (response, "response is UserGroupResponse");
        }
        /// <summary>
        /// Test DeleteUserGroup
        /// </summary>
        [Test]
        public void DeleteUserGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteUserGroup(id);
            
        }
        /// <summary>
        /// Test GetUserGroupById
        /// </summary>
        [Test]
        public void GetUserGroupByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetUserGroupById(id);
            //Assert.IsInstanceOf<UserGroupResponse> (response, "response is UserGroupResponse");
        }
        /// <summary>
        /// Test GetUserGroups
        /// </summary>
        [Test]
        public void GetUserGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string orderBy = null;
            //var response = instance.GetUserGroups(page, perPage, name, orderBy);
            //Assert.IsInstanceOf<UserGroupsWithUsers> (response, "response is UserGroupsWithUsers");
        }
        /// <summary>
        /// Test GetUsersOfUserGroup
        /// </summary>
        [Test]
        public void GetUsersOfUserGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? usergroupId = null;
            //int? page = null;
            //int? perPage = null;
            //string firstName = null;
            //string lastName = null;
            //string orderBy = null;
            //var response = instance.GetUsersOfUserGroup(usergroupId, page, perPage, firstName, lastName, orderBy);
            //Assert.IsInstanceOf<UsersPublicResponse> (response, "response is UsersPublicResponse");
        }
        /// <summary>
        /// Test RemoveUsersFromUserGroup
        /// </summary>
        [Test]
        public void RemoveUsersFromUserGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserIDs body = null;
            //long? usergroupId = null;
            //instance.RemoveUsersFromUserGroup(body, usergroupId);
            
        }
        /// <summary>
        /// Test ReplaceUsersOfUserGroup
        /// </summary>
        [Test]
        public void ReplaceUsersOfUserGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserIDs body = null;
            //long? usergroupId = null;
            //instance.ReplaceUsersOfUserGroup(body, usergroupId);
            
        }
        /// <summary>
        /// Test UpdateUserGroup
        /// </summary>
        [Test]
        public void UpdateUserGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserGroupRequest body = null;
            //long? id = null;
            //instance.UpdateUserGroup(body, id);
            
        }
    }

}
