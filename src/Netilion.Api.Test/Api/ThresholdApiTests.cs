/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing ThresholdApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ThresholdApiTests
    {
        private ThresholdApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ThresholdApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ThresholdApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ThresholdApi
            //Assert.IsInstanceOfType(typeof(ThresholdApi), instance, "instance is a ThresholdApi");
        }

        /// <summary>
        /// Test CreateInstrumentationThreshold
        /// </summary>
        [Test]
        public void CreateInstrumentationThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ThresholdRequest body = null;
            //long? instrumentationId = null;
            //var response = instance.CreateInstrumentationThreshold(body, instrumentationId);
            //Assert.IsInstanceOf<ThresholdResponse> (response, "response is ThresholdResponse");
        }
        /// <summary>
        /// Test CreateRecipeThreshold
        /// </summary>
        [Test]
        public void CreateRecipeThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ThresholdRequest body = null;
            //long? recipeId = null;
            //var response = instance.CreateRecipeThreshold(body, recipeId);
            //Assert.IsInstanceOf<ThresholdResponse> (response, "response is ThresholdResponse");
        }
        /// <summary>
        /// Test CreateSystemThreshold
        /// </summary>
        [Test]
        public void CreateSystemThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ThresholdRequest body = null;
            //long? systemId = null;
            //var response = instance.CreateSystemThreshold(body, systemId);
            //Assert.IsInstanceOf<ThresholdResponse> (response, "response is ThresholdResponse");
        }
        /// <summary>
        /// Test DeleteInstrumentationThreshold
        /// </summary>
        [Test]
        public void DeleteInstrumentationThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //long? id = null;
            //instance.DeleteInstrumentationThreshold(instrumentationId, id);
            
        }
        /// <summary>
        /// Test DeleteRecipeThreshold
        /// </summary>
        [Test]
        public void DeleteRecipeThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? recipeId = null;
            //long? id = null;
            //instance.DeleteRecipeThreshold(recipeId, id);
            
        }
        /// <summary>
        /// Test DeleteSystemThreshold
        /// </summary>
        [Test]
        public void DeleteSystemThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? systemId = null;
            //long? id = null;
            //instance.DeleteSystemThreshold(systemId, id);
            
        }
        /// <summary>
        /// Test GetInstrumentationThreshold
        /// </summary>
        [Test]
        public void GetInstrumentationThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //long? id = null;
            //var response = instance.GetInstrumentationThreshold(instrumentationId, id);
            //Assert.IsInstanceOf<ThresholdResponse> (response, "response is ThresholdResponse");
        }
        /// <summary>
        /// Test GetInstrumentationThresholds
        /// </summary>
        [Test]
        public void GetInstrumentationThresholdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //string key = null;
            //string thresholdType = null;
            //string orderBy = null;
            //var response = instance.GetInstrumentationThresholds(instrumentationId, key, thresholdType, orderBy);
            //Assert.IsInstanceOf<ThresholdsResponse> (response, "response is ThresholdsResponse");
        }
        /// <summary>
        /// Test GetRecipeThreshold
        /// </summary>
        [Test]
        public void GetRecipeThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? recipeId = null;
            //long? id = null;
            //var response = instance.GetRecipeThreshold(recipeId, id);
            //Assert.IsInstanceOf<ThresholdResponse> (response, "response is ThresholdResponse");
        }
        /// <summary>
        /// Test GetRecipeThresholds
        /// </summary>
        [Test]
        public void GetRecipeThresholdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? recipeId = null;
            //string key = null;
            //string thresholdType = null;
            //string orderBy = null;
            //var response = instance.GetRecipeThresholds(recipeId, key, thresholdType, orderBy);
            //Assert.IsInstanceOf<ThresholdsResponse> (response, "response is ThresholdsResponse");
        }
        /// <summary>
        /// Test GetSystemThreshold
        /// </summary>
        [Test]
        public void GetSystemThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? systemId = null;
            //long? id = null;
            //var response = instance.GetSystemThreshold(systemId, id);
            //Assert.IsInstanceOf<ThresholdResponse> (response, "response is ThresholdResponse");
        }
        /// <summary>
        /// Test GetSystemThresholds
        /// </summary>
        [Test]
        public void GetSystemThresholdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? systemId = null;
            //string key = null;
            //string thresholdType = null;
            //string orderBy = null;
            //var response = instance.GetSystemThresholds(systemId, key, thresholdType, orderBy);
            //Assert.IsInstanceOf<ThresholdsResponse> (response, "response is ThresholdsResponse");
        }
        /// <summary>
        /// Test UpdateInstrumentationThreshold
        /// </summary>
        [Test]
        public void UpdateInstrumentationThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ThresholdRequest body = null;
            //long? instrumentationId = null;
            //long? id = null;
            //var response = instance.UpdateInstrumentationThreshold(body, instrumentationId, id);
            //Assert.IsInstanceOf<ThresholdResponse> (response, "response is ThresholdResponse");
        }
        /// <summary>
        /// Test UpdateRecipeThreshold
        /// </summary>
        [Test]
        public void UpdateRecipeThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ThresholdRequest body = null;
            //long? recipeId = null;
            //long? id = null;
            //var response = instance.UpdateRecipeThreshold(body, recipeId, id);
            //Assert.IsInstanceOf<ThresholdResponse> (response, "response is ThresholdResponse");
        }
        /// <summary>
        /// Test UpdateSystemThreshold
        /// </summary>
        [Test]
        public void UpdateSystemThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ThresholdRequest body = null;
            //long? systemId = null;
            //long? id = null;
            //var response = instance.UpdateSystemThreshold(body, systemId, id);
            //Assert.IsInstanceOf<ThresholdResponse> (response, "response is ThresholdResponse");
        }
    }

}
