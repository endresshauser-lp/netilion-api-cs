/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing ProductApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProductApiTests
    {
        private ProductApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProductApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProductApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProductApi
            //Assert.IsInstanceOfType(typeof(ProductApi), instance, "instance is a ProductApi");
        }

        /// <summary>
        /// Test AddCategoriesToProduct
        /// </summary>
        [Test]
        public void AddCategoriesToProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryIDs body = null;
            //long? productId = null;
            //instance.AddCategoriesToProduct(body, productId);
            
        }
        /// <summary>
        /// Test AddDocumentsToProduct
        /// </summary>
        [Test]
        public void AddDocumentsToProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? productId = null;
            //instance.AddDocumentsToProduct(body, productId);
            
        }
        /// <summary>
        /// Test AddEdgeDeviceFeaturesToProduct
        /// </summary>
        [Test]
        public void AddEdgeDeviceFeaturesToProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EdgeDeviceFeatureIDs body = null;
            //long? productId = null;
            //instance.AddEdgeDeviceFeaturesToProduct(body, productId);
            
        }
        /// <summary>
        /// Test AddProductPictureLink
        /// </summary>
        [Test]
        public void AddProductPictureLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PictureLinkRequest body = null;
            //long? id = null;
            //var response = instance.AddProductPictureLink(body, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test AddPurchaseOrdersToProduct
        /// </summary>
        [Test]
        public void AddPurchaseOrdersToProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PurchaseOrderIDs body = null;
            //long? productId = null;
            //instance.AddPurchaseOrdersToProduct(body, productId);
            
        }
        /// <summary>
        /// Test AddQuotationsToProduct
        /// </summary>
        [Test]
        public void AddQuotationsToProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QuotationIDs body = null;
            //long? productId = null;
            //instance.AddQuotationsToProduct(body, productId);
            
        }
        /// <summary>
        /// Test AddSoftwaresToProduct
        /// </summary>
        [Test]
        public void AddSoftwaresToProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SoftwareIDs body = null;
            //long? productId = null;
            //instance.AddSoftwaresToProduct(body, productId);
            
        }
        /// <summary>
        /// Test AddSparePartsToProduct
        /// </summary>
        [Test]
        public void AddSparePartsToProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SparePartIDs body = null;
            //long? productId = null;
            //instance.AddSparePartsToProduct(body, productId);
            
        }
        /// <summary>
        /// Test CreateProduct
        /// </summary>
        [Test]
        public void CreateProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductRequest body = null;
            //var response = instance.CreateProduct(body);
            //Assert.IsInstanceOf<ProductResponse> (response, "response is ProductResponse");
        }
        /// <summary>
        /// Test CreateProductFeature
        /// </summary>
        [Test]
        public void CreateProductFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductFeatureRequest body = null;
            //var response = instance.CreateProductFeature(body);
            //Assert.IsInstanceOf<ProductFeatureResponse> (response, "response is ProductFeatureResponse");
        }
        /// <summary>
        /// Test CreateProductOption
        /// </summary>
        [Test]
        public void CreateProductOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductOptionRequest body = null;
            //var response = instance.CreateProductOption(body);
            //Assert.IsInstanceOf<ProductOptionResponse> (response, "response is ProductOptionResponse");
        }
        /// <summary>
        /// Test CreateProductVariant
        /// </summary>
        [Test]
        public void CreateProductVariantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductVariantRequest body = null;
            //var response = instance.CreateProductVariant(body);
            //Assert.IsInstanceOf<ProductVariantResponse> (response, "response is ProductVariantResponse");
        }
        /// <summary>
        /// Test DeleteCategoriesFromProduct
        /// </summary>
        [Test]
        public void DeleteCategoriesFromProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryIDs body = null;
            //long? productId = null;
            //instance.DeleteCategoriesFromProduct(body, productId);
            
        }
        /// <summary>
        /// Test DeleteProduct
        /// </summary>
        [Test]
        public void DeleteProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteProduct(id);
            
        }
        /// <summary>
        /// Test DeleteProductFeature
        /// </summary>
        [Test]
        public void DeleteProductFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteProductFeature(id);
            
        }
        /// <summary>
        /// Test DeleteProductOption
        /// </summary>
        [Test]
        public void DeleteProductOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteProductOption(id);
            
        }
        /// <summary>
        /// Test DeleteProductPicture
        /// </summary>
        [Test]
        public void DeleteProductPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //long? id = null;
            //instance.DeleteProductPicture(productId, id);
            
        }
        /// <summary>
        /// Test DeleteProductVariant
        /// </summary>
        [Test]
        public void DeleteProductVariantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteProductVariant(id);
            
        }
        /// <summary>
        /// Test DownloadProductPicture
        /// </summary>
        [Test]
        public void DownloadProductPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //long? id = null;
            //instance.DownloadProductPicture(productId, id);
            
        }
        /// <summary>
        /// Test GetAssetProductOptions
        /// </summary>
        [Test]
        public void GetAssetProductOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string productCode = null;
            //string name = null;
            //string manufacturerId = null;
            //string statusId = null;
            //string categoryId = null;
            //string parentId = null;
            //string tenantId = null;
            //string orderBy = null;
            //var response = instance.GetAssetProductOptions(assetId, page, perPage, include, productCode, name, manufacturerId, statusId, categoryId, parentId, tenantId, orderBy);
            //Assert.IsInstanceOf<Products> (response, "response is Products");
        }
        /// <summary>
        /// Test GetCategoriesOfProduct
        /// </summary>
        [Test]
        public void GetCategoriesOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string code = null;
            //string parentId = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetCategoriesOfProduct(productId, page, perPage, include, name, code, parentId, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<ProductCategoriesResponse> (response, "response is ProductCategoriesResponse");
        }
        /// <summary>
        /// Test GetCategoriesOptionsOfProduct
        /// </summary>
        [Test]
        public void GetCategoriesOptionsOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string code = null;
            //string parentId = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetCategoriesOptionsOfProduct(productId, page, perPage, include, name, code, parentId, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<ProductCategoriesResponse> (response, "response is ProductCategoriesResponse");
        }
        /// <summary>
        /// Test GetDocumentsOfProduct
        /// </summary>
        [Test]
        public void GetDocumentsOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string documentVersion = null;
            //string number = null;
            //string statusId = null;
            //string classificationId = null;
            //string tenantId = null;
            //string categoryId = null;
            //DateTime? validFrom = null;
            //DateTime? validUntil = null;
            //DateTime? validAt = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentsOfProduct(productId, page, perPage, include, name, documentVersion, number, statusId, classificationId, tenantId, categoryId, validFrom, validUntil, validAt, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentsResponse> (response, "response is DocumentsResponse");
        }
        /// <summary>
        /// Test GetDocumentsOfProductVariant
        /// </summary>
        [Test]
        public void GetDocumentsOfProductVariantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productVariantId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string documentVersion = null;
            //string number = null;
            //string statusId = null;
            //string classificationId = null;
            //string tenantId = null;
            //string categoryId = null;
            //DateTime? validFrom = null;
            //DateTime? validUntil = null;
            //DateTime? validAt = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentsOfProductVariant(productVariantId, page, perPage, include, name, documentVersion, number, statusId, classificationId, tenantId, categoryId, validFrom, validUntil, validAt, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentsResponse> (response, "response is DocumentsResponse");
        }
        /// <summary>
        /// Test GetEdgeDeviceFeaturesOfProduct
        /// </summary>
        [Test]
        public void GetEdgeDeviceFeaturesOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string code = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetEdgeDeviceFeaturesOfProduct(productId, page, perPage, name, code, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<EdgeDeviceFeaturesResponse> (response, "response is EdgeDeviceFeaturesResponse");
        }
        /// <summary>
        /// Test GetProductById
        /// </summary>
        [Test]
        public void GetProductByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //string acceptLanguage = null;
            //var response = instance.GetProductById(id, include, acceptLanguage);
            //Assert.IsInstanceOf<ProductResponse> (response, "response is ProductResponse");
        }
        /// <summary>
        /// Test GetProductFeatureById
        /// </summary>
        [Test]
        public void GetProductFeatureByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetProductFeatureById(id);
            //Assert.IsInstanceOf<ProductFeatureResponse> (response, "response is ProductFeatureResponse");
        }
        /// <summary>
        /// Test GetProductFeatures
        /// </summary>
        [Test]
        public void GetProductFeaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string productId = null;
            //string featureKey = null;
            //string orderBy = null;
            //var response = instance.GetProductFeatures(page, perPage, productId, featureKey, orderBy);
            //Assert.IsInstanceOf<ProductFeaturesResponse> (response, "response is ProductFeaturesResponse");
        }
        /// <summary>
        /// Test GetProductIdStatus
        /// </summary>
        [Test]
        public void GetProductIdStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //string acceptLanguage = null;
            //var response = instance.GetProductIdStatus(productId, acceptLanguage);
            //Assert.IsInstanceOf<ProductStatusResponse> (response, "response is ProductStatusResponse");
        }
        /// <summary>
        /// Test GetProductOptionById
        /// </summary>
        [Test]
        public void GetProductOptionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetProductOptionById(id);
            //Assert.IsInstanceOf<ProductOptionResponse> (response, "response is ProductOptionResponse");
        }
        /// <summary>
        /// Test GetProductOptions
        /// </summary>
        [Test]
        public void GetProductOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string productFeatureId = null;
            //string optionKey = null;
            //string orderBy = null;
            //var response = instance.GetProductOptions(page, perPage, productFeatureId, optionKey, orderBy);
            //Assert.IsInstanceOf<ProductOptionsResponse> (response, "response is ProductOptionsResponse");
        }
        /// <summary>
        /// Test GetProductPicture
        /// </summary>
        [Test]
        public void GetProductPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //long? id = null;
            //var response = instance.GetProductPicture(productId, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test GetProductPictures
        /// </summary>
        [Test]
        public void GetProductPicturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //int? width = null;
            //int? widthFrom = null;
            //int? widthTo = null;
            //int? height = null;
            //int? heightFrom = null;
            //int? heightTo = null;
            //string orderBy = null;
            //var response = instance.GetProductPictures(id, width, widthFrom, widthTo, height, heightFrom, heightTo, orderBy);
            //Assert.IsInstanceOf<PicturesResponse> (response, "response is PicturesResponse");
        }
        /// <summary>
        /// Test GetProductStatusesOptions
        /// </summary>
        [Test]
        public void GetProductStatusesOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string tenantId = null;
            //string code = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetProductStatusesOptions(productId, page, perPage, name, tenantId, code, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<ProductStatuses> (response, "response is ProductStatuses");
        }
        /// <summary>
        /// Test GetProductVariantById
        /// </summary>
        [Test]
        public void GetProductVariantByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetProductVariantById(id);
            //Assert.IsInstanceOf<ProductVariantResponse> (response, "response is ProductVariantResponse");
        }
        /// <summary>
        /// Test GetProductVariantConfigurations
        /// </summary>
        [Test]
        public void GetProductVariantConfigurationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string orderBy = null;
            //var response = instance.GetProductVariantConfigurations(id, orderBy);
            //Assert.IsInstanceOf<ProductVariantConfigurationResponse> (response, "response is ProductVariantConfigurationResponse");
        }
        /// <summary>
        /// Test GetProductVariants
        /// </summary>
        [Test]
        public void GetProductVariantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string productId = null;
            //string variantCode = null;
            //string orderBy = null;
            //var response = instance.GetProductVariants(page, perPage, productId, variantCode, orderBy);
            //Assert.IsInstanceOf<ProductVariantsResponse> (response, "response is ProductVariantsResponse");
        }
        /// <summary>
        /// Test GetProducts
        /// </summary>
        [Test]
        public void GetProductsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string productCode = null;
            //string name = null;
            //string manufacturerId = null;
            //string statusId = null;
            //string categoryId = null;
            //string parentId = null;
            //string tenantId = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetProducts(page, perPage, include, productCode, name, manufacturerId, statusId, categoryId, parentId, tenantId, specificationsKey, specificationsValue, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<ProductsResponse> (response, "response is ProductsResponse");
        }
        /// <summary>
        /// Test GetProductsOfCompany
        /// </summary>
        [Test]
        public void GetProductsOfCompanyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? companyId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string productCode = null;
            //string name = null;
            //string statusId = null;
            //string categoryId = null;
            //string parentId = null;
            //string tenantId = null;
            //string orderBy = null;
            //var response = instance.GetProductsOfCompany(companyId, page, perPage, include, productCode, name, statusId, categoryId, parentId, tenantId, orderBy);
            //Assert.IsInstanceOf<ProductsResponse> (response, "response is ProductsResponse");
        }
        /// <summary>
        /// Test GetPurchaseOrdersOfProduct
        /// </summary>
        [Test]
        public void GetPurchaseOrdersOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string number = null;
            //string statusId = null;
            //string date = null;
            //string dateFrom = null;
            //string dateTo = null;
            //string senderId = null;
            //string receiverId = null;
            //string quotationId = null;
            //string customerNumber = null;
            //string orderBy = null;
            //var response = instance.GetPurchaseOrdersOfProduct(productId, page, perPage, name, number, statusId, date, dateFrom, dateTo, senderId, receiverId, quotationId, customerNumber, orderBy);
            //Assert.IsInstanceOf<PurchaseOrdersResponse> (response, "response is PurchaseOrdersResponse");
        }
        /// <summary>
        /// Test GetQuotationsOfProduct
        /// </summary>
        [Test]
        public void GetQuotationsOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string number = null;
            //string statusId = null;
            //string date = null;
            //string dateFrom = null;
            //string dateTo = null;
            //string senderId = null;
            //string receiverId = null;
            //string requestForQuotationId = null;
            //string orderBy = null;
            //var response = instance.GetQuotationsOfProduct(productId, page, perPage, name, number, statusId, date, dateFrom, dateTo, senderId, receiverId, requestForQuotationId, orderBy);
            //Assert.IsInstanceOf<QuotationsResponse> (response, "response is QuotationsResponse");
        }
        /// <summary>
        /// Test GetSoftwaresOfProduct
        /// </summary>
        [Test]
        public void GetSoftwaresOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetSoftwaresOfProduct(productId, page, perPage, include, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<SoftwaresResponse> (response, "response is SoftwaresResponse");
        }
        /// <summary>
        /// Test GetSparePartsOfProduct
        /// </summary>
        [Test]
        public void GetSparePartsOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string orderCode = null;
            //string statusId = null;
            //string typeId = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetSparePartsOfProduct(productId, page, perPage, include, name, orderCode, statusId, typeId, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<SparePartsResponse> (response, "response is SparePartsResponse");
        }
        /// <summary>
        /// Test GetSpecificationsOfProduct
        /// </summary>
        [Test]
        public void GetSpecificationsOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //string key = null;
            //var response = instance.GetSpecificationsOfProduct(productId, key);
            //Assert.IsInstanceOf<SpecificationsResponse> (response, "response is SpecificationsResponse");
        }
        /// <summary>
        /// Test RemoveDocumentsFromProduct
        /// </summary>
        [Test]
        public void RemoveDocumentsFromProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? productId = null;
            //instance.RemoveDocumentsFromProduct(body, productId);
            
        }
        /// <summary>
        /// Test RemoveEdgeDeviceFeaturesFromProduct
        /// </summary>
        [Test]
        public void RemoveEdgeDeviceFeaturesFromProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EdgeDeviceFeatureIDs body = null;
            //long? productId = null;
            //instance.RemoveEdgeDeviceFeaturesFromProduct(body, productId);
            
        }
        /// <summary>
        /// Test RemovePurchaseOrdersFromProduct
        /// </summary>
        [Test]
        public void RemovePurchaseOrdersFromProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PurchaseOrderIDs body = null;
            //long? productId = null;
            //instance.RemovePurchaseOrdersFromProduct(body, productId);
            
        }
        /// <summary>
        /// Test RemoveQuotationsFromProduct
        /// </summary>
        [Test]
        public void RemoveQuotationsFromProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QuotationIDs body = null;
            //long? productId = null;
            //instance.RemoveQuotationsFromProduct(body, productId);
            
        }
        /// <summary>
        /// Test RemoveSoftwaresOfProduct
        /// </summary>
        [Test]
        public void RemoveSoftwaresOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SoftwareIDs body = null;
            //long? productId = null;
            //instance.RemoveSoftwaresOfProduct(body, productId);
            
        }
        /// <summary>
        /// Test RemoveSparePartsFromProduct
        /// </summary>
        [Test]
        public void RemoveSparePartsFromProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SparePartIDs body = null;
            //long? productId = null;
            //instance.RemoveSparePartsFromProduct(body, productId);
            
        }
        /// <summary>
        /// Test RemoveSpecificationsFromProduct
        /// </summary>
        [Test]
        public void RemoveSpecificationsFromProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //long? productId = null;
            //instance.RemoveSpecificationsFromProduct(body, productId);
            
        }
        /// <summary>
        /// Test RenameSpecificationsOfProduct
        /// </summary>
        [Test]
        public void RenameSpecificationsOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SpecificationsRename body = null;
            //long? productId = null;
            //instance.RenameSpecificationsOfProduct(body, productId);
            
        }
        /// <summary>
        /// Test ReplaceCategoriesOfProduct
        /// </summary>
        [Test]
        public void ReplaceCategoriesOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryIDs body = null;
            //long? productId = null;
            //instance.ReplaceCategoriesOfProduct(body, productId);
            
        }
        /// <summary>
        /// Test ReplaceDocumentsOfProduct
        /// </summary>
        [Test]
        public void ReplaceDocumentsOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? productId = null;
            //instance.ReplaceDocumentsOfProduct(body, productId);
            
        }
        /// <summary>
        /// Test ReplaceEdgeDeviceFeaturesOfProduct
        /// </summary>
        [Test]
        public void ReplaceEdgeDeviceFeaturesOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EdgeDeviceFeatureIDs body = null;
            //long? productId = null;
            //instance.ReplaceEdgeDeviceFeaturesOfProduct(body, productId);
            
        }
        /// <summary>
        /// Test ReplacePurchaseOrdersOfProduct
        /// </summary>
        [Test]
        public void ReplacePurchaseOrdersOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PurchaseOrderIDs body = null;
            //long? productId = null;
            //instance.ReplacePurchaseOrdersOfProduct(body, productId);
            
        }
        /// <summary>
        /// Test ReplaceQuotationsOfProduct
        /// </summary>
        [Test]
        public void ReplaceQuotationsOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QuotationIDs body = null;
            //long? productId = null;
            //instance.ReplaceQuotationsOfProduct(body, productId);
            
        }
        /// <summary>
        /// Test ReplaceSoftwaresOfProduct
        /// </summary>
        [Test]
        public void ReplaceSoftwaresOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SoftwareIDs body = null;
            //long? productId = null;
            //instance.ReplaceSoftwaresOfProduct(body, productId);
            
        }
        /// <summary>
        /// Test ReplaceSparePartsOfProduct
        /// </summary>
        [Test]
        public void ReplaceSparePartsOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SparePartIDs body = null;
            //long? productId = null;
            //instance.ReplaceSparePartsOfProduct(body, productId);
            
        }
        /// <summary>
        /// Test SetProductVariantConfiguration
        /// </summary>
        [Test]
        public void SetProductVariantConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductVariantConfigurationRequest body = null;
            //long? id = null;
            //instance.SetProductVariantConfiguration(body, id);
            
        }
        /// <summary>
        /// Test UpdateProduct
        /// </summary>
        [Test]
        public void UpdateProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductRequest body = null;
            //long? id = null;
            //instance.UpdateProduct(body, id);
            
        }
        /// <summary>
        /// Test UpdateProductFeature
        /// </summary>
        [Test]
        public void UpdateProductFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductFeatureRequest body = null;
            //long? id = null;
            //string contentLanguage = null;
            //instance.UpdateProductFeature(body, id, contentLanguage);
            
        }
        /// <summary>
        /// Test UpdateProductOption
        /// </summary>
        [Test]
        public void UpdateProductOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductOptionRequest body = null;
            //long? id = null;
            //instance.UpdateProductOption(body, id);
            
        }
        /// <summary>
        /// Test UpdateProductPicture
        /// </summary>
        [Test]
        public void UpdateProductPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] image = null;
            //long? productId = null;
            //long? id = null;
            //var response = instance.UpdateProductPicture(image, productId, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test UpdateProductPictureLink
        /// </summary>
        [Test]
        public void UpdateProductPictureLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PictureLinkRequest body = null;
            //long? productId = null;
            //long? id = null;
            //var response = instance.UpdateProductPictureLink(body, productId, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test UpdateProductVariant
        /// </summary>
        [Test]
        public void UpdateProductVariantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductVariantRequest body = null;
            //long? id = null;
            //instance.UpdateProductVariant(body, id);
            
        }
        /// <summary>
        /// Test UpdateSpecificationsOfProduct
        /// </summary>
        [Test]
        public void UpdateSpecificationsOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, SpecificationRequest> body = null;
            //long? productId = null;
            //instance.UpdateSpecificationsOfProduct(body, productId);
            
        }
        /// <summary>
        /// Test UploadProductPicture
        /// </summary>
        [Test]
        public void UploadProductPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] image = null;
            //long? id = null;
            //var response = instance.UploadProductPicture(image, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
    }

}
