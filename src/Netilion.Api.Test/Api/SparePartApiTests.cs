/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing SparePartApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SparePartApiTests
    {
        private SparePartApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SparePartApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SparePartApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SparePartApi
            //Assert.IsInstanceOfType(typeof(SparePartApi), instance, "instance is a SparePartApi");
        }

        /// <summary>
        /// Test AddDocumentsToSparePart
        /// </summary>
        [Test]
        public void AddDocumentsToSparePartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? sparePartId = null;
            //instance.AddDocumentsToSparePart(body, sparePartId);
            
        }
        /// <summary>
        /// Test CreateSparePart
        /// </summary>
        [Test]
        public void CreateSparePartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SparePartRequest body = null;
            //var response = instance.CreateSparePart(body);
            //Assert.IsInstanceOf<SparePartResponse> (response, "response is SparePartResponse");
        }
        /// <summary>
        /// Test DeleteSparePart
        /// </summary>
        [Test]
        public void DeleteSparePartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteSparePart(id);
            
        }
        /// <summary>
        /// Test GetDocumentsOfSparePart
        /// </summary>
        [Test]
        public void GetDocumentsOfSparePartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sparePartId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string documentVersion = null;
            //string number = null;
            //string statusId = null;
            //string classificationId = null;
            //string tenantId = null;
            //string categoryId = null;
            //DateTime? validFrom = null;
            //DateTime? validUntil = null;
            //DateTime? validAt = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentsOfSparePart(sparePartId, page, perPage, include, name, documentVersion, number, statusId, classificationId, tenantId, categoryId, validFrom, validUntil, validAt, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentsResponse> (response, "response is DocumentsResponse");
        }
        /// <summary>
        /// Test GetSparePartById
        /// </summary>
        [Test]
        public void GetSparePartByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //string acceptLanguage = null;
            //var response = instance.GetSparePartById(id, include, acceptLanguage);
            //Assert.IsInstanceOf<SparePartResponse> (response, "response is SparePartResponse");
        }
        /// <summary>
        /// Test GetSparePartStatusesOptions
        /// </summary>
        [Test]
        public void GetSparePartStatusesOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sparePartId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string tenantId = null;
            //string code = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetSparePartStatusesOptions(sparePartId, page, perPage, name, tenantId, code, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<SparePartStatuses> (response, "response is SparePartStatuses");
        }
        /// <summary>
        /// Test GetSparePartTypesOptions
        /// </summary>
        [Test]
        public void GetSparePartTypesOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? sparePartId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string tenantId = null;
            //string code = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetSparePartTypesOptions(sparePartId, page, perPage, name, tenantId, code, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<SparePartTypes> (response, "response is SparePartTypes");
        }
        /// <summary>
        /// Test GetSpareParts
        /// </summary>
        [Test]
        public void GetSparePartsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string orderCode = null;
            //string name = null;
            //string statusId = null;
            //string typeId = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetSpareParts(page, perPage, include, orderCode, name, statusId, typeId, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<SparePartsResponse> (response, "response is SparePartsResponse");
        }
        /// <summary>
        /// Test RemoveDocumentsFromSparePart
        /// </summary>
        [Test]
        public void RemoveDocumentsFromSparePartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? sparePartId = null;
            //instance.RemoveDocumentsFromSparePart(body, sparePartId);
            
        }
        /// <summary>
        /// Test ReplaceDocumentsOfSparePart
        /// </summary>
        [Test]
        public void ReplaceDocumentsOfSparePartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? sparePartId = null;
            //instance.ReplaceDocumentsOfSparePart(body, sparePartId);
            
        }
        /// <summary>
        /// Test UpdateSparePart
        /// </summary>
        [Test]
        public void UpdateSparePartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SparePartRequest body = null;
            //long? id = null;
            //instance.UpdateSparePart(body, id);
            
        }
    }

}
