/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing ProductCategoryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProductCategoryApiTests
    {
        private ProductCategoryApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProductCategoryApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProductCategoryApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProductCategoryApi
            //Assert.IsInstanceOfType(typeof(ProductCategoryApi), instance, "instance is a ProductCategoryApi");
        }

        /// <summary>
        /// Test AddCategoriesToProduct
        /// </summary>
        [Test]
        public void AddCategoriesToProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryIDs body = null;
            //long? productId = null;
            //instance.AddCategoriesToProduct(body, productId);
            
        }
        /// <summary>
        /// Test AddProductsToProductCategory
        /// </summary>
        [Test]
        public void AddProductsToProductCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductIDs body = null;
            //long? categoryId = null;
            //instance.AddProductsToProductCategory(body, categoryId);
            
        }
        /// <summary>
        /// Test CreateProductCategory
        /// </summary>
        [Test]
        public void CreateProductCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductCategoryRequest body = null;
            //var response = instance.CreateProductCategory(body);
            //Assert.IsInstanceOf<ProductCategoryResponse> (response, "response is ProductCategoryResponse");
        }
        /// <summary>
        /// Test CreateProductsOfProductCategory
        /// </summary>
        [Test]
        public void CreateProductsOfProductCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? categoryId = null;
            //int? page = null;
            //int? perPage = null;
            //string productCode = null;
            //string name = null;
            //string manufacturerId = null;
            //string statusId = null;
            //string parentId = null;
            //string tenantId = null;
            //string orderBy = null;
            //var response = instance.CreateProductsOfProductCategory(categoryId, page, perPage, productCode, name, manufacturerId, statusId, parentId, tenantId, orderBy);
            //Assert.IsInstanceOf<ProductsResponse> (response, "response is ProductsResponse");
        }
        /// <summary>
        /// Test DeleteCategoriesFromProduct
        /// </summary>
        [Test]
        public void DeleteCategoriesFromProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryIDs body = null;
            //long? productId = null;
            //instance.DeleteCategoriesFromProduct(body, productId);
            
        }
        /// <summary>
        /// Test DeleteProductCategory
        /// </summary>
        [Test]
        public void DeleteProductCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteProductCategory(id);
            
        }
        /// <summary>
        /// Test GetCategoriesOfProduct
        /// </summary>
        [Test]
        public void GetCategoriesOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string code = null;
            //string parentId = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetCategoriesOfProduct(productId, page, perPage, include, name, code, parentId, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<ProductCategoriesResponse> (response, "response is ProductCategoriesResponse");
        }
        /// <summary>
        /// Test GetCategoriesOptionsOfProduct
        /// </summary>
        [Test]
        public void GetCategoriesOptionsOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string code = null;
            //string parentId = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetCategoriesOptionsOfProduct(productId, page, perPage, include, name, code, parentId, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<ProductCategoriesResponse> (response, "response is ProductCategoriesResponse");
        }
        /// <summary>
        /// Test GetProductCategories
        /// </summary>
        [Test]
        public void GetProductCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string code = null;
            //string name = null;
            //string parentId = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetProductCategories(page, perPage, include, code, name, parentId, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<ProductCategoriesResponse> (response, "response is ProductCategoriesResponse");
        }
        /// <summary>
        /// Test GetProductCategoryById
        /// </summary>
        [Test]
        public void GetProductCategoryByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //string acceptLanguage = null;
            //var response = instance.GetProductCategoryById(id, include, acceptLanguage);
            //Assert.IsInstanceOf<ProductCategoryResponse> (response, "response is ProductCategoryResponse");
        }
        /// <summary>
        /// Test RemoveProductsFromProductCategory
        /// </summary>
        [Test]
        public void RemoveProductsFromProductCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductIDs body = null;
            //long? categoryId = null;
            //instance.RemoveProductsFromProductCategory(body, categoryId);
            
        }
        /// <summary>
        /// Test ReplaceCategoriesOfProduct
        /// </summary>
        [Test]
        public void ReplaceCategoriesOfProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryIDs body = null;
            //long? productId = null;
            //instance.ReplaceCategoriesOfProduct(body, productId);
            
        }
        /// <summary>
        /// Test ReplaceProductsOfProductCategory
        /// </summary>
        [Test]
        public void ReplaceProductsOfProductCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductIDs body = null;
            //long? categoryId = null;
            //instance.ReplaceProductsOfProductCategory(body, categoryId);
            
        }
        /// <summary>
        /// Test UpdateProductCategory
        /// </summary>
        [Test]
        public void UpdateProductCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProductCategoryRequest body = null;
            //long? id = null;
            //string contentLanguage = null;
            //instance.UpdateProductCategory(body, id, contentLanguage);
            
        }
    }

}
