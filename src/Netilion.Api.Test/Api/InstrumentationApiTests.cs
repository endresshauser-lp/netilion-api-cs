/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing InstrumentationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class InstrumentationApiTests
    {
        private InstrumentationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InstrumentationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InstrumentationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InstrumentationApi
            //Assert.IsInstanceOfType(typeof(InstrumentationApi), instance, "instance is a InstrumentationApi");
        }

        /// <summary>
        /// Test AddAssetsToInstrumentation
        /// </summary>
        [Test]
        public void AddAssetsToInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetIDs body = null;
            //long? instrumentationId = null;
            //instance.AddAssetsToInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test AddBillOfMaterialsToInstrumentation
        /// </summary>
        [Test]
        public void AddBillOfMaterialsToInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BillOfMaterialIDs body = null;
            //long? instrumentationId = null;
            //instance.AddBillOfMaterialsToInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test AddDocumentsToInstrumentation
        /// </summary>
        [Test]
        public void AddDocumentsToInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? instrumentationId = null;
            //instance.AddDocumentsToInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test AddInstrumentationPictureLink
        /// </summary>
        [Test]
        public void AddInstrumentationPictureLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PictureLinkRequest body = null;
            //long? id = null;
            //var response = instance.AddInstrumentationPictureLink(body, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test AddNodesToInstrumentation
        /// </summary>
        [Test]
        public void AddNodesToInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NodeIDs body = null;
            //long? instrumentationId = null;
            //instance.AddNodesToInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test CreateEventForInstrumentation
        /// </summary>
        [Test]
        public void CreateEventForInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EventRequestNoInstrumentations body = null;
            //long? instrumentationId = null;
            //var response = instance.CreateEventForInstrumentation(body, instrumentationId);
            //Assert.IsInstanceOf<EventResponse> (response, "response is EventResponse");
        }
        /// <summary>
        /// Test CreateInstrumentation
        /// </summary>
        [Test]
        public void CreateInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InstrumentationRequest body = null;
            //var response = instance.CreateInstrumentation(body);
            //Assert.IsInstanceOf<InstrumentationResponse> (response, "response is InstrumentationResponse");
        }
        /// <summary>
        /// Test CreateInstrumentationThreshold
        /// </summary>
        [Test]
        public void CreateInstrumentationThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ThresholdRequest body = null;
            //long? instrumentationId = null;
            //var response = instance.CreateInstrumentationThreshold(body, instrumentationId);
            //Assert.IsInstanceOf<ThresholdResponse> (response, "response is ThresholdResponse");
        }
        /// <summary>
        /// Test DeleteInstrumentation
        /// </summary>
        [Test]
        public void DeleteInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteInstrumentation(id);
            
        }
        /// <summary>
        /// Test DeleteInstrumentationPicture
        /// </summary>
        [Test]
        public void DeleteInstrumentationPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //long? id = null;
            //instance.DeleteInstrumentationPicture(instrumentationId, id);
            
        }
        /// <summary>
        /// Test DeleteInstrumentationThreshold
        /// </summary>
        [Test]
        public void DeleteInstrumentationThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //long? id = null;
            //instance.DeleteInstrumentationThreshold(instrumentationId, id);
            
        }
        /// <summary>
        /// Test DownloadInstrumentationPicture
        /// </summary>
        [Test]
        public void DownloadInstrumentationPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //long? id = null;
            //instance.DownloadInstrumentationPicture(instrumentationId, id);
            
        }
        /// <summary>
        /// Test GetAssetsOfInstrumentation
        /// </summary>
        [Test]
        public void GetAssetsOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string serialNumber = null;
            //string productId = null;
            //string productCategoryId = null;
            //string parentId = null;
            //string manufacturerId = null;
            //string statusId = null;
            //string statusCode = null;
            //string tenantId = null;
            //DateTime? productionDate = null;
            //DateTime? productionDateFrom = null;
            //DateTime? productionDateTo = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string nodeId = null;
            //DateTime? createdAt = null;
            //string createdAtFrom = null;
            //string createdAtTo = null;
            //DateTime? updatedAt = null;
            //string updatedAtFrom = null;
            //string updatedAtTo = null;
            //bool? ownershipClaimed = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetAssetsOfInstrumentation(instrumentationId, page, perPage, include, serialNumber, productId, productCategoryId, parentId, manufacturerId, statusId, statusCode, tenantId, productionDate, productionDateFrom, productionDateTo, specificationsKey, specificationsValue, nodeId, createdAt, createdAtFrom, createdAtTo, updatedAt, updatedAtFrom, updatedAtTo, ownershipClaimed, permission, orderBy);
            //Assert.IsInstanceOf<AssetsResponse> (response, "response is AssetsResponse");
        }
        /// <summary>
        /// Test GetAssetsOfInstrumentationHistory
        /// </summary>
        [Test]
        public void GetAssetsOfInstrumentationHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //int? page = null;
            //int? perPage = null;
            //string assetId = null;
            //string _event = null;
            //DateTime? eventDatetimeFrom = null;
            //DateTime? eventDatetimeTo = null;
            //string orderBy = null;
            //var response = instance.GetAssetsOfInstrumentationHistory(instrumentationId, page, perPage, assetId, _event, eventDatetimeFrom, eventDatetimeTo, orderBy);
            //Assert.IsInstanceOf<InstrumentationAssetsHistoryResponse> (response, "response is InstrumentationAssetsHistoryResponse");
        }
        /// <summary>
        /// Test GetBillOfMaterialsOfInstrumentation
        /// </summary>
        [Test]
        public void GetBillOfMaterialsOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string author = null;
            //string date = null;
            //string dateFrom = null;
            //string dateTo = null;
            //var response = instance.GetBillOfMaterialsOfInstrumentation(instrumentationId, page, perPage, name, author, date, dateFrom, dateTo);
            //Assert.IsInstanceOf<BillOfMaterialsResponse> (response, "response is BillOfMaterialsResponse");
        }
        /// <summary>
        /// Test GetDocumentsOfInstrumentation
        /// </summary>
        [Test]
        public void GetDocumentsOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string documentVersion = null;
            //string number = null;
            //string statusId = null;
            //string classificationId = null;
            //string tenantId = null;
            //string categoryId = null;
            //DateTime? validFrom = null;
            //DateTime? validUntil = null;
            //DateTime? validAt = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentsOfInstrumentation(instrumentationId, page, perPage, include, name, documentVersion, number, statusId, classificationId, tenantId, categoryId, validFrom, validUntil, validAt, acceptLanguage);
            //Assert.IsInstanceOf<DocumentsResponse> (response, "response is DocumentsResponse");
        }
        /// <summary>
        /// Test GetEventsOfInstrumentation
        /// </summary>
        [Test]
        public void GetEventsOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string typeId = null;
            //string statusId = null;
            //string startDatetime = null;
            //string startDatetimeFrom = null;
            //string startDatetimeTo = null;
            //string endDatetime = null;
            //DateTime? endDatetimeFrom = null;
            //string endDatetimeTo = null;
            //string tenantId = null;
            //string orderBy = null;
            //var response = instance.GetEventsOfInstrumentation(instrumentationId, page, perPage, include, name, typeId, statusId, startDatetime, startDatetimeFrom, startDatetimeTo, endDatetime, endDatetimeFrom, endDatetimeTo, tenantId, orderBy);
            //Assert.IsInstanceOf<EventsResponse> (response, "response is EventsResponse");
        }
        /// <summary>
        /// Test GetInstrumentationById
        /// </summary>
        [Test]
        public void GetInstrumentationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //var response = instance.GetInstrumentationById(id, include);
            //Assert.IsInstanceOf<InstrumentationResponse> (response, "response is InstrumentationResponse");
        }
        /// <summary>
        /// Test GetInstrumentationIdStatus
        /// </summary>
        [Test]
        public void GetInstrumentationIdStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //string acceptLanguage = null;
            //var response = instance.GetInstrumentationIdStatus(instrumentationId, acceptLanguage);
            //Assert.IsInstanceOf<InstrumentationStatusResponse> (response, "response is InstrumentationStatusResponse");
        }
        /// <summary>
        /// Test GetInstrumentationIdType
        /// </summary>
        [Test]
        public void GetInstrumentationIdTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //string acceptLanguage = null;
            //var response = instance.GetInstrumentationIdType(instrumentationId, acceptLanguage);
            //Assert.IsInstanceOf<InstrumentationTypeResponse> (response, "response is InstrumentationTypeResponse");
        }
        /// <summary>
        /// Test GetInstrumentationPicture
        /// </summary>
        [Test]
        public void GetInstrumentationPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //long? id = null;
            //var response = instance.GetInstrumentationPicture(instrumentationId, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test GetInstrumentationPictures
        /// </summary>
        [Test]
        public void GetInstrumentationPicturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //int? width = null;
            //int? widthFrom = null;
            //int? widthTo = null;
            //int? height = null;
            //int? heightFrom = null;
            //int? heightTo = null;
            //var response = instance.GetInstrumentationPictures(id, width, widthFrom, widthTo, height, heightFrom, heightTo);
            //Assert.IsInstanceOf<PicturesResponse> (response, "response is PicturesResponse");
        }
        /// <summary>
        /// Test GetInstrumentationStatusesOptions
        /// </summary>
        [Test]
        public void GetInstrumentationStatusesOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //int? page = null;
            //int? perPage = null;
            //string tenantId = null;
            //string name = null;
            //string code = null;
            //string acceptLanguage = null;
            //var response = instance.GetInstrumentationStatusesOptions(instrumentationId, page, perPage, tenantId, name, code, acceptLanguage);
            //Assert.IsInstanceOf<InstrumentationStatuses> (response, "response is InstrumentationStatuses");
        }
        /// <summary>
        /// Test GetInstrumentationThreshold
        /// </summary>
        [Test]
        public void GetInstrumentationThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //long? id = null;
            //var response = instance.GetInstrumentationThreshold(instrumentationId, id);
            //Assert.IsInstanceOf<ThresholdResponse> (response, "response is ThresholdResponse");
        }
        /// <summary>
        /// Test GetInstrumentationThresholds
        /// </summary>
        [Test]
        public void GetInstrumentationThresholdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //string key = null;
            //string thresholdType = null;
            //string orderBy = null;
            //var response = instance.GetInstrumentationThresholds(instrumentationId, key, thresholdType, orderBy);
            //Assert.IsInstanceOf<ThresholdsResponse> (response, "response is ThresholdsResponse");
        }
        /// <summary>
        /// Test GetInstrumentationTypesOptions
        /// </summary>
        [Test]
        public void GetInstrumentationTypesOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //int? page = null;
            //int? perPage = null;
            //string tenantId = null;
            //string name = null;
            //string code = null;
            //string acceptLanguage = null;
            //var response = instance.GetInstrumentationTypesOptions(instrumentationId, page, perPage, tenantId, name, code, acceptLanguage);
            //Assert.IsInstanceOf<InstrumentationTypes> (response, "response is InstrumentationTypes");
        }
        /// <summary>
        /// Test GetInstrumentationValueObjectsForKey
        /// </summary>
        [Test]
        public void GetInstrumentationValueObjectsForKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //string key = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //DateTime? from = null;
            //DateTime? to = null;
            //DateTime? datetime = null;
            //string selector = null;
            //string interval = null;
            //string orderBy = null;
            //var response = instance.GetInstrumentationValueObjectsForKey(instrumentationId, key, page, perPage, include, from, to, datetime, selector, interval, orderBy);
            //Assert.IsInstanceOf<AssetKeyValueObjectsResponse> (response, "response is AssetKeyValueObjectsResponse");
        }
        /// <summary>
        /// Test GetInstrumentationValues
        /// </summary>
        [Test]
        public void GetInstrumentationValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //bool? usePreferredUnits = null;
            //string key = null;
            //string keyUnitId = null;
            //string group = null;
            //var response = instance.GetInstrumentationValues(instrumentationId, page, perPage, include, usePreferredUnits, key, keyUnitId, group);
            //Assert.IsInstanceOf<AssetValuesResponse> (response, "response is AssetValuesResponse");
        }
        /// <summary>
        /// Test GetInstrumentationValuesForKey
        /// </summary>
        [Test]
        public void GetInstrumentationValuesForKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //string key = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //bool? usePreferredUnits = null;
            //DateTime? from = null;
            //DateTime? to = null;
            //int? unitId = null;
            //string aggregation = null;
            //string interval = null;
            //string orderBy = null;
            //var response = instance.GetInstrumentationValuesForKey(instrumentationId, key, page, perPage, include, usePreferredUnits, from, to, unitId, aggregation, interval, orderBy);
            //Assert.IsInstanceOf<AssetKeyValuesResponse> (response, "response is AssetKeyValuesResponse");
        }
        /// <summary>
        /// Test GetInstrumentations
        /// </summary>
        [Test]
        public void GetInstrumentationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string tag = null;
            //string statusId = null;
            //string typeId = null;
            //string parentId = null;
            //string tenantId = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string criticality = null;
            //string accessibility = null;
            //string nodeId = null;
            //string assetId = null;
            //string systemId = null;
            //string assetStatusId = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetInstrumentations(page, perPage, include, tag, statusId, typeId, parentId, tenantId, specificationsKey, specificationsValue, criticality, accessibility, nodeId, assetId, systemId, assetStatusId, permission, orderBy);
            //Assert.IsInstanceOf<InstrumentationsResponse> (response, "response is InstrumentationsResponse");
        }
        /// <summary>
        /// Test GetNodesOfInstrumentation
        /// </summary>
        [Test]
        public void GetNodesOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string typeId = null;
            //string parentId = null;
            //string tenantId = null;
            //bool? hidden = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetNodesOfInstrumentation(instrumentationId, page, perPage, include, name, typeId, parentId, tenantId, hidden, permission, orderBy);
            //Assert.IsInstanceOf<NodesResponse> (response, "response is NodesResponse");
        }
        /// <summary>
        /// Test GetSpecificationHistoryOfInstrumentation
        /// </summary>
        [Test]
        public void GetSpecificationHistoryOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //string key = null;
            //int? page = null;
            //int? perPage = null;
            //DateTime? sourceTimestampFrom = null;
            //DateTime? sourceTimestampTo = null;
            //DateTime? updatedAtFrom = null;
            //DateTime? updatedAtTo = null;
            //string orderBy = null;
            //var response = instance.GetSpecificationHistoryOfInstrumentation(instrumentationId, key, page, perPage, sourceTimestampFrom, sourceTimestampTo, updatedAtFrom, updatedAtTo, orderBy);
            //Assert.IsInstanceOf<SpecificationHistoryResponse> (response, "response is SpecificationHistoryResponse");
        }
        /// <summary>
        /// Test GetSpecificationKeysOfInstrumentations
        /// </summary>
        [Test]
        public void GetSpecificationKeysOfInstrumentationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //bool? uiVisible = null;
            //var response = instance.GetSpecificationKeysOfInstrumentations(key, uiVisible);
            //Assert.IsInstanceOf<SpecificationKeys> (response, "response is SpecificationKeys");
        }
        /// <summary>
        /// Test GetSpecificationsOfInstrumentation
        /// </summary>
        [Test]
        public void GetSpecificationsOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //string key = null;
            //bool? uiVisible = null;
            //var response = instance.GetSpecificationsOfInstrumentation(instrumentationId, key, uiVisible);
            //Assert.IsInstanceOf<SpecificationsUIVisibleResponse> (response, "response is SpecificationsUIVisibleResponse");
        }
        /// <summary>
        /// Test GetSystemsOfInstrumentation
        /// </summary>
        [Test]
        public void GetSystemsOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string statusId = null;
            //string typeId = null;
            //string tenantId = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetSystemsOfInstrumentation(instrumentationId, page, perPage, include, name, statusId, typeId, tenantId, specificationsKey, specificationsValue, permission, orderBy);
            //Assert.IsInstanceOf<SystemsResponse> (response, "response is SystemsResponse");
        }
        /// <summary>
        /// Test RemoveAssetsFromInstrumentation
        /// </summary>
        [Test]
        public void RemoveAssetsFromInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetIDs body = null;
            //long? instrumentationId = null;
            //instance.RemoveAssetsFromInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test RemoveBillOfMaterialsFromInstrumentation
        /// </summary>
        [Test]
        public void RemoveBillOfMaterialsFromInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BillOfMaterialIDs body = null;
            //long? instrumentationId = null;
            //instance.RemoveBillOfMaterialsFromInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test RemoveDocumentsFromInstrumentation
        /// </summary>
        [Test]
        public void RemoveDocumentsFromInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? instrumentationId = null;
            //instance.RemoveDocumentsFromInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test RemoveEventFromInstrumentation
        /// </summary>
        [Test]
        public void RemoveEventFromInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Events1 body = null;
            //long? instrumentationId = null;
            //instance.RemoveEventFromInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test RemoveNodesFromInstrumentation
        /// </summary>
        [Test]
        public void RemoveNodesFromInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NodeIDs body = null;
            //long? instrumentationId = null;
            //instance.RemoveNodesFromInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test RemoveSpecificationsFromInstrumentation
        /// </summary>
        [Test]
        public void RemoveSpecificationsFromInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //long? instrumentationId = null;
            //instance.RemoveSpecificationsFromInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test RenameSpecificationsOfInstrumentation
        /// </summary>
        [Test]
        public void RenameSpecificationsOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SpecificationsRename body = null;
            //long? instrumentationId = null;
            //instance.RenameSpecificationsOfInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test ReplaceAssetsOfInstrumentation
        /// </summary>
        [Test]
        public void ReplaceAssetsOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetIDs body = null;
            //long? instrumentationId = null;
            //instance.ReplaceAssetsOfInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test ReplaceBillOfMaterialsOfInstrumentation
        /// </summary>
        [Test]
        public void ReplaceBillOfMaterialsOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BillOfMaterialIDs body = null;
            //long? instrumentationId = null;
            //instance.ReplaceBillOfMaterialsOfInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test ReplaceDocumentsOfInstrumentation
        /// </summary>
        [Test]
        public void ReplaceDocumentsOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? instrumentationId = null;
            //instance.ReplaceDocumentsOfInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test ReplaceNodesOfInstrumentation
        /// </summary>
        [Test]
        public void ReplaceNodesOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NodeIDs body = null;
            //long? instrumentationId = null;
            //instance.ReplaceNodesOfInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test UpdateInstrumentation
        /// </summary>
        [Test]
        public void UpdateInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InstrumentationRequest body = null;
            //long? id = null;
            //instance.UpdateInstrumentation(body, id);
            
        }
        /// <summary>
        /// Test UpdateInstrumentationPicture
        /// </summary>
        [Test]
        public void UpdateInstrumentationPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] image = null;
            //long? instrumentationId = null;
            //long? id = null;
            //var response = instance.UpdateInstrumentationPicture(image, instrumentationId, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test UpdateInstrumentationPictureLink
        /// </summary>
        [Test]
        public void UpdateInstrumentationPictureLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PictureLinkRequest body = null;
            //long? instrumentationId = null;
            //long? id = null;
            //var response = instance.UpdateInstrumentationPictureLink(body, instrumentationId, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test UpdateInstrumentationThreshold
        /// </summary>
        [Test]
        public void UpdateInstrumentationThresholdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ThresholdRequest body = null;
            //long? instrumentationId = null;
            //long? id = null;
            //var response = instance.UpdateInstrumentationThreshold(body, instrumentationId, id);
            //Assert.IsInstanceOf<ThresholdResponse> (response, "response is ThresholdResponse");
        }
        /// <summary>
        /// Test UpdateSpecificationsOfInstrumentation
        /// </summary>
        [Test]
        public void UpdateSpecificationsOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, SpecificationUIVisibleRequest> body = null;
            //long? instrumentationId = null;
            //instance.UpdateSpecificationsOfInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test UploadInstrumentationPicture
        /// </summary>
        [Test]
        public void UploadInstrumentationPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] image = null;
            //long? id = null;
            //var response = instance.UploadInstrumentationPicture(image, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
    }

}
