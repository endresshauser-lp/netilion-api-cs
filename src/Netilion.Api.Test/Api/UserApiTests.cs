/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserApiTests
    {
        private UserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UserApi
            //Assert.IsInstanceOfType(typeof(UserApi), instance, "instance is a UserApi");
        }

        /// <summary>
        /// Test AddUserGroupsToUser
        /// </summary>
        [Test]
        public void AddUserGroupsToUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserGroupIDs body = null;
            //long? userId = null;
            //instance.AddUserGroupsToUser(body, userId);
            
        }
        /// <summary>
        /// Test AddUserRolesToUser
        /// </summary>
        [Test]
        public void AddUserRolesToUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserRoleIDs body = null;
            //long? userId = null;
            //instance.AddUserRolesToUser(body, userId);
            
        }
        /// <summary>
        /// Test CreateCurrentUserDataExport
        /// </summary>
        [Test]
        public void CreateCurrentUserDataExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataExportRequest body = null;
            //var response = instance.CreateCurrentUserDataExport(body);
            //Assert.IsInstanceOf<DataExportResponse> (response, "response is DataExportResponse");
        }
        /// <summary>
        /// Test CreateTechnicalUser
        /// </summary>
        [Test]
        public void CreateTechnicalUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TechnicalUserRequest body = null;
            //var response = instance.CreateTechnicalUser(body);
            //Assert.IsInstanceOf<TechnicalUserCreateResponse> (response, "response is TechnicalUserCreateResponse");
        }
        /// <summary>
        /// Test DeleteCurrentUserDatasExport
        /// </summary>
        [Test]
        public void DeleteCurrentUserDatasExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteCurrentUserDatasExport(id);
            
        }
        /// <summary>
        /// Test DeleteCurrentUserDemoData
        /// </summary>
        [Test]
        public void DeleteCurrentUserDemoDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteCurrentUserDemoData();
            
        }
        /// <summary>
        /// Test DeleteCurrentUserNotifications
        /// </summary>
        [Test]
        public void DeleteCurrentUserNotificationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteCurrentUserNotifications(id);
            
        }
        /// <summary>
        /// Test DeleteTechnicalUser
        /// </summary>
        [Test]
        public void DeleteTechnicalUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteTechnicalUser(id);
            
        }
        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Test]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteUser(id);
            
        }
        /// <summary>
        /// Test GetCurrentUser
        /// </summary>
        [Test]
        public void GetCurrentUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string include = null;
            //var response = instance.GetCurrentUser(include);
            //Assert.IsInstanceOf<CurrentUserResponse> (response, "response is CurrentUserResponse");
        }
        /// <summary>
        /// Test GetCurrentUserAccessRights
        /// </summary>
        [Test]
        public void GetCurrentUserAccessRightsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? permitableId = null;
            //string permitableType = null;
            //var response = instance.GetCurrentUserAccessRights(permitableId, permitableType);
            //Assert.IsInstanceOf<AccessRightsResponse> (response, "response is AccessRightsResponse");
        }
        /// <summary>
        /// Test GetCurrentUserDataExportbyId
        /// </summary>
        [Test]
        public void GetCurrentUserDataExportbyIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetCurrentUserDataExportbyId(id);
            //Assert.IsInstanceOf<DataExportResponse> (response, "response is DataExportResponse");
        }
        /// <summary>
        /// Test GetCurrentUserDataExports
        /// </summary>
        [Test]
        public void GetCurrentUserDataExportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //long? instrumentationId = null;
            //long? assetId = null;
            //long? systemId = null;
            //long? batchId = null;
            //string language = null;
            //var response = instance.GetCurrentUserDataExports(type, instrumentationId, assetId, systemId, batchId, language);
            //Assert.IsInstanceOf<DataExportsResponse> (response, "response is DataExportsResponse");
        }
        /// <summary>
        /// Test GetCurrentUserDataExportsFile
        /// </summary>
        [Test]
        public void GetCurrentUserDataExportsFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.GetCurrentUserDataExportsFile(id);
            
        }
        /// <summary>
        /// Test GetCurrentUserDemoData
        /// </summary>
        [Test]
        public void GetCurrentUserDemoDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCurrentUserDemoData();
            //Assert.IsInstanceOf<CurrentUserDemoDataResponse> (response, "response is CurrentUserDemoDataResponse");
        }
        /// <summary>
        /// Test GetCurrentUserNotifications
        /// </summary>
        [Test]
        public void GetCurrentUserNotificationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string startDatetime = null;
            //string startDatetimeFrom = null;
            //string startDatetimeTo = null;
            //string endDatetime = null;
            //DateTime? endDatetimeFrom = null;
            //string endDatetimeTo = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetCurrentUserNotifications(page, perPage, startDatetime, startDatetimeFrom, startDatetimeTo, endDatetime, endDatetimeFrom, endDatetimeTo, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<Notifications> (response, "response is Notifications");
        }
        /// <summary>
        /// Test GetSignInsOfAllUser
        /// </summary>
        [Test]
        public void GetSignInsOfAllUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //DateTime? time = null;
            //string timeFrom = null;
            //string timeTo = null;
            //var response = instance.GetSignInsOfAllUser(page, perPage, time, timeFrom, timeTo);
            //Assert.IsInstanceOf<SignInsResponse> (response, "response is SignInsResponse");
        }
        /// <summary>
        /// Test GetSignInsOfUser
        /// </summary>
        [Test]
        public void GetSignInsOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //int? page = null;
            //int? perPage = null;
            //DateTime? time = null;
            //string timeFrom = null;
            //string timeTo = null;
            //var response = instance.GetSignInsOfUser(userId, page, perPage, time, timeFrom, timeTo);
            //Assert.IsInstanceOf<SignInsResponse> (response, "response is SignInsResponse");
        }
        /// <summary>
        /// Test GetSpecificationsOfUser
        /// </summary>
        [Test]
        public void GetSpecificationsOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //string key = null;
            //var response = instance.GetSpecificationsOfUser(userId, key);
            //Assert.IsInstanceOf<SpecificationsResponse> (response, "response is SpecificationsResponse");
        }
        /// <summary>
        /// Test GetTechnicalUsers
        /// </summary>
        [Test]
        public void GetTechnicalUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string email = null;
            //string orderBy = null;
            //var response = instance.GetTechnicalUsers(page, perPage, include, email, orderBy);
            //Assert.IsInstanceOf<TechnicalUsersResponse> (response, "response is TechnicalUsersResponse");
        }
        /// <summary>
        /// Test GetUsageOfUser
        /// </summary>
        [Test]
        public void GetUsageOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //var response = instance.GetUsageOfUser(userId);
            //Assert.IsInstanceOf<UsageResponse> (response, "response is UsageResponse");
        }
        /// <summary>
        /// Test GetUserById
        /// </summary>
        [Test]
        public void GetUserByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //var response = instance.GetUserById(id, include);
            //Assert.IsInstanceOf<UserResponse> (response, "response is UserResponse");
        }
        /// <summary>
        /// Test GetUserGroupsOfUser
        /// </summary>
        [Test]
        public void GetUserGroupsOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string orderBy = null;
            //var response = instance.GetUserGroupsOfUser(userId, page, perPage, name, orderBy);
            //Assert.IsInstanceOf<UserGroupsWithUsers> (response, "response is UserGroupsWithUsers");
        }
        /// <summary>
        /// Test GetUserRolesOfUser
        /// </summary>
        [Test]
        public void GetUserRolesOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? userId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string orderBy = null;
            //var response = instance.GetUserRolesOfUser(userId, page, perPage, name, orderBy);
            //Assert.IsInstanceOf<UserRolesResponse> (response, "response is UserRolesResponse");
        }
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string email = null;
            //string firstName = null;
            //string lastName = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //DateTime? createdAt = null;
            //string createdAtFrom = null;
            //string createdAtTo = null;
            //DateTime? updatedAt = null;
            //string updatedAtFrom = null;
            //string updatedAtTo = null;
            //string orderBy = null;
            //var response = instance.GetUsers(page, perPage, include, email, firstName, lastName, specificationsKey, specificationsValue, createdAt, createdAtFrom, createdAtTo, updatedAt, updatedAtFrom, updatedAtTo, orderBy);
            //Assert.IsInstanceOf<UsersResponse> (response, "response is UsersResponse");
        }
        /// <summary>
        /// Test LookupUser
        /// </summary>
        [Test]
        public void LookupUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.LookupUser(email);
            //Assert.IsInstanceOf<UserPublicResponse> (response, "response is UserPublicResponse");
        }
        /// <summary>
        /// Test RemoveSpecificationsFromUsers
        /// </summary>
        [Test]
        public void RemoveSpecificationsFromUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //long? userId = null;
            //instance.RemoveSpecificationsFromUsers(body, userId);
            
        }
        /// <summary>
        /// Test RemoveUserGroupFromUser
        /// </summary>
        [Test]
        public void RemoveUserGroupFromUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserGroupIDs body = null;
            //long? userId = null;
            //instance.RemoveUserGroupFromUser(body, userId);
            
        }
        /// <summary>
        /// Test RemoveUserRolesFromUser
        /// </summary>
        [Test]
        public void RemoveUserRolesFromUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserRoleIDs body = null;
            //long? userId = null;
            //instance.RemoveUserRolesFromUser(body, userId);
            
        }
        /// <summary>
        /// Test RenameSpecificationsOfUsers
        /// </summary>
        [Test]
        public void RenameSpecificationsOfUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SpecificationsRename body = null;
            //long? userId = null;
            //instance.RenameSpecificationsOfUsers(body, userId);
            
        }
        /// <summary>
        /// Test ReplaceUserGroupsOfUser
        /// </summary>
        [Test]
        public void ReplaceUserGroupsOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserGroupIDs body = null;
            //long? userId = null;
            //instance.ReplaceUserGroupsOfUser(body, userId);
            
        }
        /// <summary>
        /// Test ReplaceUserRolesOfUser
        /// </summary>
        [Test]
        public void ReplaceUserRolesOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserRoleIDs body = null;
            //long? userId = null;
            //instance.ReplaceUserRolesOfUser(body, userId);
            
        }
        /// <summary>
        /// Test ResetPasswordTechnicalUser
        /// </summary>
        [Test]
        public void ResetPasswordTechnicalUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.ResetPasswordTechnicalUser(id);
            //Assert.IsInstanceOf<TechnicalUserPasswordResponse> (response, "response is TechnicalUserPasswordResponse");
        }
        /// <summary>
        /// Test SetCurrentUserDemoData
        /// </summary>
        [Test]
        public void SetCurrentUserDemoDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.SetCurrentUserDemoData();
            
        }
        /// <summary>
        /// Test UpdateSpecificationsOfUsers
        /// </summary>
        [Test]
        public void UpdateSpecificationsOfUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, SpecificationRequest> body = null;
            //long? userId = null;
            //instance.UpdateSpecificationsOfUsers(body, userId);
            
        }
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserChangeRequest body = null;
            //long? id = null;
            //instance.UpdateUser(body, id);
            
        }
    }

}
