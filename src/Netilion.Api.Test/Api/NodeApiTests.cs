/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing NodeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class NodeApiTests
    {
        private NodeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new NodeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of NodeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' NodeApi
            //Assert.IsInstanceOfType(typeof(NodeApi), instance, "instance is a NodeApi");
        }

        /// <summary>
        /// Test AddAssetsToNode
        /// </summary>
        [Test]
        public void AddAssetsToNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetIDs body = null;
            //long? nodeId = null;
            //instance.AddAssetsToNode(body, nodeId);
            
        }
        /// <summary>
        /// Test AddDocumentsToNode
        /// </summary>
        [Test]
        public void AddDocumentsToNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? nodeId = null;
            //instance.AddDocumentsToNode(body, nodeId);
            
        }
        /// <summary>
        /// Test AddInstrumentationsToNode
        /// </summary>
        [Test]
        public void AddInstrumentationsToNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InstrumentationIDs body = null;
            //long? nodeId = null;
            //instance.AddInstrumentationsToNode(body, nodeId);
            
        }
        /// <summary>
        /// Test AddNodePictureLink
        /// </summary>
        [Test]
        public void AddNodePictureLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PictureLinkRequest body = null;
            //long? id = null;
            //var response = instance.AddNodePictureLink(body, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test AddRecipesToNode
        /// </summary>
        [Test]
        public void AddRecipesToNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecipeIDs body = null;
            //long? nodeId = null;
            //instance.AddRecipesToNode(body, nodeId);
            
        }
        /// <summary>
        /// Test AddSystemsToNode
        /// </summary>
        [Test]
        public void AddSystemsToNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SystemIDs body = null;
            //long? nodeId = null;
            //instance.AddSystemsToNode(body, nodeId);
            
        }
        /// <summary>
        /// Test CreateNodes
        /// </summary>
        [Test]
        public void CreateNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NodeRequest body = null;
            //var response = instance.CreateNodes(body);
            //Assert.IsInstanceOf<NodeResponse> (response, "response is NodeResponse");
        }
        /// <summary>
        /// Test DeleteNode
        /// </summary>
        [Test]
        public void DeleteNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteNode(id);
            
        }
        /// <summary>
        /// Test DeleteNodePicture
        /// </summary>
        [Test]
        public void DeleteNodePictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? nodeId = null;
            //long? id = null;
            //instance.DeleteNodePicture(nodeId, id);
            
        }
        /// <summary>
        /// Test DownloadNodePicture
        /// </summary>
        [Test]
        public void DownloadNodePictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? nodeId = null;
            //long? id = null;
            //instance.DownloadNodePicture(nodeId, id);
            
        }
        /// <summary>
        /// Test GetAssetsOfNode
        /// </summary>
        [Test]
        public void GetAssetsOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? nodeId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string serialNumber = null;
            //string productId = null;
            //string productCategoryId = null;
            //string parentId = null;
            //string manufacturerId = null;
            //string statusId = null;
            //string statusCode = null;
            //DateTime? productionDate = null;
            //DateTime? productionDateFrom = null;
            //DateTime? productionDateTo = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //DateTime? createdAt = null;
            //string createdAtFrom = null;
            //string createdAtTo = null;
            //DateTime? updatedAt = null;
            //string updatedAtFrom = null;
            //string updatedAtTo = null;
            //bool? ownershipClaimed = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetAssetsOfNode(nodeId, page, perPage, include, serialNumber, productId, productCategoryId, parentId, manufacturerId, statusId, statusCode, productionDate, productionDateFrom, productionDateTo, specificationsKey, specificationsValue, createdAt, createdAtFrom, createdAtTo, updatedAt, updatedAtFrom, updatedAtTo, ownershipClaimed, permission, orderBy);
            //Assert.IsInstanceOf<AssetsResponse> (response, "response is AssetsResponse");
        }
        /// <summary>
        /// Test GetDocumentsOfNode
        /// </summary>
        [Test]
        public void GetDocumentsOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? nodeId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string documentVersion = null;
            //string number = null;
            //string statusId = null;
            //string classificationId = null;
            //string tenantId = null;
            //string categoryId = null;
            //DateTime? validFrom = null;
            //DateTime? validUntil = null;
            //DateTime? validAt = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentsOfNode(nodeId, page, perPage, include, name, documentVersion, number, statusId, classificationId, tenantId, categoryId, validFrom, validUntil, validAt, acceptLanguage);
            //Assert.IsInstanceOf<DocumentsResponse> (response, "response is DocumentsResponse");
        }
        /// <summary>
        /// Test GetInstrumentationsOfNode
        /// </summary>
        [Test]
        public void GetInstrumentationsOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? nodeId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string tag = null;
            //string statusId = null;
            //string typeId = null;
            //string parentId = null;
            //string tenantId = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string criticality = null;
            //string accessibility = null;
            //string assetStatusId = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetInstrumentationsOfNode(nodeId, page, perPage, include, tag, statusId, typeId, parentId, tenantId, specificationsKey, specificationsValue, criticality, accessibility, assetStatusId, permission, orderBy);
            //Assert.IsInstanceOf<InstrumentationsResponse> (response, "response is InstrumentationsResponse");
        }
        /// <summary>
        /// Test GetNodeIdType
        /// </summary>
        [Test]
        public void GetNodeIdTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? nodeId = null;
            //string include = null;
            //string acceptLanguage = null;
            //var response = instance.GetNodeIdType(nodeId, include, acceptLanguage);
            //Assert.IsInstanceOf<NodeTypeResponse> (response, "response is NodeTypeResponse");
        }
        /// <summary>
        /// Test GetNodePicture
        /// </summary>
        [Test]
        public void GetNodePictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? nodeId = null;
            //long? id = null;
            //var response = instance.GetNodePicture(nodeId, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test GetNodePictures
        /// </summary>
        [Test]
        public void GetNodePicturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //int? width = null;
            //int? widthFrom = null;
            //int? widthTo = null;
            //int? height = null;
            //int? heightFrom = null;
            //int? heightTo = null;
            //var response = instance.GetNodePictures(id, width, widthFrom, widthTo, height, heightFrom, heightTo);
            //Assert.IsInstanceOf<PicturesResponse> (response, "response is PicturesResponse");
        }
        /// <summary>
        /// Test GetNodeTypesOptions
        /// </summary>
        [Test]
        public void GetNodeTypesOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? nodeId = null;
            //int? page = null;
            //int? perPage = null;
            //string tenantId = null;
            //string name = null;
            //string code = null;
            //string acceptLanguage = null;
            //var response = instance.GetNodeTypesOptions(nodeId, page, perPage, tenantId, name, code, acceptLanguage);
            //Assert.IsInstanceOf<NodeTypes> (response, "response is NodeTypes");
        }
        /// <summary>
        /// Test GetNodes
        /// </summary>
        [Test]
        public void GetNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string typeId = null;
            //string parentId = null;
            //string tenantId = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetNodes(page, perPage, include, name, typeId, parentId, tenantId, permission, orderBy);
            //Assert.IsInstanceOf<NodesResponse> (response, "response is NodesResponse");
        }
        /// <summary>
        /// Test GetNodesById
        /// </summary>
        [Test]
        public void GetNodesByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //var response = instance.GetNodesById(id, include);
            //Assert.IsInstanceOf<NodeResponse> (response, "response is NodeResponse");
        }
        /// <summary>
        /// Test GetRecipesOfNode
        /// </summary>
        [Test]
        public void GetRecipesOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? nodeId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string statusId = null;
            //string typeId = null;
            //string tenantId = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string orderBy = null;
            //var response = instance.GetRecipesOfNode(nodeId, page, perPage, include, name, statusId, typeId, tenantId, specificationsKey, specificationsValue, orderBy);
            //Assert.IsInstanceOf<RecipesResponse> (response, "response is RecipesResponse");
        }
        /// <summary>
        /// Test GetSpecificationKeysOfNodes
        /// </summary>
        [Test]
        public void GetSpecificationKeysOfNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //bool? uiVisible = null;
            //var response = instance.GetSpecificationKeysOfNodes(key, uiVisible);
            //Assert.IsInstanceOf<SpecificationKeys> (response, "response is SpecificationKeys");
        }
        /// <summary>
        /// Test GetSpecificationsOfNode
        /// </summary>
        [Test]
        public void GetSpecificationsOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? nodeId = null;
            //string key = null;
            //bool? uiVisible = null;
            //var response = instance.GetSpecificationsOfNode(nodeId, key, uiVisible);
            //Assert.IsInstanceOf<SpecificationsUIVisibleResponse> (response, "response is SpecificationsUIVisibleResponse");
        }
        /// <summary>
        /// Test GetSystemsOfNode
        /// </summary>
        [Test]
        public void GetSystemsOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? nodeId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string statusId = null;
            //string typeId = null;
            //string tenantId = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetSystemsOfNode(nodeId, page, perPage, include, name, statusId, typeId, tenantId, specificationsKey, specificationsValue, permission, orderBy);
            //Assert.IsInstanceOf<SystemsResponse> (response, "response is SystemsResponse");
        }
        /// <summary>
        /// Test RemoveAssetsFromNode
        /// </summary>
        [Test]
        public void RemoveAssetsFromNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetIDs body = null;
            //long? nodeId = null;
            //instance.RemoveAssetsFromNode(body, nodeId);
            
        }
        /// <summary>
        /// Test RemoveDocumentsFromNode
        /// </summary>
        [Test]
        public void RemoveDocumentsFromNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? nodeId = null;
            //instance.RemoveDocumentsFromNode(body, nodeId);
            
        }
        /// <summary>
        /// Test RemoveInstrumentationsFromNode
        /// </summary>
        [Test]
        public void RemoveInstrumentationsFromNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InstrumentationIDs body = null;
            //long? nodeId = null;
            //instance.RemoveInstrumentationsFromNode(body, nodeId);
            
        }
        /// <summary>
        /// Test RemoveRecipesFromNode
        /// </summary>
        [Test]
        public void RemoveRecipesFromNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecipeIDs body = null;
            //long? nodeId = null;
            //instance.RemoveRecipesFromNode(body, nodeId);
            
        }
        /// <summary>
        /// Test RemoveSpecificationsFromNode
        /// </summary>
        [Test]
        public void RemoveSpecificationsFromNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //long? nodeId = null;
            //instance.RemoveSpecificationsFromNode(body, nodeId);
            
        }
        /// <summary>
        /// Test RemoveSystemsFromNode
        /// </summary>
        [Test]
        public void RemoveSystemsFromNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SystemIDs body = null;
            //long? nodeId = null;
            //instance.RemoveSystemsFromNode(body, nodeId);
            
        }
        /// <summary>
        /// Test RenameSpecificationsOfNode
        /// </summary>
        [Test]
        public void RenameSpecificationsOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SpecificationsRename body = null;
            //long? nodeId = null;
            //instance.RenameSpecificationsOfNode(body, nodeId);
            
        }
        /// <summary>
        /// Test ReplaceAssetsOfNode
        /// </summary>
        [Test]
        public void ReplaceAssetsOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetIDs body = null;
            //long? nodeId = null;
            //instance.ReplaceAssetsOfNode(body, nodeId);
            
        }
        /// <summary>
        /// Test ReplaceDocumentsOfNode
        /// </summary>
        [Test]
        public void ReplaceDocumentsOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? nodeId = null;
            //instance.ReplaceDocumentsOfNode(body, nodeId);
            
        }
        /// <summary>
        /// Test ReplaceInstrumentationsOfNode
        /// </summary>
        [Test]
        public void ReplaceInstrumentationsOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InstrumentationIDs body = null;
            //long? nodeId = null;
            //instance.ReplaceInstrumentationsOfNode(body, nodeId);
            
        }
        /// <summary>
        /// Test ReplaceRecipesOfNode
        /// </summary>
        [Test]
        public void ReplaceRecipesOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecipeIDs body = null;
            //long? nodeId = null;
            //instance.ReplaceRecipesOfNode(body, nodeId);
            
        }
        /// <summary>
        /// Test ReplaceSystemsOfNode
        /// </summary>
        [Test]
        public void ReplaceSystemsOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SystemIDs body = null;
            //long? nodeId = null;
            //instance.ReplaceSystemsOfNode(body, nodeId);
            
        }
        /// <summary>
        /// Test UpdateNode
        /// </summary>
        [Test]
        public void UpdateNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NodeRequest body = null;
            //long? id = null;
            //instance.UpdateNode(body, id);
            
        }
        /// <summary>
        /// Test UpdateNodePicture
        /// </summary>
        [Test]
        public void UpdateNodePictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] image = null;
            //long? nodeId = null;
            //long? id = null;
            //var response = instance.UpdateNodePicture(image, nodeId, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test UpdateNodePictureLink
        /// </summary>
        [Test]
        public void UpdateNodePictureLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PictureLinkRequest body = null;
            //long? nodeId = null;
            //long? id = null;
            //var response = instance.UpdateNodePictureLink(body, nodeId, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test UpdateSpecificationsOfNode
        /// </summary>
        [Test]
        public void UpdateSpecificationsOfNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, SpecificationUIVisibleRequest> body = null;
            //long? nodeId = null;
            //instance.UpdateSpecificationsOfNode(body, nodeId);
            
        }
        /// <summary>
        /// Test UploadNodePicture
        /// </summary>
        [Test]
        public void UploadNodePictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] image = null;
            //long? id = null;
            //var response = instance.UploadNodePicture(image, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
    }

}
