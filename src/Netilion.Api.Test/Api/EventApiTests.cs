/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing EventApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EventApiTests
    {
        private EventApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EventApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EventApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EventApi
            //Assert.IsInstanceOfType(typeof(EventApi), instance, "instance is a EventApi");
        }

        /// <summary>
        /// Test AddDocumentsToEvent
        /// </summary>
        [Test]
        public void AddDocumentsToEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? eventId = null;
            //instance.AddDocumentsToEvent(body, eventId);
            
        }
        /// <summary>
        /// Test CreateEvent
        /// </summary>
        [Test]
        public void CreateEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EventRequest body = null;
            //var response = instance.CreateEvent(body);
            //Assert.IsInstanceOf<EventResponse> (response, "response is EventResponse");
        }
        /// <summary>
        /// Test CreateEventForAsset
        /// </summary>
        [Test]
        public void CreateEventForAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EventRequestNoAssets body = null;
            //long? assetId = null;
            //var response = instance.CreateEventForAsset(body, assetId);
            //Assert.IsInstanceOf<EventResponse> (response, "response is EventResponse");
        }
        /// <summary>
        /// Test CreateEventForInstrumentation
        /// </summary>
        [Test]
        public void CreateEventForInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EventRequestNoInstrumentations body = null;
            //long? instrumentationId = null;
            //var response = instance.CreateEventForInstrumentation(body, instrumentationId);
            //Assert.IsInstanceOf<EventResponse> (response, "response is EventResponse");
        }
        /// <summary>
        /// Test DeleteEvent
        /// </summary>
        [Test]
        public void DeleteEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteEvent(id);
            
        }
        /// <summary>
        /// Test GetAssetsOfEvent
        /// </summary>
        [Test]
        public void GetAssetsOfEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? eventId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string serialNumber = null;
            //string productId = null;
            //string productCategoryId = null;
            //string parentId = null;
            //string manufacturerId = null;
            //string statusId = null;
            //string statusCode = null;
            //DateTime? productionDate = null;
            //DateTime? productionDateFrom = null;
            //DateTime? productionDateTo = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //DateTime? createdAt = null;
            //string createdAtFrom = null;
            //string createdAtTo = null;
            //DateTime? updatedAt = null;
            //string updatedAtFrom = null;
            //string updatedAtTo = null;
            //bool? ownershipClaimed = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetAssetsOfEvent(eventId, page, perPage, include, serialNumber, productId, productCategoryId, parentId, manufacturerId, statusId, statusCode, productionDate, productionDateFrom, productionDateTo, specificationsKey, specificationsValue, createdAt, createdAtFrom, createdAtTo, updatedAt, updatedAtFrom, updatedAtTo, ownershipClaimed, permission, orderBy);
            //Assert.IsInstanceOf<AssetsResponse> (response, "response is AssetsResponse");
        }
        /// <summary>
        /// Test GetDocumentsOfEvent
        /// </summary>
        [Test]
        public void GetDocumentsOfEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? eventId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string statusId = null;
            //string classificationId = null;
            //string documentVersion = null;
            //string number = null;
            //string tenantId = null;
            //string categoryId = null;
            //DateTime? validFrom = null;
            //DateTime? validUntil = null;
            //DateTime? validAt = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentsOfEvent(eventId, page, perPage, include, name, statusId, classificationId, documentVersion, number, tenantId, categoryId, validFrom, validUntil, validAt, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentsResponse> (response, "response is DocumentsResponse");
        }
        /// <summary>
        /// Test GetEventById
        /// </summary>
        [Test]
        public void GetEventByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //var response = instance.GetEventById(id, include);
            //Assert.IsInstanceOf<EventResponse> (response, "response is EventResponse");
        }
        /// <summary>
        /// Test GetEventIdStatus
        /// </summary>
        [Test]
        public void GetEventIdStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? eventId = null;
            //string acceptLanguage = null;
            //var response = instance.GetEventIdStatus(eventId, acceptLanguage);
            //Assert.IsInstanceOf<EventStatusResponse> (response, "response is EventStatusResponse");
        }
        /// <summary>
        /// Test GetEventIdType
        /// </summary>
        [Test]
        public void GetEventIdTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? eventId = null;
            //string acceptLanguage = null;
            //var response = instance.GetEventIdType(eventId, acceptLanguage);
            //Assert.IsInstanceOf<EventTypeResponse> (response, "response is EventTypeResponse");
        }
        /// <summary>
        /// Test GetEventStatusesOptions
        /// </summary>
        [Test]
        public void GetEventStatusesOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? eventId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string code = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetEventStatusesOptions(eventId, page, perPage, name, code, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<EventStatuses> (response, "response is EventStatuses");
        }
        /// <summary>
        /// Test GetEventTypeesOptions
        /// </summary>
        [Test]
        public void GetEventTypeesOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? eventId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string code = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetEventTypeesOptions(eventId, page, perPage, name, code, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<EventTypes> (response, "response is EventTypes");
        }
        /// <summary>
        /// Test GetEvents
        /// </summary>
        [Test]
        public void GetEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string typeId = null;
            //string statusId = null;
            //string startDatetime = null;
            //string startDatetimeFrom = null;
            //string startDatetimeTo = null;
            //string endDatetime = null;
            //DateTime? endDatetimeFrom = null;
            //string endDatetimeTo = null;
            //string tenantId = null;
            //string orderBy = null;
            //var response = instance.GetEvents(page, perPage, include, name, typeId, statusId, startDatetime, startDatetimeFrom, startDatetimeTo, endDatetime, endDatetimeFrom, endDatetimeTo, tenantId, orderBy);
            //Assert.IsInstanceOf<EventsResponse> (response, "response is EventsResponse");
        }
        /// <summary>
        /// Test GetEventsOfAsset
        /// </summary>
        [Test]
        public void GetEventsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string typeId = null;
            //string statusId = null;
            //string startDatetime = null;
            //string startDatetimeFrom = null;
            //string startDatetimeTo = null;
            //string endDatetime = null;
            //DateTime? endDatetimeFrom = null;
            //string endDatetimeTo = null;
            //string tenantId = null;
            //string orderBy = null;
            //var response = instance.GetEventsOfAsset(assetId, page, perPage, include, name, typeId, statusId, startDatetime, startDatetimeFrom, startDatetimeTo, endDatetime, endDatetimeFrom, endDatetimeTo, tenantId, orderBy);
            //Assert.IsInstanceOf<EventsResponse> (response, "response is EventsResponse");
        }
        /// <summary>
        /// Test GetEventsOfInstrumentation
        /// </summary>
        [Test]
        public void GetEventsOfInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? instrumentationId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string typeId = null;
            //string statusId = null;
            //string startDatetime = null;
            //string startDatetimeFrom = null;
            //string startDatetimeTo = null;
            //string endDatetime = null;
            //DateTime? endDatetimeFrom = null;
            //string endDatetimeTo = null;
            //string tenantId = null;
            //string orderBy = null;
            //var response = instance.GetEventsOfInstrumentation(instrumentationId, page, perPage, include, name, typeId, statusId, startDatetime, startDatetimeFrom, startDatetimeTo, endDatetime, endDatetimeFrom, endDatetimeTo, tenantId, orderBy);
            //Assert.IsInstanceOf<EventsResponse> (response, "response is EventsResponse");
        }
        /// <summary>
        /// Test GetInstrumentationsOfEvent
        /// </summary>
        [Test]
        public void GetInstrumentationsOfEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? eventId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string tag = null;
            //string statusId = null;
            //string typeId = null;
            //string parentId = null;
            //string tenantId = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string criticality = null;
            //string accessibility = null;
            //string nodeId = null;
            //string assetStatusId = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetInstrumentationsOfEvent(eventId, page, perPage, include, tag, statusId, typeId, parentId, tenantId, specificationsKey, specificationsValue, criticality, accessibility, nodeId, assetStatusId, permission, orderBy);
            //Assert.IsInstanceOf<InstrumentationsResponse> (response, "response is InstrumentationsResponse");
        }
        /// <summary>
        /// Test GetSpecificationsOfEvent
        /// </summary>
        [Test]
        public void GetSpecificationsOfEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? eventId = null;
            //string key = null;
            //var response = instance.GetSpecificationsOfEvent(eventId, key);
            //Assert.IsInstanceOf<SpecificationsResponse> (response, "response is SpecificationsResponse");
        }
        /// <summary>
        /// Test RemoveAssetsFromEvent
        /// </summary>
        [Test]
        public void RemoveAssetsFromEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetIDs body = null;
            //long? eventId = null;
            //instance.RemoveAssetsFromEvent(body, eventId);
            
        }
        /// <summary>
        /// Test RemoveDocumentsFromEvent
        /// </summary>
        [Test]
        public void RemoveDocumentsFromEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? eventId = null;
            //instance.RemoveDocumentsFromEvent(body, eventId);
            
        }
        /// <summary>
        /// Test RemoveEventFromAsset
        /// </summary>
        [Test]
        public void RemoveEventFromAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Events body = null;
            //long? assetId = null;
            //instance.RemoveEventFromAsset(body, assetId);
            
        }
        /// <summary>
        /// Test RemoveEventFromInstrumentation
        /// </summary>
        [Test]
        public void RemoveEventFromInstrumentationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Events1 body = null;
            //long? instrumentationId = null;
            //instance.RemoveEventFromInstrumentation(body, instrumentationId);
            
        }
        /// <summary>
        /// Test RemoveInstrumentationsFromEvent
        /// </summary>
        [Test]
        public void RemoveInstrumentationsFromEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InstrumentationIDs body = null;
            //long? eventId = null;
            //instance.RemoveInstrumentationsFromEvent(body, eventId);
            
        }
        /// <summary>
        /// Test RemoveSpecificationsFromEvent
        /// </summary>
        [Test]
        public void RemoveSpecificationsFromEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //long? eventId = null;
            //instance.RemoveSpecificationsFromEvent(body, eventId);
            
        }
        /// <summary>
        /// Test RenameSpecificationsOfEvent
        /// </summary>
        [Test]
        public void RenameSpecificationsOfEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SpecificationsRename body = null;
            //long? eventId = null;
            //instance.RenameSpecificationsOfEvent(body, eventId);
            
        }
        /// <summary>
        /// Test ReplaceDocumentsOfEvent
        /// </summary>
        [Test]
        public void ReplaceDocumentsOfEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? eventId = null;
            //instance.ReplaceDocumentsOfEvent(body, eventId);
            
        }
        /// <summary>
        /// Test UpdateEvent
        /// </summary>
        [Test]
        public void UpdateEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EventRequest body = null;
            //long? id = null;
            //instance.UpdateEvent(body, id);
            
        }
        /// <summary>
        /// Test UpdateSpecificationsOfEvent
        /// </summary>
        [Test]
        public void UpdateSpecificationsOfEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, SpecificationRequest> body = null;
            //long? eventId = null;
            //instance.UpdateSpecificationsOfEvent(body, eventId);
            
        }
    }

}
