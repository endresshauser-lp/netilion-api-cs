/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing AssetApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AssetApiTests
    {
        private AssetApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AssetApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AssetApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AssetApi
            //Assert.IsInstanceOfType(typeof(AssetApi), instance, "instance is a AssetApi");
        }

        /// <summary>
        /// Test AddAddOnsToAsset
        /// </summary>
        [Test]
        public void AddAddOnsToAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddOnIDs body = null;
            //long? assetId = null;
            //instance.AddAddOnsToAsset(body, assetId);
            
        }
        /// <summary>
        /// Test AddAssetPictureLink
        /// </summary>
        [Test]
        public void AddAssetPictureLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PictureLinkRequest body = null;
            //long? id = null;
            //var response = instance.AddAssetPictureLink(body, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test AddDeliveriesToAsset
        /// </summary>
        [Test]
        public void AddDeliveriesToAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeliveryIDs body = null;
            //long? assetId = null;
            //instance.AddDeliveriesToAsset(body, assetId);
            
        }
        /// <summary>
        /// Test AddDocumentsToAsset
        /// </summary>
        [Test]
        public void AddDocumentsToAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? assetId = null;
            //instance.AddDocumentsToAsset(body, assetId);
            
        }
        /// <summary>
        /// Test AddInstrumentationsToAsset
        /// </summary>
        [Test]
        public void AddInstrumentationsToAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InstrumentationIDs body = null;
            //long? assetId = null;
            //instance.AddInstrumentationsToAsset(body, assetId);
            
        }
        /// <summary>
        /// Test AddNodesToAsset
        /// </summary>
        [Test]
        public void AddNodesToAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NodeIDs body = null;
            //long? assetId = null;
            //instance.AddNodesToAsset(body, assetId);
            
        }
        /// <summary>
        /// Test AddSoftwaresToAsset
        /// </summary>
        [Test]
        public void AddSoftwaresToAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SoftwareIDs body = null;
            //long? assetId = null;
            //instance.AddSoftwaresToAsset(body, assetId);
            
        }
        /// <summary>
        /// Test CreateAsset
        /// </summary>
        [Test]
        public void CreateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetRequest body = null;
            //var response = instance.CreateAsset(body);
            //Assert.IsInstanceOf<AssetResponse> (response, "response is AssetResponse");
        }
        /// <summary>
        /// Test CreateAssetContainer
        /// </summary>
        [Test]
        public void CreateAssetContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ContainerExportRequest body = null;
            //long? id = null;
            //var response = instance.CreateAssetContainer(body, id);
            //Assert.IsInstanceOf<DataExportsResponse> (response, "response is DataExportsResponse");
        }
        /// <summary>
        /// Test CreateAssetValueObjects
        /// </summary>
        [Test]
        public void CreateAssetValueObjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetValueObjectsRequest body = null;
            //long? assetId = null;
            //instance.CreateAssetValueObjects(body, assetId);
            
        }
        /// <summary>
        /// Test CreateAssetValues
        /// </summary>
        [Test]
        public void CreateAssetValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetValuesRequest body = null;
            //long? assetId = null;
            //instance.CreateAssetValues(body, assetId);
            
        }
        /// <summary>
        /// Test CreateEventForAsset
        /// </summary>
        [Test]
        public void CreateEventForAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EventRequestNoAssets body = null;
            //long? assetId = null;
            //var response = instance.CreateEventForAsset(body, assetId);
            //Assert.IsInstanceOf<EventResponse> (response, "response is EventResponse");
        }
        /// <summary>
        /// Test DeleteAsset
        /// </summary>
        [Test]
        public void DeleteAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteAsset(id);
            
        }
        /// <summary>
        /// Test DeleteAssetPicture
        /// </summary>
        [Test]
        public void DeleteAssetPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //long? id = null;
            //instance.DeleteAssetPicture(assetId, id);
            
        }
        /// <summary>
        /// Test DeleteSpecificationsOfAsset
        /// </summary>
        [Test]
        public void DeleteSpecificationsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //long? assetId = null;
            //instance.DeleteSpecificationsOfAsset(body, assetId);
            
        }
        /// <summary>
        /// Test DownloadAssetPicture
        /// </summary>
        [Test]
        public void DownloadAssetPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //long? id = null;
            //instance.DownloadAssetPicture(assetId, id);
            
        }
        /// <summary>
        /// Test GetAddOnsOfAsset
        /// </summary>
        [Test]
        public void GetAddOnsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string productCode = null;
            //string materialNumber = null;
            //string addOnType = null;
            //string orderBy = null;
            //var response = instance.GetAddOnsOfAsset(assetId, page, perPage, name, productCode, materialNumber, addOnType, orderBy);
            //Assert.IsInstanceOf<AddOnsResponse> (response, "response is AddOnsResponse");
        }
        /// <summary>
        /// Test GetApiSubscriptionsOfAsset
        /// </summary>
        [Test]
        public void GetApiSubscriptionsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //long? userId = null;
            //long? clientApplicationId = null;
            //string externalReference = null;
            //string status = null;
            //string notificationStatus = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string orderBy = null;
            //var response = instance.GetApiSubscriptionsOfAsset(assetId, page, perPage, include, userId, clientApplicationId, externalReference, status, notificationStatus, specificationsKey, specificationsValue, startDate, endDate, orderBy);
            //Assert.IsInstanceOf<APISubscriptionResponse> (response, "response is APISubscriptionResponse");
        }
        /// <summary>
        /// Test GetAssetById
        /// </summary>
        [Test]
        public void GetAssetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //var response = instance.GetAssetById(id, include);
            //Assert.IsInstanceOf<AssetResponse> (response, "response is AssetResponse");
        }
        /// <summary>
        /// Test GetAssetCompanyOptions
        /// </summary>
        [Test]
        public void GetAssetCompanyOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string tenantId = null;
            //string orderBy = null;
            //var response = instance.GetAssetCompanyOptions(assetId, page, perPage, include, name, tenantId, orderBy);
            //Assert.IsInstanceOf<Companies> (response, "response is Companies");
        }
        /// <summary>
        /// Test GetAssetHistory
        /// </summary>
        [Test]
        public void GetAssetHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //string attribute = null;
            //DateTime? from = null;
            //DateTime? to = null;
            //string orderBy = null;
            //var response = instance.GetAssetHistory(assetId, attribute, from, to, orderBy);
            //Assert.IsInstanceOf<AssetHistoryResponse> (response, "response is AssetHistoryResponse");
        }
        /// <summary>
        /// Test GetAssetIdStatus
        /// </summary>
        [Test]
        public void GetAssetIdStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //string include = null;
            //string acceptLanguage = null;
            //var response = instance.GetAssetIdStatus(assetId, include, acceptLanguage);
            //Assert.IsInstanceOf<AssetStatusResponse> (response, "response is AssetStatusResponse");
        }
        /// <summary>
        /// Test GetAssetPicture
        /// </summary>
        [Test]
        public void GetAssetPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //long? id = null;
            //var response = instance.GetAssetPicture(assetId, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test GetAssetPictures
        /// </summary>
        [Test]
        public void GetAssetPicturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //int? width = null;
            //int? widthFrom = null;
            //int? widthTo = null;
            //int? height = null;
            //int? heightFrom = null;
            //int? heightTo = null;
            //string orderBy = null;
            //var response = instance.GetAssetPictures(id, width, widthFrom, widthTo, height, heightFrom, heightTo, orderBy);
            //Assert.IsInstanceOf<PicturesResponse> (response, "response is PicturesResponse");
        }
        /// <summary>
        /// Test GetAssetProductOptions
        /// </summary>
        [Test]
        public void GetAssetProductOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string productCode = null;
            //string name = null;
            //string manufacturerId = null;
            //string statusId = null;
            //string categoryId = null;
            //string parentId = null;
            //string tenantId = null;
            //string orderBy = null;
            //var response = instance.GetAssetProductOptions(assetId, page, perPage, include, productCode, name, manufacturerId, statusId, categoryId, parentId, tenantId, orderBy);
            //Assert.IsInstanceOf<Products> (response, "response is Products");
        }
        /// <summary>
        /// Test GetAssetStatusesOptions
        /// </summary>
        [Test]
        public void GetAssetStatusesOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string tenantId = null;
            //string code = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetAssetStatusesOptions(assetId, page, perPage, include, name, tenantId, code, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<AssetStatuses> (response, "response is AssetStatuses");
        }
        /// <summary>
        /// Test GetAssetTenantOptions
        /// </summary>
        [Test]
        public void GetAssetTenantOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string orderBy = null;
            //var response = instance.GetAssetTenantOptions(assetId, page, perPage, name, orderBy);
            //Assert.IsInstanceOf<Tenants> (response, "response is Tenants");
        }
        /// <summary>
        /// Test GetAssetValueObjectsForKey
        /// </summary>
        [Test]
        public void GetAssetValueObjectsForKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //string key = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //DateTime? from = null;
            //DateTime? to = null;
            //DateTime? datetime = null;
            //string selector = null;
            //string interval = null;
            //string orderBy = null;
            //var response = instance.GetAssetValueObjectsForKey(assetId, key, page, perPage, include, from, to, datetime, selector, interval, orderBy);
            //Assert.IsInstanceOf<AssetKeyValueObjectsResponse> (response, "response is AssetKeyValueObjectsResponse");
        }
        /// <summary>
        /// Test GetAssetValues
        /// </summary>
        [Test]
        public void GetAssetValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //bool? usePreferredUnits = null;
            //string key = null;
            //string keyUnitId = null;
            //string group = null;
            //var response = instance.GetAssetValues(assetId, page, perPage, include, usePreferredUnits, key, keyUnitId, group);
            //Assert.IsInstanceOf<AssetValuesResponse> (response, "response is AssetValuesResponse");
        }
        /// <summary>
        /// Test GetAssetValuesForKey
        /// </summary>
        [Test]
        public void GetAssetValuesForKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //string key = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //bool? usePreferredUnits = null;
            //DateTime? from = null;
            //DateTime? to = null;
            //int? unitId = null;
            //string aggregation = null;
            //string interval = null;
            //string orderBy = null;
            //var response = instance.GetAssetValuesForKey(assetId, key, page, perPage, include, usePreferredUnits, from, to, unitId, aggregation, interval, orderBy);
            //Assert.IsInstanceOf<AssetKeyValuesResponse> (response, "response is AssetKeyValuesResponse");
        }
        /// <summary>
        /// Test GetAssets
        /// </summary>
        [Test]
        public void GetAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string serialNumber = null;
            //string productId = null;
            //string productStatusId = null;
            //string productCategoryId = null;
            //string parentId = null;
            //string manufacturerId = null;
            //string statusId = null;
            //string statusCode = null;
            //string tenantId = null;
            //string lastSeenAtFrom = null;
            //string lastSeenAtTo = null;
            //DateTime? productionDate = null;
            //DateTime? productionDateFrom = null;
            //DateTime? productionDateTo = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string nodeId = null;
            //string instrumentationId = null;
            //string systemId = null;
            //DateTime? createdAt = null;
            //string createdAtFrom = null;
            //string createdAtTo = null;
            //DateTime? updatedAt = null;
            //string updatedAtFrom = null;
            //string updatedAtTo = null;
            //bool? ownershipClaimed = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetAssets(page, perPage, include, serialNumber, productId, productStatusId, productCategoryId, parentId, manufacturerId, statusId, statusCode, tenantId, lastSeenAtFrom, lastSeenAtTo, productionDate, productionDateFrom, productionDateTo, specificationsKey, specificationsValue, nodeId, instrumentationId, systemId, createdAt, createdAtFrom, createdAtTo, updatedAt, updatedAtFrom, updatedAtTo, ownershipClaimed, permission, orderBy);
            //Assert.IsInstanceOf<AssetsResponse> (response, "response is AssetsResponse");
        }
        /// <summary>
        /// Test GetDeliveriesOfAsset
        /// </summary>
        [Test]
        public void GetDeliveriesOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string number = null;
            //string name = null;
            //string statusId = null;
            //DateTime? dateOfShipment = null;
            //DateTime? dateOfShipmentFrom = null;
            //DateTime? dateOfShipmentTo = null;
            //string senderId = null;
            //string receiverId = null;
            //string customerNumber = null;
            //string orderBy = null;
            //var response = instance.GetDeliveriesOfAsset(assetId, page, perPage, number, name, statusId, dateOfShipment, dateOfShipmentFrom, dateOfShipmentTo, senderId, receiverId, customerNumber, orderBy);
            //Assert.IsInstanceOf<DeliveriesResponse> (response, "response is DeliveriesResponse");
        }
        /// <summary>
        /// Test GetDocumentsOfAsset
        /// </summary>
        [Test]
        public void GetDocumentsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string documentVersion = null;
            //string number = null;
            //string statusId = null;
            //string classificationId = null;
            //string tenantId = null;
            //string categoryId = null;
            //DateTime? validFrom = null;
            //DateTime? validUntil = null;
            //DateTime? validAt = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentsOfAsset(assetId, page, perPage, include, name, documentVersion, number, statusId, classificationId, tenantId, categoryId, validFrom, validUntil, validAt, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentsResponse> (response, "response is DocumentsResponse");
        }
        /// <summary>
        /// Test GetEventsOfAsset
        /// </summary>
        [Test]
        public void GetEventsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string typeId = null;
            //string statusId = null;
            //string startDatetime = null;
            //string startDatetimeFrom = null;
            //string startDatetimeTo = null;
            //string endDatetime = null;
            //DateTime? endDatetimeFrom = null;
            //string endDatetimeTo = null;
            //string tenantId = null;
            //string orderBy = null;
            //var response = instance.GetEventsOfAsset(assetId, page, perPage, include, name, typeId, statusId, startDatetime, startDatetimeFrom, startDatetimeTo, endDatetime, endDatetimeFrom, endDatetimeTo, tenantId, orderBy);
            //Assert.IsInstanceOf<EventsResponse> (response, "response is EventsResponse");
        }
        /// <summary>
        /// Test GetInstrumentationsOfAsset
        /// </summary>
        [Test]
        public void GetInstrumentationsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string tag = null;
            //string statusId = null;
            //string typeId = null;
            //string parentId = null;
            //string tenantId = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string criticality = null;
            //string accessibility = null;
            //string nodeId = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetInstrumentationsOfAsset(assetId, page, perPage, include, tag, statusId, typeId, parentId, tenantId, specificationsKey, specificationsValue, criticality, accessibility, nodeId, permission, orderBy);
            //Assert.IsInstanceOf<InstrumentationsResponse> (response, "response is InstrumentationsResponse");
        }
        /// <summary>
        /// Test GetInstrumentationsOfAssetHistory
        /// </summary>
        [Test]
        public void GetInstrumentationsOfAssetHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string instrumentationId = null;
            //string _event = null;
            //DateTime? eventDatetimeFrom = null;
            //DateTime? eventDatetimeTo = null;
            //string orderBy = null;
            //var response = instance.GetInstrumentationsOfAssetHistory(assetId, page, perPage, instrumentationId, _event, eventDatetimeFrom, eventDatetimeTo, orderBy);
            //Assert.IsInstanceOf<AssetInstrumentationsHistoryResponse> (response, "response is AssetInstrumentationsHistoryResponse");
        }
        /// <summary>
        /// Test GetNodesOfAsset
        /// </summary>
        [Test]
        public void GetNodesOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string typeId = null;
            //string parentId = null;
            //string tenantId = null;
            //bool? hidden = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetNodesOfAsset(assetId, page, perPage, include, name, typeId, parentId, tenantId, hidden, permission, orderBy);
            //Assert.IsInstanceOf<NodesResponse> (response, "response is NodesResponse");
        }
        /// <summary>
        /// Test GetSoftwaresOfSoftware
        /// </summary>
        [Test]
        public void GetSoftwaresOfSoftwareTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string softwareTypeId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetSoftwaresOfSoftware(assetId, page, perPage, include, softwareTypeId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<SoftwaresResponse> (response, "response is SoftwaresResponse");
        }
        /// <summary>
        /// Test GetSpecificationHistoryOfAsset
        /// </summary>
        [Test]
        public void GetSpecificationHistoryOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //string key = null;
            //int? page = null;
            //int? perPage = null;
            //DateTime? sourceTimestampFrom = null;
            //DateTime? sourceTimestampTo = null;
            //DateTime? updatedAtFrom = null;
            //DateTime? updatedAtTo = null;
            //string orderBy = null;
            //var response = instance.GetSpecificationHistoryOfAsset(assetId, key, page, perPage, sourceTimestampFrom, sourceTimestampTo, updatedAtFrom, updatedAtTo, orderBy);
            //Assert.IsInstanceOf<SpecificationHistoryResponse> (response, "response is SpecificationHistoryResponse");
        }
        /// <summary>
        /// Test GetSpecificationKeysOfAssets
        /// </summary>
        [Test]
        public void GetSpecificationKeysOfAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //bool? uiVisible = null;
            //var response = instance.GetSpecificationKeysOfAssets(key, uiVisible);
            //Assert.IsInstanceOf<SpecificationKeys> (response, "response is SpecificationKeys");
        }
        /// <summary>
        /// Test GetSpecificationsOfAsset
        /// </summary>
        [Test]
        public void GetSpecificationsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //string key = null;
            //bool? uiVisible = null;
            //var response = instance.GetSpecificationsOfAsset(assetId, key, uiVisible);
            //Assert.IsInstanceOf<SpecificationsUIVisibleResponse> (response, "response is SpecificationsUIVisibleResponse");
        }
        /// <summary>
        /// Test GetSubscriptionsOfAsset
        /// </summary>
        [Test]
        public void GetSubscriptionsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //long? userId = null;
            //long? clientApplicationId = null;
            //string externalReference = null;
            //string status = null;
            //string notificationStatus = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string orderBy = null;
            //var response = instance.GetSubscriptionsOfAsset(assetId, page, perPage, include, userId, clientApplicationId, externalReference, status, notificationStatus, specificationsKey, specificationsValue, startDate, endDate, orderBy);
            //Assert.IsInstanceOf<SubscriptionsResponse> (response, "response is SubscriptionsResponse");
        }
        /// <summary>
        /// Test GetSystemsOfAsset
        /// </summary>
        [Test]
        public void GetSystemsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? assetId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string typeId = null;
            //string parentId = null;
            //string tenantId = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetSystemsOfAsset(assetId, page, perPage, include, name, typeId, parentId, tenantId, permission, orderBy);
            //Assert.IsInstanceOf<SystemsResponse> (response, "response is SystemsResponse");
        }
        /// <summary>
        /// Test RemoveAddOnsFromAsset
        /// </summary>
        [Test]
        public void RemoveAddOnsFromAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddOnIDs body = null;
            //long? assetId = null;
            //instance.RemoveAddOnsFromAsset(body, assetId);
            
        }
        /// <summary>
        /// Test RemoveDeliveriesFromAsset
        /// </summary>
        [Test]
        public void RemoveDeliveriesFromAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeliveryIDs body = null;
            //long? assetId = null;
            //instance.RemoveDeliveriesFromAsset(body, assetId);
            
        }
        /// <summary>
        /// Test RemoveDocumentsFromAsset
        /// </summary>
        [Test]
        public void RemoveDocumentsFromAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? assetId = null;
            //instance.RemoveDocumentsFromAsset(body, assetId);
            
        }
        /// <summary>
        /// Test RemoveEventFromAsset
        /// </summary>
        [Test]
        public void RemoveEventFromAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Events body = null;
            //long? assetId = null;
            //instance.RemoveEventFromAsset(body, assetId);
            
        }
        /// <summary>
        /// Test RemoveInstrumentationsOfAsset
        /// </summary>
        [Test]
        public void RemoveInstrumentationsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InstrumentationIDs body = null;
            //long? assetId = null;
            //instance.RemoveInstrumentationsOfAsset(body, assetId);
            
        }
        /// <summary>
        /// Test RemoveNodesFromAsset
        /// </summary>
        [Test]
        public void RemoveNodesFromAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NodeIDs body = null;
            //long? assetId = null;
            //instance.RemoveNodesFromAsset(body, assetId);
            
        }
        /// <summary>
        /// Test RemoveSoftwaresOfAsset
        /// </summary>
        [Test]
        public void RemoveSoftwaresOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SoftwareIDs body = null;
            //long? assetId = null;
            //instance.RemoveSoftwaresOfAsset(body, assetId);
            
        }
        /// <summary>
        /// Test RenameSpecificationsOfAsset
        /// </summary>
        [Test]
        public void RenameSpecificationsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SpecificationsRename body = null;
            //long? assetId = null;
            //instance.RenameSpecificationsOfAsset(body, assetId);
            
        }
        /// <summary>
        /// Test ReplaceAddOnsOfAsset
        /// </summary>
        [Test]
        public void ReplaceAddOnsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddOnIDs body = null;
            //long? assetId = null;
            //instance.ReplaceAddOnsOfAsset(body, assetId);
            
        }
        /// <summary>
        /// Test ReplaceDeliveriesOfAsset
        /// </summary>
        [Test]
        public void ReplaceDeliveriesOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeliveryIDs body = null;
            //long? assetId = null;
            //instance.ReplaceDeliveriesOfAsset(body, assetId);
            
        }
        /// <summary>
        /// Test ReplaceDocumentsOfAsset
        /// </summary>
        [Test]
        public void ReplaceDocumentsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? assetId = null;
            //instance.ReplaceDocumentsOfAsset(body, assetId);
            
        }
        /// <summary>
        /// Test ReplaceInstrumentationsOfAsset
        /// </summary>
        [Test]
        public void ReplaceInstrumentationsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InstrumentationIDs body = null;
            //long? assetId = null;
            //instance.ReplaceInstrumentationsOfAsset(body, assetId);
            
        }
        /// <summary>
        /// Test ReplaceNodesOfAsset
        /// </summary>
        [Test]
        public void ReplaceNodesOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NodeIDs body = null;
            //long? assetId = null;
            //instance.ReplaceNodesOfAsset(body, assetId);
            
        }
        /// <summary>
        /// Test ReplaceSoftwaresOfAsset
        /// </summary>
        [Test]
        public void ReplaceSoftwaresOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SoftwareIDs body = null;
            //long? assetId = null;
            //instance.ReplaceSoftwaresOfAsset(body, assetId);
            
        }
        /// <summary>
        /// Test UpdateAsset
        /// </summary>
        [Test]
        public void UpdateAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetRequest body = null;
            //long? id = null;
            //instance.UpdateAsset(body, id);
            
        }
        /// <summary>
        /// Test UpdateAssetPicture
        /// </summary>
        [Test]
        public void UpdateAssetPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] image = null;
            //long? assetId = null;
            //long? id = null;
            //var response = instance.UpdateAssetPicture(image, assetId, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test UpdateAssetPictureLink
        /// </summary>
        [Test]
        public void UpdateAssetPictureLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PictureLinkRequest body = null;
            //long? assetId = null;
            //long? id = null;
            //var response = instance.UpdateAssetPictureLink(body, assetId, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
        /// <summary>
        /// Test UpdateSpecificationsOfAsset
        /// </summary>
        [Test]
        public void UpdateSpecificationsOfAssetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, SpecificationUIVisibleRequest> body = null;
            //long? assetId = null;
            //instance.UpdateSpecificationsOfAsset(body, assetId);
            
        }
        /// <summary>
        /// Test UploadAssetPicture
        /// </summary>
        [Test]
        public void UploadAssetPictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //byte[] image = null;
            //long? id = null;
            //var response = instance.UploadAssetPicture(image, id);
            //Assert.IsInstanceOf<PictureResponse> (response, "response is PictureResponse");
        }
    }

}
