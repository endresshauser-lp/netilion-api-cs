/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing SubscriptionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SubscriptionApiTests
    {
        private SubscriptionApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubscriptionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubscriptionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubscriptionApi
            //Assert.IsInstanceOfType(typeof(SubscriptionApi), instance, "instance is a SubscriptionApi");
        }

        /// <summary>
        /// Test AddAssetsToSubscription
        /// </summary>
        [Test]
        public void AddAssetsToSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetIDs body = null;
            //long? subscriptionId = null;
            //instance.AddAssetsToSubscription(body, subscriptionId);
            
        }
        /// <summary>
        /// Test AddSeatUsersToSubscription
        /// </summary>
        [Test]
        public void AddSeatUsersToSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserIDorEmails body = null;
            //long? subscriptionId = null;
            //instance.AddSeatUsersToSubscription(body, subscriptionId);
            
        }
        /// <summary>
        /// Test AssignAssetSetToSubscription
        /// </summary>
        [Test]
        public void AssignAssetSetToSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubscriptionAssetAssignmentRequest body = null;
            //long? subscriptionId = null;
            //instance.AssignAssetSetToSubscription(body, subscriptionId);
            
        }
        /// <summary>
        /// Test CreateSubscription
        /// </summary>
        [Test]
        public void CreateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubscriptionRequest body = null;
            //var response = instance.CreateSubscription(body);
            //Assert.IsInstanceOf<SubscriptionResponse> (response, "response is SubscriptionResponse");
        }
        /// <summary>
        /// Test DeleteSubscription
        /// </summary>
        [Test]
        public void DeleteSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteSubscription(id);
            
        }
        /// <summary>
        /// Test DeleteSubscriptionSeat
        /// </summary>
        [Test]
        public void DeleteSubscriptionSeatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteSubscriptionSeat(id);
            
        }
        /// <summary>
        /// Test GetAssetsOfSubscription
        /// </summary>
        [Test]
        public void GetAssetsOfSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? subscriptionId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string serialNumber = null;
            //string productId = null;
            //string productCategoryId = null;
            //string parentId = null;
            //string manufacturerId = null;
            //string statusId = null;
            //string statusCode = null;
            //DateTime? productionDate = null;
            //DateTime? productionDateFrom = null;
            //DateTime? productionDateTo = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string nodeId = null;
            //DateTime? createdAt = null;
            //string createdAtFrom = null;
            //string createdAtTo = null;
            //DateTime? updatedAt = null;
            //string updatedAtFrom = null;
            //string updatedAtTo = null;
            //bool? ownershipClaimed = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetAssetsOfSubscription(subscriptionId, page, perPage, include, serialNumber, productId, productCategoryId, parentId, manufacturerId, statusId, statusCode, productionDate, productionDateFrom, productionDateTo, specificationsKey, specificationsValue, nodeId, createdAt, createdAtFrom, createdAtTo, updatedAt, updatedAtFrom, updatedAtTo, ownershipClaimed, permission, orderBy);
            //Assert.IsInstanceOf<AssetsResponse> (response, "response is AssetsResponse");
        }
        /// <summary>
        /// Test GetSeatUsersOfSubscription
        /// </summary>
        [Test]
        public void GetSeatUsersOfSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? subscriptionId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string email = null;
            //long? userId = null;
            //string status = null;
            //string orderBy = null;
            //var response = instance.GetSeatUsersOfSubscription(subscriptionId, page, perPage, include, email, userId, status, orderBy);
            //Assert.IsInstanceOf<SubscriptionSeatsResponse> (response, "response is SubscriptionSeatsResponse");
        }
        /// <summary>
        /// Test GetSpecificationsOfSubscription
        /// </summary>
        [Test]
        public void GetSpecificationsOfSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? subscriptionId = null;
            //string key = null;
            //var response = instance.GetSpecificationsOfSubscription(subscriptionId, key);
            //Assert.IsInstanceOf<SpecificationsResponse> (response, "response is SpecificationsResponse");
        }
        /// <summary>
        /// Test GetSubscriptionById
        /// </summary>
        [Test]
        public void GetSubscriptionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //var response = instance.GetSubscriptionById(id, include);
            //Assert.IsInstanceOf<SubscriptionResponse> (response, "response is SubscriptionResponse");
        }
        /// <summary>
        /// Test GetSubscriptionSeats
        /// </summary>
        [Test]
        public void GetSubscriptionSeatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string email = null;
            //long? userId = null;
            //string status = null;
            //long? clientApplicationId = null;
            //string orderBy = null;
            //var response = instance.GetSubscriptionSeats(page, perPage, include, email, userId, status, clientApplicationId, orderBy);
            //Assert.IsInstanceOf<SubscriptionSeatsResponse> (response, "response is SubscriptionSeatsResponse");
        }
        /// <summary>
        /// Test GetSubscriptions
        /// </summary>
        [Test]
        public void GetSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //long? userId = null;
            //long? clientApplicationId = null;
            //string externalReference = null;
            //string status = null;
            //string notificationStatus = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //DateTime? createdAt = null;
            //string createdAtFrom = null;
            //string createdAtTo = null;
            //DateTime? updatedAt = null;
            //string updatedAtFrom = null;
            //string updatedAtTo = null;
            //string scope = null;
            //string resellerLabel = null;
            //string customerId = null;
            //string orderBy = null;
            //var response = instance.GetSubscriptions(page, perPage, include, userId, clientApplicationId, externalReference, status, notificationStatus, specificationsKey, specificationsValue, startDate, endDate, createdAt, createdAtFrom, createdAtTo, updatedAt, updatedAtFrom, updatedAtTo, scope, resellerLabel, customerId, orderBy);
            //Assert.IsInstanceOf<SubscriptionsResponse> (response, "response is SubscriptionsResponse");
        }
        /// <summary>
        /// Test RemoveAssetsFromSubscription
        /// </summary>
        [Test]
        public void RemoveAssetsFromSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetIDs body = null;
            //long? subscriptionId = null;
            //instance.RemoveAssetsFromSubscription(body, subscriptionId);
            
        }
        /// <summary>
        /// Test RemoveSeatUsersFromSubscription
        /// </summary>
        [Test]
        public void RemoveSeatUsersFromSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserIDorEmails body = null;
            //long? subscriptionId = null;
            //instance.RemoveSeatUsersFromSubscription(body, subscriptionId);
            
        }
        /// <summary>
        /// Test RemoveSpecificationsFromSubscriptions
        /// </summary>
        [Test]
        public void RemoveSpecificationsFromSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //long? subscriptionId = null;
            //instance.RemoveSpecificationsFromSubscriptions(body, subscriptionId);
            
        }
        /// <summary>
        /// Test RenameSpecificationsOfSubscriptions
        /// </summary>
        [Test]
        public void RenameSpecificationsOfSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SpecificationsRename body = null;
            //long? subscriptionId = null;
            //instance.RenameSpecificationsOfSubscriptions(body, subscriptionId);
            
        }
        /// <summary>
        /// Test ReplaceAssetsOfSubscription
        /// </summary>
        [Test]
        public void ReplaceAssetsOfSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetIDs body = null;
            //long? subscriptionId = null;
            //instance.ReplaceAssetsOfSubscription(body, subscriptionId);
            
        }
        /// <summary>
        /// Test UnassignAssetSetToSubscription
        /// </summary>
        [Test]
        public void UnassignAssetSetToSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubscriptionAssetAssignmentRequest body = null;
            //long? subscriptionId = null;
            //instance.UnassignAssetSetToSubscription(body, subscriptionId);
            
        }
        /// <summary>
        /// Test UpdateSpecificationsOfSubscriptions
        /// </summary>
        [Test]
        public void UpdateSpecificationsOfSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, SpecificationRequest> body = null;
            //long? subscriptionId = null;
            //instance.UpdateSpecificationsOfSubscriptions(body, subscriptionId);
            
        }
        /// <summary>
        /// Test UpdateSubscription
        /// </summary>
        [Test]
        public void UpdateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubscriptionRequest body = null;
            //long? id = null;
            //instance.UpdateSubscription(body, id);
            
        }
        /// <summary>
        /// Test UpdateSubscriptionSeat
        /// </summary>
        [Test]
        public void UpdateSubscriptionSeatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubscriptionSeatPatch body = null;
            //long? id = null;
            //instance.UpdateSubscriptionSeat(body, id);
            
        }
    }

}
