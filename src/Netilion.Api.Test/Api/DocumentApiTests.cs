/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing DocumentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DocumentApiTests
    {
        private DocumentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DocumentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DocumentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DocumentApi
            //Assert.IsInstanceOfType(typeof(DocumentApi), instance, "instance is a DocumentApi");
        }

        /// <summary>
        /// Test AddCategoriesToDocument
        /// </summary>
        [Test]
        public void AddCategoriesToDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryIDs body = null;
            //long? documentId = null;
            //instance.AddCategoriesToDocument(body, documentId);
            
        }
        /// <summary>
        /// Test CreateDocument
        /// </summary>
        [Test]
        public void CreateDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentRequest body = null;
            //var response = instance.CreateDocument(body);
            //Assert.IsInstanceOf<DocumentResponse> (response, "response is DocumentResponse");
        }
        /// <summary>
        /// Test DeleteDocument
        /// </summary>
        [Test]
        public void DeleteDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteDocument(id);
            
        }
        /// <summary>
        /// Test DownloadDocument
        /// </summary>
        [Test]
        public void DownloadDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string attachmentId = null;
            //instance.DownloadDocument(id, attachmentId);
            
        }
        /// <summary>
        /// Test GetAssetsOfDocument
        /// </summary>
        [Test]
        public void GetAssetsOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string serialNumber = null;
            //string productId = null;
            //string productCategoryId = null;
            //string parentId = null;
            //string manufacturerId = null;
            //string statusId = null;
            //string statusCode = null;
            //DateTime? productionDate = null;
            //DateTime? productionDateFrom = null;
            //DateTime? productionDateTo = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //DateTime? createdAt = null;
            //string createdAtFrom = null;
            //string createdAtTo = null;
            //DateTime? updatedAt = null;
            //string updatedAtFrom = null;
            //string updatedAtTo = null;
            //bool? ownershipClaimed = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetAssetsOfDocument(documentId, page, perPage, include, serialNumber, productId, productCategoryId, parentId, manufacturerId, statusId, statusCode, productionDate, productionDateFrom, productionDateTo, specificationsKey, specificationsValue, createdAt, createdAtFrom, createdAtTo, updatedAt, updatedAtFrom, updatedAtTo, ownershipClaimed, permission, orderBy);
            //Assert.IsInstanceOf<AssetsResponse> (response, "response is AssetsResponse");
        }
        /// <summary>
        /// Test GetAttachmentsOfDocument
        /// </summary>
        [Test]
        public void GetAttachmentsOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string contentAuthor = null;
            //string contentVersion = null;
            //string remarks = null;
            //DateTime? contentDate = null;
            //DateTime? contentDateFrom = null;
            //DateTime? contentDateTo = null;
            //string fileName = null;
            //string orderBy = null;
            //var response = instance.GetAttachmentsOfDocument(documentId, page, perPage, contentAuthor, contentVersion, remarks, contentDate, contentDateFrom, contentDateTo, fileName, orderBy);
            //Assert.IsInstanceOf<AttachmentsResponse> (response, "response is AttachmentsResponse");
        }
        /// <summary>
        /// Test GetBillOfMaterialsOfDocument
        /// </summary>
        [Test]
        public void GetBillOfMaterialsOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string author = null;
            //string date = null;
            //string dateFrom = null;
            //string dateTo = null;
            //string orderBy = null;
            //var response = instance.GetBillOfMaterialsOfDocument(documentId, page, perPage, name, author, date, dateFrom, dateTo, orderBy);
            //Assert.IsInstanceOf<BillOfMaterialsResponse> (response, "response is BillOfMaterialsResponse");
        }
        /// <summary>
        /// Test GetCategoriesOfDocument
        /// </summary>
        [Test]
        public void GetCategoriesOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string code = null;
            //string name = null;
            //string parentId = null;
            //string tenantId = null;
            //string standardId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetCategoriesOfDocument(documentId, page, perPage, include, code, name, parentId, tenantId, standardId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentCategoriesResponse> (response, "response is DocumentCategoriesResponse");
        }
        /// <summary>
        /// Test GetCategoriesOptionsOfDocument
        /// </summary>
        [Test]
        public void GetCategoriesOptionsOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string code = null;
            //string name = null;
            //string parentId = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetCategoriesOptionsOfDocument(documentId, page, perPage, code, name, parentId, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentCategoriesResponse> (response, "response is DocumentCategoriesResponse");
        }
        /// <summary>
        /// Test GetDeliveriesOfDocument
        /// </summary>
        [Test]
        public void GetDeliveriesOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string number = null;
            //string name = null;
            //string statusId = null;
            //DateTime? dateOfShipment = null;
            //DateTime? dateOfShipmentFrom = null;
            //DateTime? dateOfShipmentTo = null;
            //string senderId = null;
            //string receiverId = null;
            //string orderBy = null;
            //var response = instance.GetDeliveriesOfDocument(documentId, page, perPage, number, name, statusId, dateOfShipment, dateOfShipmentFrom, dateOfShipmentTo, senderId, receiverId, orderBy);
            //Assert.IsInstanceOf<DeliveriesResponse> (response, "response is DeliveriesResponse");
        }
        /// <summary>
        /// Test GetDocumentById
        /// </summary>
        [Test]
        public void GetDocumentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentById(id, include, acceptLanguage);
            //Assert.IsInstanceOf<DocumentResponse> (response, "response is DocumentResponse");
        }
        /// <summary>
        /// Test GetDocumentClassificationsOptions
        /// </summary>
        [Test]
        public void GetDocumentClassificationsOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string code = null;
            //string name = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentClassificationsOptions(documentId, page, perPage, code, name, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentClassifications> (response, "response is DocumentClassifications");
        }
        /// <summary>
        /// Test GetDocumentIdClassification
        /// </summary>
        [Test]
        public void GetDocumentIdClassificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentIdClassification(documentId, acceptLanguage);
            //Assert.IsInstanceOf<DocumentClassificationResponse> (response, "response is DocumentClassificationResponse");
        }
        /// <summary>
        /// Test GetDocumentIdStatus
        /// </summary>
        [Test]
        public void GetDocumentIdStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentIdStatus(documentId, acceptLanguage);
            //Assert.IsInstanceOf<DocumentStatusResponse> (response, "response is DocumentStatusResponse");
        }
        /// <summary>
        /// Test GetDocumentStatusesOptions
        /// </summary>
        [Test]
        public void GetDocumentStatusesOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string code = null;
            //string name = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentStatusesOptions(documentId, page, perPage, include, code, name, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentStatuses> (response, "response is DocumentStatuses");
        }
        /// <summary>
        /// Test GetDocuments
        /// </summary>
        [Test]
        public void GetDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string statusId = null;
            //string classificationId = null;
            //string documentVersion = null;
            //string number = null;
            //string tenantId = null;
            //string categoryId = null;
            //DateTime? validFrom = null;
            //DateTime? validUntil = null;
            //DateTime? validAt = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocuments(page, perPage, include, name, statusId, classificationId, documentVersion, number, tenantId, categoryId, validFrom, validUntil, validAt, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentsResponse> (response, "response is DocumentsResponse");
        }
        /// <summary>
        /// Test GetEventsOfDocument
        /// </summary>
        [Test]
        public void GetEventsOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string typeId = null;
            //string statusId = null;
            //string startDatetime = null;
            //string startDatetimeFrom = null;
            //string startDatetimeTo = null;
            //string endDatetime = null;
            //DateTime? endDatetimeFrom = null;
            //string endDatetimeTo = null;
            //string tenantId = null;
            //string orderBy = null;
            //var response = instance.GetEventsOfDocument(documentId, page, perPage, name, typeId, statusId, startDatetime, startDatetimeFrom, startDatetimeTo, endDatetime, endDatetimeFrom, endDatetimeTo, tenantId, orderBy);
            //Assert.IsInstanceOf<EventsResponse> (response, "response is EventsResponse");
        }
        /// <summary>
        /// Test GetInstrumentationsOfDocument
        /// </summary>
        [Test]
        public void GetInstrumentationsOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string tag = null;
            //string statusId = null;
            //string typeId = null;
            //string parentId = null;
            //string tenantId = null;
            //string specificationsKey = null;
            //string specificationsValue = null;
            //string criticality = null;
            //string accessibility = null;
            //string assetStatusId = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetInstrumentationsOfDocument(documentId, page, perPage, include, tag, statusId, typeId, parentId, tenantId, specificationsKey, specificationsValue, criticality, accessibility, assetStatusId, permission, orderBy);
            //Assert.IsInstanceOf<InstrumentationsResponse> (response, "response is InstrumentationsResponse");
        }
        /// <summary>
        /// Test GetNodesOfDocument
        /// </summary>
        [Test]
        public void GetNodesOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string typeId = null;
            //string parentId = null;
            //string tenantId = null;
            //bool? hidden = null;
            //string permission = null;
            //string orderBy = null;
            //var response = instance.GetNodesOfDocument(documentId, page, perPage, include, name, typeId, parentId, tenantId, hidden, permission, orderBy);
            //Assert.IsInstanceOf<NodesResponse> (response, "response is NodesResponse");
        }
        /// <summary>
        /// Test GetProductsOfDocument
        /// </summary>
        [Test]
        public void GetProductsOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string productCode = null;
            //string name = null;
            //string manufacturerId = null;
            //string statusId = null;
            //string parentId = null;
            //string tenantId = null;
            //string categoryId = null;
            //string orderBy = null;
            //var response = instance.GetProductsOfDocument(documentId, page, perPage, productCode, name, manufacturerId, statusId, parentId, tenantId, categoryId, orderBy);
            //Assert.IsInstanceOf<ProductsResponse> (response, "response is ProductsResponse");
        }
        /// <summary>
        /// Test GetPurchaseOrdersOfDocument
        /// </summary>
        [Test]
        public void GetPurchaseOrdersOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string number = null;
            //string statusId = null;
            //string date = null;
            //string dateFrom = null;
            //string dateTo = null;
            //string senderId = null;
            //string receiverId = null;
            //string quotationId = null;
            //string orderBy = null;
            //var response = instance.GetPurchaseOrdersOfDocument(documentId, page, perPage, name, number, statusId, date, dateFrom, dateTo, senderId, receiverId, quotationId, orderBy);
            //Assert.IsInstanceOf<PurchaseOrdersResponse> (response, "response is PurchaseOrdersResponse");
        }
        /// <summary>
        /// Test GetQuotationsOfDocument
        /// </summary>
        [Test]
        public void GetQuotationsOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string number = null;
            //string statusId = null;
            //string date = null;
            //string dateFrom = null;
            //string dateTo = null;
            //string senderId = null;
            //string receiverId = null;
            //string requestForQuotationId = null;
            //string orderBy = null;
            //var response = instance.GetQuotationsOfDocument(documentId, page, perPage, name, number, statusId, date, dateFrom, dateTo, senderId, receiverId, requestForQuotationId, orderBy);
            //Assert.IsInstanceOf<QuotationsResponse> (response, "response is QuotationsResponse");
        }
        /// <summary>
        /// Test GetRequestForQuotationsOfDocument
        /// </summary>
        [Test]
        public void GetRequestForQuotationsOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string name = null;
            //string number = null;
            //string statusId = null;
            //string date = null;
            //string dateFrom = null;
            //string dateTo = null;
            //string senderId = null;
            //string receiverId = null;
            //string author = null;
            //string orderBy = null;
            //var response = instance.GetRequestForQuotationsOfDocument(documentId, page, perPage, name, number, statusId, date, dateFrom, dateTo, senderId, receiverId, author, orderBy);
            //Assert.IsInstanceOf<RequestForQuotationsResponse> (response, "response is RequestForQuotationsResponse");
        }
        /// <summary>
        /// Test RemoveCategoriesFromDocument
        /// </summary>
        [Test]
        public void RemoveCategoriesFromDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryIDs body = null;
            //long? documentId = null;
            //instance.RemoveCategoriesFromDocument(body, documentId);
            
        }
        /// <summary>
        /// Test ReplaceCategoriesOfDocument
        /// </summary>
        [Test]
        public void ReplaceCategoriesOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryIDs body = null;
            //long? documentId = null;
            //instance.ReplaceCategoriesOfDocument(body, documentId);
            
        }
        /// <summary>
        /// Test UpdateDocument
        /// </summary>
        [Test]
        public void UpdateDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentRequest body = null;
            //long? id = null;
            //string contentLanguage = null;
            //instance.UpdateDocument(body, id, contentLanguage);
            
        }
    }

}
