/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Netilion.Api.Client;
using Netilion.Api.Api;
using Netilion.Api.Model;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing DocumentCategoryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DocumentCategoryApiTests
    {
        private DocumentCategoryApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DocumentCategoryApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DocumentCategoryApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DocumentCategoryApi
            //Assert.IsInstanceOfType(typeof(DocumentCategoryApi), instance, "instance is a DocumentCategoryApi");
        }

        /// <summary>
        /// Test AddDocumentsToDocumentCategory
        /// </summary>
        [Test]
        public void AddDocumentsToDocumentCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? categoryId = null;
            //int? page = null;
            //int? perPage = null;
            //instance.AddDocumentsToDocumentCategory(body, categoryId, page, perPage);
            
        }
        /// <summary>
        /// Test CreateDocumentCategory
        /// </summary>
        [Test]
        public void CreateDocumentCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentCategoryRequest body = null;
            //var response = instance.CreateDocumentCategory(body);
            //Assert.IsInstanceOf<DocumentCategoryResponse> (response, "response is DocumentCategoryResponse");
        }
        /// <summary>
        /// Test DeleteDocumentCategory
        /// </summary>
        [Test]
        public void DeleteDocumentCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteDocumentCategory(id);
            
        }
        /// <summary>
        /// Test GetCategoriesOfDocument
        /// </summary>
        [Test]
        public void GetCategoriesOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string code = null;
            //string name = null;
            //string parentId = null;
            //string tenantId = null;
            //string standardId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetCategoriesOfDocument(documentId, page, perPage, include, code, name, parentId, tenantId, standardId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentCategoriesResponse> (response, "response is DocumentCategoriesResponse");
        }
        /// <summary>
        /// Test GetCategoriesOptionsOfDocument
        /// </summary>
        [Test]
        public void GetCategoriesOptionsOfDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? documentId = null;
            //int? page = null;
            //int? perPage = null;
            //string code = null;
            //string name = null;
            //string parentId = null;
            //string tenantId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetCategoriesOptionsOfDocument(documentId, page, perPage, code, name, parentId, tenantId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentCategoriesResponse> (response, "response is DocumentCategoriesResponse");
        }
        /// <summary>
        /// Test GetDocumentCategories
        /// </summary>
        [Test]
        public void GetDocumentCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string code = null;
            //string name = null;
            //string parentId = null;
            //string tenantId = null;
            //string standardId = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentCategories(page, perPage, include, code, name, parentId, tenantId, standardId, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentCategoriesResponse> (response, "response is DocumentCategoriesResponse");
        }
        /// <summary>
        /// Test GetDocumentCategoryById
        /// </summary>
        [Test]
        public void GetDocumentCategoryByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string include = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentCategoryById(id, include, acceptLanguage);
            //Assert.IsInstanceOf<DocumentCategoryResponse> (response, "response is DocumentCategoryResponse");
        }
        /// <summary>
        /// Test GetDocumentsOfDocumentCategory
        /// </summary>
        [Test]
        public void GetDocumentsOfDocumentCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? categoryId = null;
            //int? page = null;
            //int? perPage = null;
            //string include = null;
            //string name = null;
            //string documentVersion = null;
            //string number = null;
            //string statusId = null;
            //string classificationId = null;
            //string tenantId = null;
            //DateTime? validFrom = null;
            //DateTime? validUntil = null;
            //DateTime? validAt = null;
            //string orderBy = null;
            //string acceptLanguage = null;
            //var response = instance.GetDocumentsOfDocumentCategory(categoryId, page, perPage, include, name, documentVersion, number, statusId, classificationId, tenantId, validFrom, validUntil, validAt, orderBy, acceptLanguage);
            //Assert.IsInstanceOf<DocumentsResponse> (response, "response is DocumentsResponse");
        }
        /// <summary>
        /// Test RemoveDocumentsFromDocumentCategory
        /// </summary>
        [Test]
        public void RemoveDocumentsFromDocumentCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? categoryId = null;
            //instance.RemoveDocumentsFromDocumentCategory(body, categoryId);
            
        }
        /// <summary>
        /// Test ReplaceDocumentsOfDocumentCategory
        /// </summary>
        [Test]
        public void ReplaceDocumentsOfDocumentCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentIDs body = null;
            //long? categoryId = null;
            //instance.ReplaceDocumentsOfDocumentCategory(body, categoryId);
            
        }
        /// <summary>
        /// Test UpdateDocumentCategory
        /// </summary>
        [Test]
        public void UpdateDocumentCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentCategoryRequest body = null;
            //long? id = null;
            //string contentLanguage = null;
            //instance.UpdateDocumentCategory(body, id, contentLanguage);
            
        }
    }

}
