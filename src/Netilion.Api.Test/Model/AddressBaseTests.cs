/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Netilion.Api.Api;
using Netilion.Api.Model;
using Netilion.Api.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Netilion.Api.Test
{
    /// <summary>
    ///  Class for testing AddressBase
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class AddressBaseTests
    {
        // TODO uncomment below to declare an instance variable for AddressBase
        //private AddressBase instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of AddressBase
            //instance = new AddressBase();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AddressBase
        /// </summary>
        [Test]
        public void AddressBaseInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" AddressBase
            //Assert.IsInstanceOfType<AddressBase> (instance, "variable 'instance' is a AddressBase");
        }

        /// <summary>
        /// Test deserialize a ShippingAddressResponse from type ShippingAddressRequest
        /// </summary>
        [Test]
        public void ShippingAddressResponseDeserializeFromShippingAddressRequestTest()
        {
            // TODO uncomment below to test deserialize a ShippingAddressResponse from type ShippingAddressRequest
            //Assert.IsInstanceOf<ShippingAddressRequest>(JsonConvert.DeserializeObject<ShippingAddressRequest>(new ShippingAddressResponse().ToJson()));
        }
        /// <summary>
        /// Test deserialize a BillingContactResponse from type AddressBase
        /// </summary>
        [Test]
        public void BillingContactResponseDeserializeFromAddressBaseTest()
        {
            // TODO uncomment below to test deserialize a BillingContactResponse from type AddressBase
            //Assert.IsInstanceOf<AddressBase>(JsonConvert.DeserializeObject<AddressBase>(new BillingContactResponse().ToJson()));
        }
        /// <summary>
        /// Test deserialize a BillingAddressResponse from type BillingAddressRequest
        /// </summary>
        [Test]
        public void BillingAddressResponseDeserializeFromBillingAddressRequestTest()
        {
            // TODO uncomment below to test deserialize a BillingAddressResponse from type BillingAddressRequest
            //Assert.IsInstanceOf<BillingAddressRequest>(JsonConvert.DeserializeObject<BillingAddressRequest>(new BillingAddressResponse().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CompanyAddressRequest from type AddressBase
        /// </summary>
        [Test]
        public void CompanyAddressRequestDeserializeFromAddressBaseTest()
        {
            // TODO uncomment below to test deserialize a CompanyAddressRequest from type AddressBase
            //Assert.IsInstanceOf<AddressBase>(JsonConvert.DeserializeObject<AddressBase>(new CompanyAddressRequest().ToJson()));
        }
        /// <summary>
        /// Test deserialize a UserAddressRequest from type AddressBase
        /// </summary>
        [Test]
        public void UserAddressRequestDeserializeFromAddressBaseTest()
        {
            // TODO uncomment below to test deserialize a UserAddressRequest from type AddressBase
            //Assert.IsInstanceOf<AddressBase>(JsonConvert.DeserializeObject<AddressBase>(new UserAddressRequest().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ShippingAddressRequest from type AddressBase
        /// </summary>
        [Test]
        public void ShippingAddressRequestDeserializeFromAddressBaseTest()
        {
            // TODO uncomment below to test deserialize a ShippingAddressRequest from type AddressBase
            //Assert.IsInstanceOf<AddressBase>(JsonConvert.DeserializeObject<AddressBase>(new ShippingAddressRequest().ToJson()));
        }
        /// <summary>
        /// Test deserialize a BillingAddressRequest from type AddressBase
        /// </summary>
        [Test]
        public void BillingAddressRequestDeserializeFromAddressBaseTest()
        {
            // TODO uncomment below to test deserialize a BillingAddressRequest from type AddressBase
            //Assert.IsInstanceOf<AddressBase>(JsonConvert.DeserializeObject<AddressBase>(new BillingAddressRequest().ToJson()));
        }
        /// <summary>
        /// Test deserialize a UserAddressResponse from type AddressBase
        /// </summary>
        [Test]
        public void UserAddressResponseDeserializeFromAddressBaseTest()
        {
            // TODO uncomment below to test deserialize a UserAddressResponse from type AddressBase
            //Assert.IsInstanceOf<AddressBase>(JsonConvert.DeserializeObject<AddressBase>(new UserAddressResponse().ToJson()));
        }
        /// <summary>
        /// Test deserialize a BillingContactRequest from type AddressBase
        /// </summary>
        [Test]
        public void BillingContactRequestDeserializeFromAddressBaseTest()
        {
            // TODO uncomment below to test deserialize a BillingContactRequest from type AddressBase
            //Assert.IsInstanceOf<AddressBase>(JsonConvert.DeserializeObject<AddressBase>(new BillingContactRequest().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CompanyAddressResponse from type AddressBase
        /// </summary>
        [Test]
        public void CompanyAddressResponseDeserializeFromAddressBaseTest()
        {
            // TODO uncomment below to test deserialize a CompanyAddressResponse from type AddressBase
            //Assert.IsInstanceOf<AddressBase>(JsonConvert.DeserializeObject<AddressBase>(new CompanyAddressResponse().ToJson()));
        }

        /// <summary>
        /// Test the property 'Street'
        /// </summary>
        [Test]
        public void StreetTest()
        {
            // TODO unit test for the property 'Street'
        }
        /// <summary>
        /// Test the property 'StreetNumber'
        /// </summary>
        [Test]
        public void StreetNumberTest()
        {
            // TODO unit test for the property 'StreetNumber'
        }
        /// <summary>
        /// Test the property 'ZipCode'
        /// </summary>
        [Test]
        public void ZipCodeTest()
        {
            // TODO unit test for the property 'ZipCode'
        }
        /// <summary>
        /// Test the property 'City'
        /// </summary>
        [Test]
        public void CityTest()
        {
            // TODO unit test for the property 'City'
        }
        /// <summary>
        /// Test the property 'RegionCode'
        /// </summary>
        [Test]
        public void RegionCodeTest()
        {
            // TODO unit test for the property 'RegionCode'
        }
        /// <summary>
        /// Test the property 'CountryCode'
        /// </summary>
        [Test]
        public void CountryCodeTest()
        {
            // TODO unit test for the property 'CountryCode'
        }
        /// <summary>
        /// Test the property 'Phone'
        /// </summary>
        [Test]
        public void PhoneTest()
        {
            // TODO unit test for the property 'Phone'
        }
        /// <summary>
        /// Test the property 'CompanyName'
        /// </summary>
        [Test]
        public void CompanyNameTest()
        {
            // TODO unit test for the property 'CompanyName'
        }

    }

}
