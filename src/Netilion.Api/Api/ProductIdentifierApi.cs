/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Netilion.Api.Client;
using Netilion.Api.Model;

namespace Netilion.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProductIdentifierApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add products to a product identifier
        /// </summary>
        /// <remarks>
        /// Adds one or more products to a product identifier.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productIdentifierId">Id of the product identifier to which the products will get added</param>
        /// <returns></returns>
        void AddProductsToProductIdentifier (ProductIDs body, long? productIdentifierId);

        /// <summary>
        /// Add products to a product identifier
        /// </summary>
        /// <remarks>
        /// Adds one or more products to a product identifier.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productIdentifierId">Id of the product identifier to which the products will get added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddProductsToProductIdentifierWithHttpInfo (ProductIDs body, long? productIdentifierId);
        /// <summary>
        /// Create a new product identifier
        /// </summary>
        /// <remarks>
        /// Product identifiers must have a product identifier that is unique under the tenant and protocols scope. They need to be assigned to at least one product. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product identifier object that needs to be created.</param>
        /// <returns>ProductIdentifierResponse</returns>
        ProductIdentifierResponse CreateProductIdentifier (ProductIdentifierRequest body);

        /// <summary>
        /// Create a new product identifier
        /// </summary>
        /// <remarks>
        /// Product identifiers must have a product identifier that is unique under the tenant and protocols scope. They need to be assigned to at least one product. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product identifier object that needs to be created.</param>
        /// <returns>ApiResponse of ProductIdentifierResponse</returns>
        ApiResponse<ProductIdentifierResponse> CreateProductIdentifierWithHttpInfo (ProductIdentifierRequest body);
        /// <summary>
        /// Create a new product identifier for a product
        /// </summary>
        /// <remarks>
        /// Product identifiers must have a product identifier that is unique under the tenant and protocols scope. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="productId">Id of the product</param>
        /// <returns>ProductIdentifierResponse</returns>
        ProductIdentifierResponse CreateProductIdentifierForProduct (ProductIdentifierRequestNoProducts body, long? productId);

        /// <summary>
        /// Create a new product identifier for a product
        /// </summary>
        /// <remarks>
        /// Product identifiers must have a product identifier that is unique under the tenant and protocols scope. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="productId">Id of the product</param>
        /// <returns>ApiResponse of ProductIdentifierResponse</returns>
        ApiResponse<ProductIdentifierResponse> CreateProductIdentifierForProductWithHttpInfo (ProductIdentifierRequestNoProducts body, long? productId);
        /// <summary>
        /// Delete a product identifier
        /// </summary>
        /// <remarks>
        /// Delete a specific resource product identifier identified by the id in the URL. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to delete</param>
        /// <returns></returns>
        void DeleteProductIdentifier (long? id);

        /// <summary>
        /// Delete a product identifier
        /// </summary>
        /// <remarks>
        /// Delete a specific resource product identifier identified by the id in the URL. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductIdentifierWithHttpInfo (long? id);
        /// <summary>
        /// Get a single product identifier
        /// </summary>
        /// <remarks>
        /// Get a specific product identifier identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ProductIdentifierResponse</returns>
        ProductIdentifierResponse GetProductIdentifierById (long? id, string include = null);

        /// <summary>
        /// Get a single product identifier
        /// </summary>
        /// <remarks>
        /// Get a specific product identifier identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ApiResponse of ProductIdentifierResponse</returns>
        ApiResponse<ProductIdentifierResponse> GetProductIdentifierByIdWithHttpInfo (long? id, string include = null);
        /// <summary>
        /// Get a range of product identifiers
        /// </summary>
        /// <remarks>
        /// Returns a list of product identifiers. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="organizationName">Filter accepts &#x60;FIELDCOMM_GROUP&#x60;, &#x60;PROFIBUS_PROFINET&#x60;, &#x60;ODVA&#x60;, &#x60;MODBUS_ORGANIZATION&#x60;, &#x60;OTHER_ORGANIZATION&#x60; (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60;, &#x60;MODBUS&#x60;, &#x60;OTHERS (optional)</param>
        /// <param name="protocolVersion">Filter accepts * as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <returns>ProductIdentifiersResponse</returns>
        ProductIdentifiersResponse GetProductIdentifiers (int? page = null, int? perPage = null, string include = null, string organizationName = null, string protocol = null, string protocolVersion = null, string productIdentifier = null, string tenantId = null);

        /// <summary>
        /// Get a range of product identifiers
        /// </summary>
        /// <remarks>
        /// Returns a list of product identifiers. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="organizationName">Filter accepts &#x60;FIELDCOMM_GROUP&#x60;, &#x60;PROFIBUS_PROFINET&#x60;, &#x60;ODVA&#x60;, &#x60;MODBUS_ORGANIZATION&#x60;, &#x60;OTHER_ORGANIZATION&#x60; (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60;, &#x60;MODBUS&#x60;, &#x60;OTHERS (optional)</param>
        /// <param name="protocolVersion">Filter accepts * as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <returns>ApiResponse of ProductIdentifiersResponse</returns>
        ApiResponse<ProductIdentifiersResponse> GetProductIdentifiersWithHttpInfo (int? page = null, int? perPage = null, string include = null, string organizationName = null, string protocol = null, string protocolVersion = null, string productIdentifier = null, string tenantId = null);
        /// <summary>
        /// Get all product identifiers of one product
        /// </summary>
        /// <remarks>
        /// Returns a list of all product identifiers belonging to a product. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;tenant&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ProductIdentifiersResponse</returns>
        ProductIdentifiersResponse GetProductIdentifiersOfProduct (long? productId, int? page = null, int? perPage = null, string include = null);

        /// <summary>
        /// Get all product identifiers of one product
        /// </summary>
        /// <remarks>
        /// Returns a list of all product identifiers belonging to a product. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;tenant&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ApiResponse of ProductIdentifiersResponse</returns>
        ApiResponse<ProductIdentifiersResponse> GetProductIdentifiersOfProductWithHttpInfo (long? productId, int? page = null, int? perPage = null, string include = null);
        /// <summary>
        /// Get all products of one product identifier
        /// </summary>
        /// <remarks>
        /// Returns a list of all products of a product identifier that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set the &#x60;&#x60;&#x60;Accept-Language&#x60;&#x60;&#x60; header. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, specifications, specifications[key1,key2], categories, categories.parent&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIdentifierId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ProductsResponse</returns>
        ProductsResponse GetProductsOfProductIdentifier (long? productIdentifierId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get all products of one product identifier
        /// </summary>
        /// <remarks>
        /// Returns a list of all products of a product identifier that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set the &#x60;&#x60;&#x60;Accept-Language&#x60;&#x60;&#x60; header. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, specifications, specifications[key1,key2], categories, categories.parent&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIdentifierId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of ProductsResponse</returns>
        ApiResponse<ProductsResponse> GetProductsOfProductIdentifierWithHttpInfo (long? productIdentifierId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Remove product identifiers from a product
        /// </summary>
        /// <remarks>
        /// Remove one or more product identifiers from an product. If the product identifier has no more related products, the product identifier will be deleted. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">Id of the product from which the product identifiers will removed.</param>
        /// <returns></returns>
        void RemoveProductIdentifierFromProduct (ProductIdentifiers body, long? productId);

        /// <summary>
        /// Remove product identifiers from a product
        /// </summary>
        /// <remarks>
        /// Remove one or more product identifiers from an product. If the product identifier has no more related products, the product identifier will be deleted. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">Id of the product from which the product identifiers will removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveProductIdentifierFromProductWithHttpInfo (ProductIdentifiers body, long? productId);
        /// <summary>
        /// Remove products from a product identifier
        /// </summary>
        /// <remarks>
        /// Remove one or more products from a product identifier. If the product identifier has no more related products, the product identifier will be deleted
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productIdentifierId">Id of the product identifier from which the products will be removed</param>
        /// <returns></returns>
        void RemoveProductsFromProductIdentifier (ProductIDs body, long? productIdentifierId);

        /// <summary>
        /// Remove products from a product identifier
        /// </summary>
        /// <remarks>
        /// Remove one or more products from a product identifier. If the product identifier has no more related products, the product identifier will be deleted
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productIdentifierId">Id of the product identifier from which the products will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveProductsFromProductIdentifierWithHttpInfo (ProductIDs body, long? productIdentifierId);
        /// <summary>
        /// Update a product identifier
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource. To update a product identifier for a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the product identifier to update</param>
        /// <returns></returns>
        void UpdateProductIdentifier (ProductIdentifierRequest body, long? id);

        /// <summary>
        /// Update a product identifier
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource. To update a product identifier for a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the product identifier to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProductIdentifierWithHttpInfo (ProductIdentifierRequest body, long? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add products to a product identifier
        /// </summary>
        /// <remarks>
        /// Adds one or more products to a product identifier.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productIdentifierId">Id of the product identifier to which the products will get added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddProductsToProductIdentifierAsync (ProductIDs body, long? productIdentifierId);

        /// <summary>
        /// Add products to a product identifier
        /// </summary>
        /// <remarks>
        /// Adds one or more products to a product identifier.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productIdentifierId">Id of the product identifier to which the products will get added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddProductsToProductIdentifierAsyncWithHttpInfo (ProductIDs body, long? productIdentifierId);
        /// <summary>
        /// Create a new product identifier
        /// </summary>
        /// <remarks>
        /// Product identifiers must have a product identifier that is unique under the tenant and protocols scope. They need to be assigned to at least one product. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product identifier object that needs to be created.</param>
        /// <returns>Task of ProductIdentifierResponse</returns>
        System.Threading.Tasks.Task<ProductIdentifierResponse> CreateProductIdentifierAsync (ProductIdentifierRequest body);

        /// <summary>
        /// Create a new product identifier
        /// </summary>
        /// <remarks>
        /// Product identifiers must have a product identifier that is unique under the tenant and protocols scope. They need to be assigned to at least one product. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product identifier object that needs to be created.</param>
        /// <returns>Task of ApiResponse (ProductIdentifierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductIdentifierResponse>> CreateProductIdentifierAsyncWithHttpInfo (ProductIdentifierRequest body);
        /// <summary>
        /// Create a new product identifier for a product
        /// </summary>
        /// <remarks>
        /// Product identifiers must have a product identifier that is unique under the tenant and protocols scope. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="productId">Id of the product</param>
        /// <returns>Task of ProductIdentifierResponse</returns>
        System.Threading.Tasks.Task<ProductIdentifierResponse> CreateProductIdentifierForProductAsync (ProductIdentifierRequestNoProducts body, long? productId);

        /// <summary>
        /// Create a new product identifier for a product
        /// </summary>
        /// <remarks>
        /// Product identifiers must have a product identifier that is unique under the tenant and protocols scope. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="productId">Id of the product</param>
        /// <returns>Task of ApiResponse (ProductIdentifierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductIdentifierResponse>> CreateProductIdentifierForProductAsyncWithHttpInfo (ProductIdentifierRequestNoProducts body, long? productId);
        /// <summary>
        /// Delete a product identifier
        /// </summary>
        /// <remarks>
        /// Delete a specific resource product identifier identified by the id in the URL. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductIdentifierAsync (long? id);

        /// <summary>
        /// Delete a product identifier
        /// </summary>
        /// <remarks>
        /// Delete a specific resource product identifier identified by the id in the URL. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductIdentifierAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get a single product identifier
        /// </summary>
        /// <remarks>
        /// Get a specific product identifier identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ProductIdentifierResponse</returns>
        System.Threading.Tasks.Task<ProductIdentifierResponse> GetProductIdentifierByIdAsync (long? id, string include = null);

        /// <summary>
        /// Get a single product identifier
        /// </summary>
        /// <remarks>
        /// Get a specific product identifier identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ApiResponse (ProductIdentifierResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductIdentifierResponse>> GetProductIdentifierByIdAsyncWithHttpInfo (long? id, string include = null);
        /// <summary>
        /// Get a range of product identifiers
        /// </summary>
        /// <remarks>
        /// Returns a list of product identifiers. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="organizationName">Filter accepts &#x60;FIELDCOMM_GROUP&#x60;, &#x60;PROFIBUS_PROFINET&#x60;, &#x60;ODVA&#x60;, &#x60;MODBUS_ORGANIZATION&#x60;, &#x60;OTHER_ORGANIZATION&#x60; (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60;, &#x60;MODBUS&#x60;, &#x60;OTHERS (optional)</param>
        /// <param name="protocolVersion">Filter accepts * as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <returns>Task of ProductIdentifiersResponse</returns>
        System.Threading.Tasks.Task<ProductIdentifiersResponse> GetProductIdentifiersAsync (int? page = null, int? perPage = null, string include = null, string organizationName = null, string protocol = null, string protocolVersion = null, string productIdentifier = null, string tenantId = null);

        /// <summary>
        /// Get a range of product identifiers
        /// </summary>
        /// <remarks>
        /// Returns a list of product identifiers. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="organizationName">Filter accepts &#x60;FIELDCOMM_GROUP&#x60;, &#x60;PROFIBUS_PROFINET&#x60;, &#x60;ODVA&#x60;, &#x60;MODBUS_ORGANIZATION&#x60;, &#x60;OTHER_ORGANIZATION&#x60; (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60;, &#x60;MODBUS&#x60;, &#x60;OTHERS (optional)</param>
        /// <param name="protocolVersion">Filter accepts * as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <returns>Task of ApiResponse (ProductIdentifiersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductIdentifiersResponse>> GetProductIdentifiersAsyncWithHttpInfo (int? page = null, int? perPage = null, string include = null, string organizationName = null, string protocol = null, string protocolVersion = null, string productIdentifier = null, string tenantId = null);
        /// <summary>
        /// Get all product identifiers of one product
        /// </summary>
        /// <remarks>
        /// Returns a list of all product identifiers belonging to a product. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;tenant&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ProductIdentifiersResponse</returns>
        System.Threading.Tasks.Task<ProductIdentifiersResponse> GetProductIdentifiersOfProductAsync (long? productId, int? page = null, int? perPage = null, string include = null);

        /// <summary>
        /// Get all product identifiers of one product
        /// </summary>
        /// <remarks>
        /// Returns a list of all product identifiers belonging to a product. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;tenant&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ApiResponse (ProductIdentifiersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductIdentifiersResponse>> GetProductIdentifiersOfProductAsyncWithHttpInfo (long? productId, int? page = null, int? perPage = null, string include = null);
        /// <summary>
        /// Get all products of one product identifier
        /// </summary>
        /// <remarks>
        /// Returns a list of all products of a product identifier that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set the &#x60;&#x60;&#x60;Accept-Language&#x60;&#x60;&#x60; header. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, specifications, specifications[key1,key2], categories, categories.parent&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIdentifierId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ProductsResponse</returns>
        System.Threading.Tasks.Task<ProductsResponse> GetProductsOfProductIdentifierAsync (long? productIdentifierId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get all products of one product identifier
        /// </summary>
        /// <remarks>
        /// Returns a list of all products of a product identifier that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set the &#x60;&#x60;&#x60;Accept-Language&#x60;&#x60;&#x60; header. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, specifications, specifications[key1,key2], categories, categories.parent&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIdentifierId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (ProductsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductsResponse>> GetProductsOfProductIdentifierAsyncWithHttpInfo (long? productIdentifierId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Remove product identifiers from a product
        /// </summary>
        /// <remarks>
        /// Remove one or more product identifiers from an product. If the product identifier has no more related products, the product identifier will be deleted. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">Id of the product from which the product identifiers will removed.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveProductIdentifierFromProductAsync (ProductIdentifiers body, long? productId);

        /// <summary>
        /// Remove product identifiers from a product
        /// </summary>
        /// <remarks>
        /// Remove one or more product identifiers from an product. If the product identifier has no more related products, the product identifier will be deleted. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">Id of the product from which the product identifiers will removed.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveProductIdentifierFromProductAsyncWithHttpInfo (ProductIdentifiers body, long? productId);
        /// <summary>
        /// Remove products from a product identifier
        /// </summary>
        /// <remarks>
        /// Remove one or more products from a product identifier. If the product identifier has no more related products, the product identifier will be deleted
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productIdentifierId">Id of the product identifier from which the products will be removed</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveProductsFromProductIdentifierAsync (ProductIDs body, long? productIdentifierId);

        /// <summary>
        /// Remove products from a product identifier
        /// </summary>
        /// <remarks>
        /// Remove one or more products from a product identifier. If the product identifier has no more related products, the product identifier will be deleted
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productIdentifierId">Id of the product identifier from which the products will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveProductsFromProductIdentifierAsyncWithHttpInfo (ProductIDs body, long? productIdentifierId);
        /// <summary>
        /// Update a product identifier
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource. To update a product identifier for a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the product identifier to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProductIdentifierAsync (ProductIdentifierRequest body, long? id);

        /// <summary>
        /// Update a product identifier
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource. To update a product identifier for a product you need the tenant admin role on the products tenant.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the product identifier to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProductIdentifierAsyncWithHttpInfo (ProductIdentifierRequest body, long? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProductIdentifierApi : IProductIdentifierApi
    {
        private Netilion.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductIdentifierApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductIdentifierApi(String basePath)
        {
            this.Configuration = new Netilion.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductIdentifierApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProductIdentifierApi()
        {
            this.Configuration = Netilion.Api.Client.Configuration.Default;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductIdentifierApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductIdentifierApi(Netilion.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Netilion.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Netilion.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Netilion.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add products to a product identifier Adds one or more products to a product identifier.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productIdentifierId">Id of the product identifier to which the products will get added</param>
        /// <returns></returns>
        public void AddProductsToProductIdentifier (ProductIDs body, long? productIdentifierId)
        {
             AddProductsToProductIdentifierWithHttpInfo(body, productIdentifierId);
        }

        /// <summary>
        /// Add products to a product identifier Adds one or more products to a product identifier.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productIdentifierId">Id of the product identifier to which the products will get added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddProductsToProductIdentifierWithHttpInfo (ProductIDs body, long? productIdentifierId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductIdentifierApi->AddProductsToProductIdentifier");
            // verify the required parameter 'productIdentifierId' is set
            if (productIdentifierId == null)
                throw new ApiException(400, "Missing required parameter 'productIdentifierId' when calling ProductIdentifierApi->AddProductsToProductIdentifier");

            var localVarPath = "/product/identifiers/{product_identifier_id}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productIdentifierId != null) localVarPathParams.Add("product_identifier_id", this.Configuration.ApiClient.ParameterToString(productIdentifierId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProductsToProductIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add products to a product identifier Adds one or more products to a product identifier.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productIdentifierId">Id of the product identifier to which the products will get added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddProductsToProductIdentifierAsync (ProductIDs body, long? productIdentifierId)
        {
             await AddProductsToProductIdentifierAsyncWithHttpInfo(body, productIdentifierId);

        }

        /// <summary>
        /// Add products to a product identifier Adds one or more products to a product identifier.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productIdentifierId">Id of the product identifier to which the products will get added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddProductsToProductIdentifierAsyncWithHttpInfo (ProductIDs body, long? productIdentifierId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductIdentifierApi->AddProductsToProductIdentifier");
            // verify the required parameter 'productIdentifierId' is set
            if (productIdentifierId == null)
                throw new ApiException(400, "Missing required parameter 'productIdentifierId' when calling ProductIdentifierApi->AddProductsToProductIdentifier");

            var localVarPath = "/product/identifiers/{product_identifier_id}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productIdentifierId != null) localVarPathParams.Add("product_identifier_id", this.Configuration.ApiClient.ParameterToString(productIdentifierId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProductsToProductIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new product identifier Product identifiers must have a product identifier that is unique under the tenant and protocols scope. They need to be assigned to at least one product. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product identifier object that needs to be created.</param>
        /// <returns>ProductIdentifierResponse</returns>
        public ProductIdentifierResponse CreateProductIdentifier (ProductIdentifierRequest body)
        {
             ApiResponse<ProductIdentifierResponse> localVarResponse = CreateProductIdentifierWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new product identifier Product identifiers must have a product identifier that is unique under the tenant and protocols scope. They need to be assigned to at least one product. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product identifier object that needs to be created.</param>
        /// <returns>ApiResponse of ProductIdentifierResponse</returns>
        public ApiResponse< ProductIdentifierResponse > CreateProductIdentifierWithHttpInfo (ProductIdentifierRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductIdentifierApi->CreateProductIdentifier");

            var localVarPath = "/product/identifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProductIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductIdentifierResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductIdentifierResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductIdentifierResponse)));
        }

        /// <summary>
        /// Create a new product identifier Product identifiers must have a product identifier that is unique under the tenant and protocols scope. They need to be assigned to at least one product. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product identifier object that needs to be created.</param>
        /// <returns>Task of ProductIdentifierResponse</returns>
        public async System.Threading.Tasks.Task<ProductIdentifierResponse> CreateProductIdentifierAsync (ProductIdentifierRequest body)
        {
             ApiResponse<ProductIdentifierResponse> localVarResponse = await CreateProductIdentifierAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new product identifier Product identifiers must have a product identifier that is unique under the tenant and protocols scope. They need to be assigned to at least one product. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product identifier object that needs to be created.</param>
        /// <returns>Task of ApiResponse (ProductIdentifierResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductIdentifierResponse>> CreateProductIdentifierAsyncWithHttpInfo (ProductIdentifierRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductIdentifierApi->CreateProductIdentifier");

            var localVarPath = "/product/identifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProductIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductIdentifierResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductIdentifierResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductIdentifierResponse)));
        }

        /// <summary>
        /// Create a new product identifier for a product Product identifiers must have a product identifier that is unique under the tenant and protocols scope. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="productId">Id of the product</param>
        /// <returns>ProductIdentifierResponse</returns>
        public ProductIdentifierResponse CreateProductIdentifierForProduct (ProductIdentifierRequestNoProducts body, long? productId)
        {
             ApiResponse<ProductIdentifierResponse> localVarResponse = CreateProductIdentifierForProductWithHttpInfo(body, productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new product identifier for a product Product identifiers must have a product identifier that is unique under the tenant and protocols scope. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="productId">Id of the product</param>
        /// <returns>ApiResponse of ProductIdentifierResponse</returns>
        public ApiResponse< ProductIdentifierResponse > CreateProductIdentifierForProductWithHttpInfo (ProductIdentifierRequestNoProducts body, long? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductIdentifierApi->CreateProductIdentifierForProduct");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductIdentifierApi->CreateProductIdentifierForProduct");

            var localVarPath = "/products/{product_id}/identifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProductIdentifierForProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductIdentifierResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductIdentifierResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductIdentifierResponse)));
        }

        /// <summary>
        /// Create a new product identifier for a product Product identifiers must have a product identifier that is unique under the tenant and protocols scope. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="productId">Id of the product</param>
        /// <returns>Task of ProductIdentifierResponse</returns>
        public async System.Threading.Tasks.Task<ProductIdentifierResponse> CreateProductIdentifierForProductAsync (ProductIdentifierRequestNoProducts body, long? productId)
        {
             ApiResponse<ProductIdentifierResponse> localVarResponse = await CreateProductIdentifierForProductAsyncWithHttpInfo(body, productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new product identifier for a product Product identifiers must have a product identifier that is unique under the tenant and protocols scope. To create a product identifier for a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="productId">Id of the product</param>
        /// <returns>Task of ApiResponse (ProductIdentifierResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductIdentifierResponse>> CreateProductIdentifierForProductAsyncWithHttpInfo (ProductIdentifierRequestNoProducts body, long? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductIdentifierApi->CreateProductIdentifierForProduct");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductIdentifierApi->CreateProductIdentifierForProduct");

            var localVarPath = "/products/{product_id}/identifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProductIdentifierForProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductIdentifierResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductIdentifierResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductIdentifierResponse)));
        }

        /// <summary>
        /// Delete a product identifier Delete a specific resource product identifier identified by the id in the URL. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to delete</param>
        /// <returns></returns>
        public void DeleteProductIdentifier (long? id)
        {
             DeleteProductIdentifierWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a product identifier Delete a specific resource product identifier identified by the id in the URL. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProductIdentifierWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductIdentifierApi->DeleteProductIdentifier");

            var localVarPath = "/product/identifiers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProductIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a product identifier Delete a specific resource product identifier identified by the id in the URL. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductIdentifierAsync (long? id)
        {
             await DeleteProductIdentifierAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a product identifier Delete a specific resource product identifier identified by the id in the URL. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductIdentifierAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductIdentifierApi->DeleteProductIdentifier");

            var localVarPath = "/product/identifiers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProductIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a single product identifier Get a specific product identifier identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ProductIdentifierResponse</returns>
        public ProductIdentifierResponse GetProductIdentifierById (long? id, string include = null)
        {
             ApiResponse<ProductIdentifierResponse> localVarResponse = GetProductIdentifierByIdWithHttpInfo(id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single product identifier Get a specific product identifier identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ApiResponse of ProductIdentifierResponse</returns>
        public ApiResponse< ProductIdentifierResponse > GetProductIdentifierByIdWithHttpInfo (long? id, string include = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductIdentifierApi->GetProductIdentifierById");

            var localVarPath = "/product/identifiers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductIdentifierById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductIdentifierResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductIdentifierResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductIdentifierResponse)));
        }

        /// <summary>
        /// Get a single product identifier Get a specific product identifier identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ProductIdentifierResponse</returns>
        public async System.Threading.Tasks.Task<ProductIdentifierResponse> GetProductIdentifierByIdAsync (long? id, string include = null)
        {
             ApiResponse<ProductIdentifierResponse> localVarResponse = await GetProductIdentifierByIdAsyncWithHttpInfo(id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single product identifier Get a specific product identifier identified by the id in the URL.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the product identifier to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ApiResponse (ProductIdentifierResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductIdentifierResponse>> GetProductIdentifierByIdAsyncWithHttpInfo (long? id, string include = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductIdentifierApi->GetProductIdentifierById");

            var localVarPath = "/product/identifiers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductIdentifierById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductIdentifierResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductIdentifierResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductIdentifierResponse)));
        }

        /// <summary>
        /// Get a range of product identifiers Returns a list of product identifiers. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="organizationName">Filter accepts &#x60;FIELDCOMM_GROUP&#x60;, &#x60;PROFIBUS_PROFINET&#x60;, &#x60;ODVA&#x60;, &#x60;MODBUS_ORGANIZATION&#x60;, &#x60;OTHER_ORGANIZATION&#x60; (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60;, &#x60;MODBUS&#x60;, &#x60;OTHERS (optional)</param>
        /// <param name="protocolVersion">Filter accepts * as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <returns>ProductIdentifiersResponse</returns>
        public ProductIdentifiersResponse GetProductIdentifiers (int? page = null, int? perPage = null, string include = null, string organizationName = null, string protocol = null, string protocolVersion = null, string productIdentifier = null, string tenantId = null)
        {
             ApiResponse<ProductIdentifiersResponse> localVarResponse = GetProductIdentifiersWithHttpInfo(page, perPage, include, organizationName, protocol, protocolVersion, productIdentifier, tenantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a range of product identifiers Returns a list of product identifiers. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="organizationName">Filter accepts &#x60;FIELDCOMM_GROUP&#x60;, &#x60;PROFIBUS_PROFINET&#x60;, &#x60;ODVA&#x60;, &#x60;MODBUS_ORGANIZATION&#x60;, &#x60;OTHER_ORGANIZATION&#x60; (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60;, &#x60;MODBUS&#x60;, &#x60;OTHERS (optional)</param>
        /// <param name="protocolVersion">Filter accepts * as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <returns>ApiResponse of ProductIdentifiersResponse</returns>
        public ApiResponse< ProductIdentifiersResponse > GetProductIdentifiersWithHttpInfo (int? page = null, int? perPage = null, string include = null, string organizationName = null, string protocol = null, string protocolVersion = null, string productIdentifier = null, string tenantId = null)
        {

            var localVarPath = "/product/identifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (organizationName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "organization_name", organizationName)); // query parameter
            if (protocol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocol", protocol)); // query parameter
            if (protocolVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocol_version", protocolVersion)); // query parameter
            if (productIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_identifier", productIdentifier)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductIdentifiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductIdentifiersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductIdentifiersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductIdentifiersResponse)));
        }

        /// <summary>
        /// Get a range of product identifiers Returns a list of product identifiers. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="organizationName">Filter accepts &#x60;FIELDCOMM_GROUP&#x60;, &#x60;PROFIBUS_PROFINET&#x60;, &#x60;ODVA&#x60;, &#x60;MODBUS_ORGANIZATION&#x60;, &#x60;OTHER_ORGANIZATION&#x60; (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60;, &#x60;MODBUS&#x60;, &#x60;OTHERS (optional)</param>
        /// <param name="protocolVersion">Filter accepts * as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <returns>Task of ProductIdentifiersResponse</returns>
        public async System.Threading.Tasks.Task<ProductIdentifiersResponse> GetProductIdentifiersAsync (int? page = null, int? perPage = null, string include = null, string organizationName = null, string protocol = null, string protocolVersion = null, string productIdentifier = null, string tenantId = null)
        {
             ApiResponse<ProductIdentifiersResponse> localVarResponse = await GetProductIdentifiersAsyncWithHttpInfo(page, perPage, include, organizationName, protocol, protocolVersion, productIdentifier, tenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a range of product identifiers Returns a list of product identifiers. If the query has no matches, the response is an empty list.  Possible include values: &#x60;&#x60;&#x60;products&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="organizationName">Filter accepts &#x60;FIELDCOMM_GROUP&#x60;, &#x60;PROFIBUS_PROFINET&#x60;, &#x60;ODVA&#x60;, &#x60;MODBUS_ORGANIZATION&#x60;, &#x60;OTHER_ORGANIZATION&#x60; (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60;, &#x60;MODBUS&#x60;, &#x60;OTHERS (optional)</param>
        /// <param name="protocolVersion">Filter accepts * as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <returns>Task of ApiResponse (ProductIdentifiersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductIdentifiersResponse>> GetProductIdentifiersAsyncWithHttpInfo (int? page = null, int? perPage = null, string include = null, string organizationName = null, string protocol = null, string protocolVersion = null, string productIdentifier = null, string tenantId = null)
        {

            var localVarPath = "/product/identifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (organizationName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "organization_name", organizationName)); // query parameter
            if (protocol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocol", protocol)); // query parameter
            if (protocolVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocol_version", protocolVersion)); // query parameter
            if (productIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_identifier", productIdentifier)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductIdentifiers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductIdentifiersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductIdentifiersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductIdentifiersResponse)));
        }

        /// <summary>
        /// Get all product identifiers of one product Returns a list of all product identifiers belonging to a product. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;tenant&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ProductIdentifiersResponse</returns>
        public ProductIdentifiersResponse GetProductIdentifiersOfProduct (long? productId, int? page = null, int? perPage = null, string include = null)
        {
             ApiResponse<ProductIdentifiersResponse> localVarResponse = GetProductIdentifiersOfProductWithHttpInfo(productId, page, perPage, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all product identifiers of one product Returns a list of all product identifiers belonging to a product. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;tenant&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ApiResponse of ProductIdentifiersResponse</returns>
        public ApiResponse< ProductIdentifiersResponse > GetProductIdentifiersOfProductWithHttpInfo (long? productId, int? page = null, int? perPage = null, string include = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductIdentifierApi->GetProductIdentifiersOfProduct");

            var localVarPath = "/products/{product_id}/identifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductIdentifiersOfProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductIdentifiersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductIdentifiersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductIdentifiersResponse)));
        }

        /// <summary>
        /// Get all product identifiers of one product Returns a list of all product identifiers belonging to a product. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;tenant&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ProductIdentifiersResponse</returns>
        public async System.Threading.Tasks.Task<ProductIdentifiersResponse> GetProductIdentifiersOfProductAsync (long? productId, int? page = null, int? perPage = null, string include = null)
        {
             ApiResponse<ProductIdentifiersResponse> localVarResponse = await GetProductIdentifiersOfProductAsyncWithHttpInfo(productId, page, perPage, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all product identifiers of one product Returns a list of all product identifiers belonging to a product. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;tenant&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ApiResponse (ProductIdentifiersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductIdentifiersResponse>> GetProductIdentifiersOfProductAsyncWithHttpInfo (long? productId, int? page = null, int? perPage = null, string include = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductIdentifierApi->GetProductIdentifiersOfProduct");

            var localVarPath = "/products/{product_id}/identifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductIdentifiersOfProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductIdentifiersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductIdentifiersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductIdentifiersResponse)));
        }

        /// <summary>
        /// Get all products of one product identifier Returns a list of all products of a product identifier that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set the &#x60;&#x60;&#x60;Accept-Language&#x60;&#x60;&#x60; header. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, specifications, specifications[key1,key2], categories, categories.parent&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIdentifierId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ProductsResponse</returns>
        public ProductsResponse GetProductsOfProductIdentifier (long? productIdentifierId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<ProductsResponse> localVarResponse = GetProductsOfProductIdentifierWithHttpInfo(productIdentifierId, page, perPage, include, productCode, name, manufacturerId, statusId, categoryId, parentId, tenantId, specificationsKey, specificationsValue, orderBy, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all products of one product identifier Returns a list of all products of a product identifier that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set the &#x60;&#x60;&#x60;Accept-Language&#x60;&#x60;&#x60; header. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, specifications, specifications[key1,key2], categories, categories.parent&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIdentifierId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of ProductsResponse</returns>
        public ApiResponse< ProductsResponse > GetProductsOfProductIdentifierWithHttpInfo (long? productIdentifierId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'productIdentifierId' is set
            if (productIdentifierId == null)
                throw new ApiException(400, "Missing required parameter 'productIdentifierId' when calling ProductIdentifierApi->GetProductsOfProductIdentifier");

            var localVarPath = "/product/identifiers/{product_identifier_id}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productIdentifierId != null) localVarPathParams.Add("product_identifier_id", this.Configuration.ApiClient.ParameterToString(productIdentifierId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (productCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_code", productCode)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (manufacturerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manufacturer_id", manufacturerId)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category_id", categoryId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (specificationsKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_key", specificationsKey)); // query parameter
            if (specificationsValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_value", specificationsValue)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductsOfProductIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductsResponse)));
        }

        /// <summary>
        /// Get all products of one product identifier Returns a list of all products of a product identifier that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set the &#x60;&#x60;&#x60;Accept-Language&#x60;&#x60;&#x60; header. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, specifications, specifications[key1,key2], categories, categories.parent&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIdentifierId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ProductsResponse</returns>
        public async System.Threading.Tasks.Task<ProductsResponse> GetProductsOfProductIdentifierAsync (long? productIdentifierId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<ProductsResponse> localVarResponse = await GetProductsOfProductIdentifierAsyncWithHttpInfo(productIdentifierId, page, perPage, include, productCode, name, manufacturerId, statusId, categoryId, parentId, tenantId, specificationsKey, specificationsValue, orderBy, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all products of one product identifier Returns a list of all products of a product identifier that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set the &#x60;&#x60;&#x60;Accept-Language&#x60;&#x60;&#x60; header. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, specifications, specifications[key1,key2], categories, categories.parent&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productIdentifierId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (ProductsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductsResponse>> GetProductsOfProductIdentifierAsyncWithHttpInfo (long? productIdentifierId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'productIdentifierId' is set
            if (productIdentifierId == null)
                throw new ApiException(400, "Missing required parameter 'productIdentifierId' when calling ProductIdentifierApi->GetProductsOfProductIdentifier");

            var localVarPath = "/product/identifiers/{product_identifier_id}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productIdentifierId != null) localVarPathParams.Add("product_identifier_id", this.Configuration.ApiClient.ParameterToString(productIdentifierId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (productCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_code", productCode)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (manufacturerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manufacturer_id", manufacturerId)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category_id", categoryId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (specificationsKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_key", specificationsKey)); // query parameter
            if (specificationsValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_value", specificationsValue)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductsOfProductIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductsResponse)));
        }

        /// <summary>
        /// Remove product identifiers from a product Remove one or more product identifiers from an product. If the product identifier has no more related products, the product identifier will be deleted. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">Id of the product from which the product identifiers will removed.</param>
        /// <returns></returns>
        public void RemoveProductIdentifierFromProduct (ProductIdentifiers body, long? productId)
        {
             RemoveProductIdentifierFromProductWithHttpInfo(body, productId);
        }

        /// <summary>
        /// Remove product identifiers from a product Remove one or more product identifiers from an product. If the product identifier has no more related products, the product identifier will be deleted. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">Id of the product from which the product identifiers will removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveProductIdentifierFromProductWithHttpInfo (ProductIdentifiers body, long? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductIdentifierApi->RemoveProductIdentifierFromProduct");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductIdentifierApi->RemoveProductIdentifierFromProduct");

            var localVarPath = "/products/{product_id}/identifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveProductIdentifierFromProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove product identifiers from a product Remove one or more product identifiers from an product. If the product identifier has no more related products, the product identifier will be deleted. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">Id of the product from which the product identifiers will removed.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveProductIdentifierFromProductAsync (ProductIdentifiers body, long? productId)
        {
             await RemoveProductIdentifierFromProductAsyncWithHttpInfo(body, productId);

        }

        /// <summary>
        /// Remove product identifiers from a product Remove one or more product identifiers from an product. If the product identifier has no more related products, the product identifier will be deleted. To delete a product identifier of a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">Id of the product from which the product identifiers will removed.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveProductIdentifierFromProductAsyncWithHttpInfo (ProductIdentifiers body, long? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductIdentifierApi->RemoveProductIdentifierFromProduct");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductIdentifierApi->RemoveProductIdentifierFromProduct");

            var localVarPath = "/products/{product_id}/identifiers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveProductIdentifierFromProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove products from a product identifier Remove one or more products from a product identifier. If the product identifier has no more related products, the product identifier will be deleted
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productIdentifierId">Id of the product identifier from which the products will be removed</param>
        /// <returns></returns>
        public void RemoveProductsFromProductIdentifier (ProductIDs body, long? productIdentifierId)
        {
             RemoveProductsFromProductIdentifierWithHttpInfo(body, productIdentifierId);
        }

        /// <summary>
        /// Remove products from a product identifier Remove one or more products from a product identifier. If the product identifier has no more related products, the product identifier will be deleted
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productIdentifierId">Id of the product identifier from which the products will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveProductsFromProductIdentifierWithHttpInfo (ProductIDs body, long? productIdentifierId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductIdentifierApi->RemoveProductsFromProductIdentifier");
            // verify the required parameter 'productIdentifierId' is set
            if (productIdentifierId == null)
                throw new ApiException(400, "Missing required parameter 'productIdentifierId' when calling ProductIdentifierApi->RemoveProductsFromProductIdentifier");

            var localVarPath = "/product/identifiers/{product_identifier_id}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productIdentifierId != null) localVarPathParams.Add("product_identifier_id", this.Configuration.ApiClient.ParameterToString(productIdentifierId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveProductsFromProductIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove products from a product identifier Remove one or more products from a product identifier. If the product identifier has no more related products, the product identifier will be deleted
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productIdentifierId">Id of the product identifier from which the products will be removed</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveProductsFromProductIdentifierAsync (ProductIDs body, long? productIdentifierId)
        {
             await RemoveProductsFromProductIdentifierAsyncWithHttpInfo(body, productIdentifierId);

        }

        /// <summary>
        /// Remove products from a product identifier Remove one or more products from a product identifier. If the product identifier has no more related products, the product identifier will be deleted
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productIdentifierId">Id of the product identifier from which the products will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveProductsFromProductIdentifierAsyncWithHttpInfo (ProductIDs body, long? productIdentifierId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductIdentifierApi->RemoveProductsFromProductIdentifier");
            // verify the required parameter 'productIdentifierId' is set
            if (productIdentifierId == null)
                throw new ApiException(400, "Missing required parameter 'productIdentifierId' when calling ProductIdentifierApi->RemoveProductsFromProductIdentifier");

            var localVarPath = "/product/identifiers/{product_identifier_id}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productIdentifierId != null) localVarPathParams.Add("product_identifier_id", this.Configuration.ApiClient.ParameterToString(productIdentifierId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveProductsFromProductIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a product identifier Update accessible parameters of the requested resource. To update a product identifier for a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the product identifier to update</param>
        /// <returns></returns>
        public void UpdateProductIdentifier (ProductIdentifierRequest body, long? id)
        {
             UpdateProductIdentifierWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update a product identifier Update accessible parameters of the requested resource. To update a product identifier for a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the product identifier to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProductIdentifierWithHttpInfo (ProductIdentifierRequest body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductIdentifierApi->UpdateProductIdentifier");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductIdentifierApi->UpdateProductIdentifier");

            var localVarPath = "/product/identifiers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProductIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a product identifier Update accessible parameters of the requested resource. To update a product identifier for a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the product identifier to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProductIdentifierAsync (ProductIdentifierRequest body, long? id)
        {
             await UpdateProductIdentifierAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update a product identifier Update accessible parameters of the requested resource. To update a product identifier for a product you need the tenant admin role on the products tenant.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the product identifier to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProductIdentifierAsyncWithHttpInfo (ProductIdentifierRequest body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductIdentifierApi->UpdateProductIdentifier");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductIdentifierApi->UpdateProductIdentifier");

            var localVarPath = "/product/identifiers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProductIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
