/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Netilion.Api.Client;
using Netilion.Api.Model;

namespace Netilion.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAssetHealthConditionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add health conditions to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more health conditions to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns></returns>
        void AddHealthConditionsToAsset (AssetHealthConditionsRequest body, long? assetId);

        /// <summary>
        /// Add health conditions to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more health conditions to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddHealthConditionsToAssetWithHttpInfo (AssetHealthConditionsRequest body, long? assetId);
        /// <summary>
        /// Calculate health conditions of an asset
        /// </summary>
        /// <remarks>
        /// Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. Possible include values: &#x60;&#x60;asset_status,causes,causes.remedies&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="protocol">Filter accepts &#x27;PROFIBUS&#x27;, &#x27;HART&#x27;, &#x27;ETHERNETIP&#x27; or &#x27;MODBUS&#x27;</param>
        /// <param name="diagnosisMessage">diagnosis message of an asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="protocolVersion">definition of the protocol version. For example 5, 6 or 7 for HART (optional)</param>
        /// <param name="deviceIdent">device_ident of the asset (optional)</param>
        /// <param name="productIdentifier">product_identifier of the asset (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>AssetHealthConditionsResponse</returns>
        AssetHealthConditionsResponse CalculateAssetHealthConditions (long? assetId, string protocol, string diagnosisMessage, int? page = null, int? perPage = null, string include = null, string protocolVersion = null, string deviceIdent = null, string productIdentifier = null, string acceptLanguage = null);

        /// <summary>
        /// Calculate health conditions of an asset
        /// </summary>
        /// <remarks>
        /// Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. Possible include values: &#x60;&#x60;asset_status,causes,causes.remedies&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="protocol">Filter accepts &#x27;PROFIBUS&#x27;, &#x27;HART&#x27;, &#x27;ETHERNETIP&#x27; or &#x27;MODBUS&#x27;</param>
        /// <param name="diagnosisMessage">diagnosis message of an asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="protocolVersion">definition of the protocol version. For example 5, 6 or 7 for HART (optional)</param>
        /// <param name="deviceIdent">device_ident of the asset (optional)</param>
        /// <param name="productIdentifier">product_identifier of the asset (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of AssetHealthConditionsResponse</returns>
        ApiResponse<AssetHealthConditionsResponse> CalculateAssetHealthConditionsWithHttpInfo (long? assetId, string protocol, string diagnosisMessage, int? page = null, int? perPage = null, string include = null, string protocolVersion = null, string deviceIdent = null, string productIdentifier = null, string acceptLanguage = null);
        /// <summary>
        /// Calculate health conditions of an asset and update asset with this health conditions
        /// </summary>
        /// <remarks>
        /// Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. The asset will be automatically updated with the result.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns></returns>
        void CalculateAssetHealthConditionsAndUpdateAsset (AssetHealthConditionsCalculateRequest body, long? assetId);

        /// <summary>
        /// Calculate health conditions of an asset and update asset with this health conditions
        /// </summary>
        /// <remarks>
        /// Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. The asset will be automatically updated with the result.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CalculateAssetHealthConditionsAndUpdateAssetWithHttpInfo (AssetHealthConditionsCalculateRequest body, long? assetId);
        /// <summary>
        /// Get all health conditions assigned to an asset
        /// </summary>
        /// <remarks>
        /// Returns a list of health conditions of an asset.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="assetStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>AssetHealthConditionsResponse</returns>
        AssetHealthConditionsResponse GetAssetHealthConditions (long? assetId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string assetStatusId = null, string acceptLanguage = null);

        /// <summary>
        /// Get all health conditions assigned to an asset
        /// </summary>
        /// <remarks>
        /// Returns a list of health conditions of an asset.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="assetStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of AssetHealthConditionsResponse</returns>
        ApiResponse<AssetHealthConditionsResponse> GetAssetHealthConditionsWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string assetStatusId = null, string acceptLanguage = null);
        /// <summary>
        /// Get all health_conditions historical evolution the given asset had assigned
        /// </summary>
        /// <remarks>
        /// Returns a list of all health_conditions available in your scope of an asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="from">Start date filter for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;created_datetime&#x60; or &#x60;deleted_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>AssetHealthConditionsTimemachineResponse</returns>
        AssetHealthConditionsTimemachineResponse GetHealthConditionsOfAssetTimemachine (long? assetId, int? page = null, int? perPage = null, DateTime? from = null, DateTime? to = null, string orderBy = null);

        /// <summary>
        /// Get all health_conditions historical evolution the given asset had assigned
        /// </summary>
        /// <remarks>
        /// Returns a list of all health_conditions available in your scope of an asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="from">Start date filter for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;created_datetime&#x60; or &#x60;deleted_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>ApiResponse of AssetHealthConditionsTimemachineResponse</returns>
        ApiResponse<AssetHealthConditionsTimemachineResponse> GetHealthConditionsOfAssetTimemachineWithHttpInfo (long? assetId, int? page = null, int? perPage = null, DateTime? from = null, DateTime? to = null, string orderBy = null);
        /// <summary>
        /// Replace health conditions of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all health conditions belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns></returns>
        void ReaplaceHealthConditionsOfAsset (AssetHealthConditionsRequest body, long? assetId);

        /// <summary>
        /// Replace health conditions of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all health conditions belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReaplaceHealthConditionsOfAssetWithHttpInfo (AssetHealthConditionsRequest body, long? assetId);
        /// <summary>
        /// Remove health conditions of an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more health conditions from an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns></returns>
        void RemoveHealthConditionsOfAsset (AssetHealthConditionsRequest body, long? assetId);

        /// <summary>
        /// Remove health conditions of an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more health conditions from an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveHealthConditionsOfAssetWithHttpInfo (AssetHealthConditionsRequest body, long? assetId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add health conditions to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more health conditions to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddHealthConditionsToAssetAsync (AssetHealthConditionsRequest body, long? assetId);

        /// <summary>
        /// Add health conditions to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more health conditions to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddHealthConditionsToAssetAsyncWithHttpInfo (AssetHealthConditionsRequest body, long? assetId);
        /// <summary>
        /// Calculate health conditions of an asset
        /// </summary>
        /// <remarks>
        /// Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. Possible include values: &#x60;&#x60;asset_status,causes,causes.remedies&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="protocol">Filter accepts &#x27;PROFIBUS&#x27;, &#x27;HART&#x27;, &#x27;ETHERNETIP&#x27; or &#x27;MODBUS&#x27;</param>
        /// <param name="diagnosisMessage">diagnosis message of an asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="protocolVersion">definition of the protocol version. For example 5, 6 or 7 for HART (optional)</param>
        /// <param name="deviceIdent">device_ident of the asset (optional)</param>
        /// <param name="productIdentifier">product_identifier of the asset (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of AssetHealthConditionsResponse</returns>
        System.Threading.Tasks.Task<AssetHealthConditionsResponse> CalculateAssetHealthConditionsAsync (long? assetId, string protocol, string diagnosisMessage, int? page = null, int? perPage = null, string include = null, string protocolVersion = null, string deviceIdent = null, string productIdentifier = null, string acceptLanguage = null);

        /// <summary>
        /// Calculate health conditions of an asset
        /// </summary>
        /// <remarks>
        /// Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. Possible include values: &#x60;&#x60;asset_status,causes,causes.remedies&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="protocol">Filter accepts &#x27;PROFIBUS&#x27;, &#x27;HART&#x27;, &#x27;ETHERNETIP&#x27; or &#x27;MODBUS&#x27;</param>
        /// <param name="diagnosisMessage">diagnosis message of an asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="protocolVersion">definition of the protocol version. For example 5, 6 or 7 for HART (optional)</param>
        /// <param name="deviceIdent">device_ident of the asset (optional)</param>
        /// <param name="productIdentifier">product_identifier of the asset (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (AssetHealthConditionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetHealthConditionsResponse>> CalculateAssetHealthConditionsAsyncWithHttpInfo (long? assetId, string protocol, string diagnosisMessage, int? page = null, int? perPage = null, string include = null, string protocolVersion = null, string deviceIdent = null, string productIdentifier = null, string acceptLanguage = null);
        /// <summary>
        /// Calculate health conditions of an asset and update asset with this health conditions
        /// </summary>
        /// <remarks>
        /// Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. The asset will be automatically updated with the result.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CalculateAssetHealthConditionsAndUpdateAssetAsync (AssetHealthConditionsCalculateRequest body, long? assetId);

        /// <summary>
        /// Calculate health conditions of an asset and update asset with this health conditions
        /// </summary>
        /// <remarks>
        /// Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. The asset will be automatically updated with the result.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CalculateAssetHealthConditionsAndUpdateAssetAsyncWithHttpInfo (AssetHealthConditionsCalculateRequest body, long? assetId);
        /// <summary>
        /// Get all health conditions assigned to an asset
        /// </summary>
        /// <remarks>
        /// Returns a list of health conditions of an asset.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="assetStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of AssetHealthConditionsResponse</returns>
        System.Threading.Tasks.Task<AssetHealthConditionsResponse> GetAssetHealthConditionsAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string assetStatusId = null, string acceptLanguage = null);

        /// <summary>
        /// Get all health conditions assigned to an asset
        /// </summary>
        /// <remarks>
        /// Returns a list of health conditions of an asset.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="assetStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (AssetHealthConditionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetHealthConditionsResponse>> GetAssetHealthConditionsAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string assetStatusId = null, string acceptLanguage = null);
        /// <summary>
        /// Get all health_conditions historical evolution the given asset had assigned
        /// </summary>
        /// <remarks>
        /// Returns a list of all health_conditions available in your scope of an asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="from">Start date filter for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;created_datetime&#x60; or &#x60;deleted_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of AssetHealthConditionsTimemachineResponse</returns>
        System.Threading.Tasks.Task<AssetHealthConditionsTimemachineResponse> GetHealthConditionsOfAssetTimemachineAsync (long? assetId, int? page = null, int? perPage = null, DateTime? from = null, DateTime? to = null, string orderBy = null);

        /// <summary>
        /// Get all health_conditions historical evolution the given asset had assigned
        /// </summary>
        /// <remarks>
        /// Returns a list of all health_conditions available in your scope of an asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="from">Start date filter for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;created_datetime&#x60; or &#x60;deleted_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of ApiResponse (AssetHealthConditionsTimemachineResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetHealthConditionsTimemachineResponse>> GetHealthConditionsOfAssetTimemachineAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, DateTime? from = null, DateTime? to = null, string orderBy = null);
        /// <summary>
        /// Replace health conditions of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all health conditions belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReaplaceHealthConditionsOfAssetAsync (AssetHealthConditionsRequest body, long? assetId);

        /// <summary>
        /// Replace health conditions of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all health conditions belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReaplaceHealthConditionsOfAssetAsyncWithHttpInfo (AssetHealthConditionsRequest body, long? assetId);
        /// <summary>
        /// Remove health conditions of an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more health conditions from an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveHealthConditionsOfAssetAsync (AssetHealthConditionsRequest body, long? assetId);

        /// <summary>
        /// Remove health conditions of an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more health conditions from an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveHealthConditionsOfAssetAsyncWithHttpInfo (AssetHealthConditionsRequest body, long? assetId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AssetHealthConditionApi : IAssetHealthConditionApi
    {
        private Netilion.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetHealthConditionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetHealthConditionApi(String basePath)
        {
            this.Configuration = new Netilion.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetHealthConditionApi"/> class
        /// </summary>
        /// <returns></returns>
        public AssetHealthConditionApi()
        {
            this.Configuration = Netilion.Api.Client.Configuration.Default;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetHealthConditionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetHealthConditionApi(Netilion.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Netilion.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Netilion.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Netilion.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add health conditions to an asset Add one or more health conditions to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns></returns>
        public void AddHealthConditionsToAsset (AssetHealthConditionsRequest body, long? assetId)
        {
             AddHealthConditionsToAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Add health conditions to an asset Add one or more health conditions to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddHealthConditionsToAssetWithHttpInfo (AssetHealthConditionsRequest body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetHealthConditionApi->AddHealthConditionsToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->AddHealthConditionsToAsset");

            var localVarPath = "/assets/{asset_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHealthConditionsToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add health conditions to an asset Add one or more health conditions to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddHealthConditionsToAssetAsync (AssetHealthConditionsRequest body, long? assetId)
        {
             await AddHealthConditionsToAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Add health conditions to an asset Add one or more health conditions to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddHealthConditionsToAssetAsyncWithHttpInfo (AssetHealthConditionsRequest body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetHealthConditionApi->AddHealthConditionsToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->AddHealthConditionsToAsset");

            var localVarPath = "/assets/{asset_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHealthConditionsToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Calculate health conditions of an asset Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. Possible include values: &#x60;&#x60;asset_status,causes,causes.remedies&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="protocol">Filter accepts &#x27;PROFIBUS&#x27;, &#x27;HART&#x27;, &#x27;ETHERNETIP&#x27; or &#x27;MODBUS&#x27;</param>
        /// <param name="diagnosisMessage">diagnosis message of an asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="protocolVersion">definition of the protocol version. For example 5, 6 or 7 for HART (optional)</param>
        /// <param name="deviceIdent">device_ident of the asset (optional)</param>
        /// <param name="productIdentifier">product_identifier of the asset (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>AssetHealthConditionsResponse</returns>
        public AssetHealthConditionsResponse CalculateAssetHealthConditions (long? assetId, string protocol, string diagnosisMessage, int? page = null, int? perPage = null, string include = null, string protocolVersion = null, string deviceIdent = null, string productIdentifier = null, string acceptLanguage = null)
        {
             ApiResponse<AssetHealthConditionsResponse> localVarResponse = CalculateAssetHealthConditionsWithHttpInfo(assetId, protocol, diagnosisMessage, page, perPage, include, protocolVersion, deviceIdent, productIdentifier, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate health conditions of an asset Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. Possible include values: &#x60;&#x60;asset_status,causes,causes.remedies&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="protocol">Filter accepts &#x27;PROFIBUS&#x27;, &#x27;HART&#x27;, &#x27;ETHERNETIP&#x27; or &#x27;MODBUS&#x27;</param>
        /// <param name="diagnosisMessage">diagnosis message of an asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="protocolVersion">definition of the protocol version. For example 5, 6 or 7 for HART (optional)</param>
        /// <param name="deviceIdent">device_ident of the asset (optional)</param>
        /// <param name="productIdentifier">product_identifier of the asset (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of AssetHealthConditionsResponse</returns>
        public ApiResponse< AssetHealthConditionsResponse > CalculateAssetHealthConditionsWithHttpInfo (long? assetId, string protocol, string diagnosisMessage, int? page = null, int? perPage = null, string include = null, string protocolVersion = null, string deviceIdent = null, string productIdentifier = null, string acceptLanguage = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->CalculateAssetHealthConditions");
            // verify the required parameter 'protocol' is set
            if (protocol == null)
                throw new ApiException(400, "Missing required parameter 'protocol' when calling AssetHealthConditionApi->CalculateAssetHealthConditions");
            // verify the required parameter 'diagnosisMessage' is set
            if (diagnosisMessage == null)
                throw new ApiException(400, "Missing required parameter 'diagnosisMessage' when calling AssetHealthConditionApi->CalculateAssetHealthConditions");

            var localVarPath = "/assets/{asset_id}/health_conditions/calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (protocol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocol", protocol)); // query parameter
            if (protocolVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocol_version", protocolVersion)); // query parameter
            if (diagnosisMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "diagnosis_message", diagnosisMessage)); // query parameter
            if (deviceIdent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_ident", deviceIdent)); // query parameter
            if (productIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_identifier", productIdentifier)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateAssetHealthConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetHealthConditionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetHealthConditionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetHealthConditionsResponse)));
        }

        /// <summary>
        /// Calculate health conditions of an asset Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. Possible include values: &#x60;&#x60;asset_status,causes,causes.remedies&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="protocol">Filter accepts &#x27;PROFIBUS&#x27;, &#x27;HART&#x27;, &#x27;ETHERNETIP&#x27; or &#x27;MODBUS&#x27;</param>
        /// <param name="diagnosisMessage">diagnosis message of an asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="protocolVersion">definition of the protocol version. For example 5, 6 or 7 for HART (optional)</param>
        /// <param name="deviceIdent">device_ident of the asset (optional)</param>
        /// <param name="productIdentifier">product_identifier of the asset (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of AssetHealthConditionsResponse</returns>
        public async System.Threading.Tasks.Task<AssetHealthConditionsResponse> CalculateAssetHealthConditionsAsync (long? assetId, string protocol, string diagnosisMessage, int? page = null, int? perPage = null, string include = null, string protocolVersion = null, string deviceIdent = null, string productIdentifier = null, string acceptLanguage = null)
        {
             ApiResponse<AssetHealthConditionsResponse> localVarResponse = await CalculateAssetHealthConditionsAsyncWithHttpInfo(assetId, protocol, diagnosisMessage, page, perPage, include, protocolVersion, deviceIdent, productIdentifier, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate health conditions of an asset Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. Possible include values: &#x60;&#x60;asset_status,causes,causes.remedies&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="protocol">Filter accepts &#x27;PROFIBUS&#x27;, &#x27;HART&#x27;, &#x27;ETHERNETIP&#x27; or &#x27;MODBUS&#x27;</param>
        /// <param name="diagnosisMessage">diagnosis message of an asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="protocolVersion">definition of the protocol version. For example 5, 6 or 7 for HART (optional)</param>
        /// <param name="deviceIdent">device_ident of the asset (optional)</param>
        /// <param name="productIdentifier">product_identifier of the asset (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (AssetHealthConditionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetHealthConditionsResponse>> CalculateAssetHealthConditionsAsyncWithHttpInfo (long? assetId, string protocol, string diagnosisMessage, int? page = null, int? perPage = null, string include = null, string protocolVersion = null, string deviceIdent = null, string productIdentifier = null, string acceptLanguage = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->CalculateAssetHealthConditions");
            // verify the required parameter 'protocol' is set
            if (protocol == null)
                throw new ApiException(400, "Missing required parameter 'protocol' when calling AssetHealthConditionApi->CalculateAssetHealthConditions");
            // verify the required parameter 'diagnosisMessage' is set
            if (diagnosisMessage == null)
                throw new ApiException(400, "Missing required parameter 'diagnosisMessage' when calling AssetHealthConditionApi->CalculateAssetHealthConditions");

            var localVarPath = "/assets/{asset_id}/health_conditions/calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (protocol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocol", protocol)); // query parameter
            if (protocolVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocol_version", protocolVersion)); // query parameter
            if (diagnosisMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "diagnosis_message", diagnosisMessage)); // query parameter
            if (deviceIdent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_ident", deviceIdent)); // query parameter
            if (productIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_identifier", productIdentifier)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateAssetHealthConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetHealthConditionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetHealthConditionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetHealthConditionsResponse)));
        }

        /// <summary>
        /// Calculate health conditions of an asset and update asset with this health conditions Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. The asset will be automatically updated with the result.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns></returns>
        public void CalculateAssetHealthConditionsAndUpdateAsset (AssetHealthConditionsCalculateRequest body, long? assetId)
        {
             CalculateAssetHealthConditionsAndUpdateAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Calculate health conditions of an asset and update asset with this health conditions Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. The asset will be automatically updated with the result.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CalculateAssetHealthConditionsAndUpdateAssetWithHttpInfo (AssetHealthConditionsCalculateRequest body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetHealthConditionApi->CalculateAssetHealthConditionsAndUpdateAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->CalculateAssetHealthConditionsAndUpdateAsset");

            var localVarPath = "/assets/{asset_id}/health_conditions/calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateAssetHealthConditionsAndUpdateAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Calculate health conditions of an asset and update asset with this health conditions Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. The asset will be automatically updated with the result.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CalculateAssetHealthConditionsAndUpdateAssetAsync (AssetHealthConditionsCalculateRequest body, long? assetId)
        {
             await CalculateAssetHealthConditionsAndUpdateAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Calculate health conditions of an asset and update asset with this health conditions Calculates the health conditions of an asset defined by the given diagnosis message, protocol and device ident. The asset will be automatically updated with the result.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CalculateAssetHealthConditionsAndUpdateAssetAsyncWithHttpInfo (AssetHealthConditionsCalculateRequest body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetHealthConditionApi->CalculateAssetHealthConditionsAndUpdateAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->CalculateAssetHealthConditionsAndUpdateAsset");

            var localVarPath = "/assets/{asset_id}/health_conditions/calculate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateAssetHealthConditionsAndUpdateAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get all health conditions assigned to an asset Returns a list of health conditions of an asset.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="assetStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>AssetHealthConditionsResponse</returns>
        public AssetHealthConditionsResponse GetAssetHealthConditions (long? assetId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string assetStatusId = null, string acceptLanguage = null)
        {
             ApiResponse<AssetHealthConditionsResponse> localVarResponse = GetAssetHealthConditionsWithHttpInfo(assetId, page, perPage, include, healthConditionId, diagnosisCode, assetStatusId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all health conditions assigned to an asset Returns a list of health conditions of an asset.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="assetStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of AssetHealthConditionsResponse</returns>
        public ApiResponse< AssetHealthConditionsResponse > GetAssetHealthConditionsWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string assetStatusId = null, string acceptLanguage = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->GetAssetHealthConditions");

            var localVarPath = "/assets/{asset_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (healthConditionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "health_condition_id", healthConditionId)); // query parameter
            if (diagnosisCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "diagnosis_code", diagnosisCode)); // query parameter
            if (assetStatusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset_status_id", assetStatusId)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetHealthConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetHealthConditionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetHealthConditionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetHealthConditionsResponse)));
        }

        /// <summary>
        /// Get all health conditions assigned to an asset Returns a list of health conditions of an asset.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="assetStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of AssetHealthConditionsResponse</returns>
        public async System.Threading.Tasks.Task<AssetHealthConditionsResponse> GetAssetHealthConditionsAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string assetStatusId = null, string acceptLanguage = null)
        {
             ApiResponse<AssetHealthConditionsResponse> localVarResponse = await GetAssetHealthConditionsAsyncWithHttpInfo(assetId, page, perPage, include, healthConditionId, diagnosisCode, assetStatusId, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all health conditions assigned to an asset Returns a list of health conditions of an asset.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="assetStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (AssetHealthConditionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetHealthConditionsResponse>> GetAssetHealthConditionsAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string assetStatusId = null, string acceptLanguage = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->GetAssetHealthConditions");

            var localVarPath = "/assets/{asset_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (healthConditionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "health_condition_id", healthConditionId)); // query parameter
            if (diagnosisCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "diagnosis_code", diagnosisCode)); // query parameter
            if (assetStatusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset_status_id", assetStatusId)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetHealthConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetHealthConditionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetHealthConditionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetHealthConditionsResponse)));
        }

        /// <summary>
        /// Get all health_conditions historical evolution the given asset had assigned Returns a list of all health_conditions available in your scope of an asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="from">Start date filter for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;created_datetime&#x60; or &#x60;deleted_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>AssetHealthConditionsTimemachineResponse</returns>
        public AssetHealthConditionsTimemachineResponse GetHealthConditionsOfAssetTimemachine (long? assetId, int? page = null, int? perPage = null, DateTime? from = null, DateTime? to = null, string orderBy = null)
        {
             ApiResponse<AssetHealthConditionsTimemachineResponse> localVarResponse = GetHealthConditionsOfAssetTimemachineWithHttpInfo(assetId, page, perPage, from, to, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all health_conditions historical evolution the given asset had assigned Returns a list of all health_conditions available in your scope of an asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="from">Start date filter for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;created_datetime&#x60; or &#x60;deleted_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>ApiResponse of AssetHealthConditionsTimemachineResponse</returns>
        public ApiResponse< AssetHealthConditionsTimemachineResponse > GetHealthConditionsOfAssetTimemachineWithHttpInfo (long? assetId, int? page = null, int? perPage = null, DateTime? from = null, DateTime? to = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->GetHealthConditionsOfAssetTimemachine");

            var localVarPath = "/assets/{asset_id}/health_conditions/timemachine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHealthConditionsOfAssetTimemachine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetHealthConditionsTimemachineResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetHealthConditionsTimemachineResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetHealthConditionsTimemachineResponse)));
        }

        /// <summary>
        /// Get all health_conditions historical evolution the given asset had assigned Returns a list of all health_conditions available in your scope of an asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="from">Start date filter for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;created_datetime&#x60; or &#x60;deleted_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of AssetHealthConditionsTimemachineResponse</returns>
        public async System.Threading.Tasks.Task<AssetHealthConditionsTimemachineResponse> GetHealthConditionsOfAssetTimemachineAsync (long? assetId, int? page = null, int? perPage = null, DateTime? from = null, DateTime? to = null, string orderBy = null)
        {
             ApiResponse<AssetHealthConditionsTimemachineResponse> localVarResponse = await GetHealthConditionsOfAssetTimemachineAsyncWithHttpInfo(assetId, page, perPage, from, to, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all health_conditions historical evolution the given asset had assigned Returns a list of all health_conditions available in your scope of an asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="from">Start date filter for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;created_datetime&#x60; or &#x60;deleted_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of ApiResponse (AssetHealthConditionsTimemachineResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetHealthConditionsTimemachineResponse>> GetHealthConditionsOfAssetTimemachineAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, DateTime? from = null, DateTime? to = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->GetHealthConditionsOfAssetTimemachine");

            var localVarPath = "/assets/{asset_id}/health_conditions/timemachine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHealthConditionsOfAssetTimemachine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetHealthConditionsTimemachineResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetHealthConditionsTimemachineResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetHealthConditionsTimemachineResponse)));
        }

        /// <summary>
        /// Replace health conditions of an asset Replaces all health conditions belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns></returns>
        public void ReaplaceHealthConditionsOfAsset (AssetHealthConditionsRequest body, long? assetId)
        {
             ReaplaceHealthConditionsOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Replace health conditions of an asset Replaces all health conditions belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReaplaceHealthConditionsOfAssetWithHttpInfo (AssetHealthConditionsRequest body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetHealthConditionApi->ReaplaceHealthConditionsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->ReaplaceHealthConditionsOfAsset");

            var localVarPath = "/assets/{asset_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReaplaceHealthConditionsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace health conditions of an asset Replaces all health conditions belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReaplaceHealthConditionsOfAssetAsync (AssetHealthConditionsRequest body, long? assetId)
        {
             await ReaplaceHealthConditionsOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Replace health conditions of an asset Replaces all health conditions belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReaplaceHealthConditionsOfAssetAsyncWithHttpInfo (AssetHealthConditionsRequest body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetHealthConditionApi->ReaplaceHealthConditionsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->ReaplaceHealthConditionsOfAsset");

            var localVarPath = "/assets/{asset_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReaplaceHealthConditionsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove health conditions of an asset Remove one or more health conditions from an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns></returns>
        public void RemoveHealthConditionsOfAsset (AssetHealthConditionsRequest body, long? assetId)
        {
             RemoveHealthConditionsOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Remove health conditions of an asset Remove one or more health conditions from an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveHealthConditionsOfAssetWithHttpInfo (AssetHealthConditionsRequest body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetHealthConditionApi->RemoveHealthConditionsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->RemoveHealthConditionsOfAsset");

            var localVarPath = "/assets/{asset_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveHealthConditionsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove health conditions of an asset Remove one or more health conditions from an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveHealthConditionsOfAssetAsync (AssetHealthConditionsRequest body, long? assetId)
        {
             await RemoveHealthConditionsOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Remove health conditions of an asset Remove one or more health conditions from an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveHealthConditionsOfAssetAsyncWithHttpInfo (AssetHealthConditionsRequest body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetHealthConditionApi->RemoveHealthConditionsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetHealthConditionApi->RemoveHealthConditionsOfAsset");

            var localVarPath = "/assets/{asset_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveHealthConditionsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
