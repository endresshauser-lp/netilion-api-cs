/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Netilion.Api.Client;
using Netilion.Api.Model;

namespace Netilion.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IClientApplicationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add client applications to an edge device application
        /// </summary>
        /// <remarks>
        /// Add one or more client applications to an edge device application. This action requires the edge device admin role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application to which the client applications will be added</param>
        /// <returns></returns>
        void AddClientApplicationsToEdgeApplication (ClientApplicationIDs body, long? edgeDeviceApplicationId);

        /// <summary>
        /// Add client applications to an edge device application
        /// </summary>
        /// <remarks>
        /// Add one or more client applications to an edge device application. This action requires the edge device admin role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application to which the client applications will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddClientApplicationsToEdgeApplicationWithHttpInfo (ClientApplicationIDs body, long? edgeDeviceApplicationId);
        /// <summary>
        /// Add Technical Users of Client Application
        /// </summary>
        /// <remarks>
        /// Creates a new technical user for a client application. Email (username) and password is automatically generated and can not be defined. The generated username and password are part of the response (password can not be later received again but can be changed via password_reset endpoint of technical user). 
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <returns>TechnicalUserCreateResponse</returns>
        TechnicalUserCreateResponse AddTechnicalUsersToClientApplication (long? clientApplicationId);

        /// <summary>
        /// Add Technical Users of Client Application
        /// </summary>
        /// <remarks>
        /// Creates a new technical user for a client application. Email (username) and password is automatically generated and can not be defined. The generated username and password are part of the response (password can not be later received again but can be changed via password_reset endpoint of technical user). 
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <returns>ApiResponse of TechnicalUserCreateResponse</returns>
        ApiResponse<TechnicalUserCreateResponse> AddTechnicalUsersToClientApplicationWithHttpInfo (long? clientApplicationId);
        /// <summary>
        /// Add users to a client application user role
        /// </summary>
        /// <remarks>
        /// Add one or more users to a user role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns></returns>
        void AddUsersToClientApplicationUserRole (UserIDs body, long? clientApplicationId, long? userroleId);

        /// <summary>
        /// Add users to a client application user role
        /// </summary>
        /// <remarks>
        /// Add one or more users to a user role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddUsersToClientApplicationUserRoleWithHttpInfo (UserIDs body, long? clientApplicationId, long? userroleId);
        /// <summary>
        /// Create a new client_application
        /// </summary>
        /// <remarks>
        /// Create a new client_application.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ClientApplication object that needs to be created. name and contact_person are required.</param>
        /// <returns>ClientApplicationResponse</returns>
        ClientApplicationResponse CreateClientApplication (ClientApplicationRequest body);

        /// <summary>
        /// Create a new client_application
        /// </summary>
        /// <remarks>
        /// Create a new client_application.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ClientApplication object that needs to be created. name and contact_person are required.</param>
        /// <returns>ApiResponse of ClientApplicationResponse</returns>
        ApiResponse<ClientApplicationResponse> CreateClientApplicationWithHttpInfo (ClientApplicationRequest body);
        /// <summary>
        /// Create a new webhook for the Client Application
        /// </summary>
        /// <remarks>
        /// Create a new web hook to the client application.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook object that needs to be created. url and event_types are required.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <returns>WebhookCreateResponse</returns>
        WebhookCreateResponse CreateWebhookToClientApplication (WebhookRequest body, long? clientApplicationId);

        /// <summary>
        /// Create a new webhook for the Client Application
        /// </summary>
        /// <remarks>
        /// Create a new web hook to the client application.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook object that needs to be created. url and event_types are required.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <returns>ApiResponse of WebhookCreateResponse</returns>
        ApiResponse<WebhookCreateResponse> CreateWebhookToClientApplicationWithHttpInfo (WebhookRequest body, long? clientApplicationId);
        /// <summary>
        /// Delete an client_application
        /// </summary>
        /// <remarks>
        /// Delete a specific resource in your accessible scope, identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to delete</param>
        /// <returns></returns>
        void DeleteClientApplication (long? id);

        /// <summary>
        /// Delete an client_application
        /// </summary>
        /// <remarks>
        /// Delete a specific resource in your accessible scope, identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteClientApplicationWithHttpInfo (long? id);
        /// <summary>
        /// Remove users from a client application user role
        /// </summary>
        /// <remarks>
        /// Remove one or more users from an user role. To work with roles, admin role is required.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns></returns>
        void DeleteUsersFromClientApplicationUserRole (UserIDs body, long? clientApplicationId, long? userroleId);

        /// <summary>
        /// Remove users from a client application user role
        /// </summary>
        /// <remarks>
        /// Remove one or more users from an user role. To work with roles, admin role is required.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUsersFromClientApplicationUserRoleWithHttpInfo (UserIDs body, long? clientApplicationId, long? userroleId);
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to update</param>
        /// <param name="id">Id of the webhook to delete</param>
        /// <returns></returns>
        void DeleteWebhook (long? clientApplicationId, long? id);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to update</param>
        /// <param name="id">Id of the webhook to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookWithHttpInfo (long? clientApplicationId, long? id);
        /// <summary>
        /// GetAPI Keys of Client Application
        /// </summary>
        /// <remarks>
        /// Returns a list of api_keys of an client application. If the query has no matches, the response is an empty list. Only api_keys on which the user has the can_read permission are loaded.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="apiKey">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ClientApplicationResponse</returns>
        ClientApplicationResponse GetAPIKeysOfClientApplication (long? clientApplicationId, int? page = null, int? perPage = null, string apiKey = null, DateTime? validFrom = null, DateTime? validFromFrom = null, DateTime? validFromTo = null, DateTime? validUntil = null, DateTime? validUntilFrom = null, DateTime? validUntilTo = null, string orderBy = null);

        /// <summary>
        /// GetAPI Keys of Client Application
        /// </summary>
        /// <remarks>
        /// Returns a list of api_keys of an client application. If the query has no matches, the response is an empty list. Only api_keys on which the user has the can_read permission are loaded.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="apiKey">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of ClientApplicationResponse</returns>
        ApiResponse<ClientApplicationResponse> GetAPIKeysOfClientApplicationWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string apiKey = null, DateTime? validFrom = null, DateTime? validFromFrom = null, DateTime? validFromTo = null, DateTime? validUntil = null, DateTime? validUntilFrom = null, DateTime? validUntilTo = null, string orderBy = null);
        /// <summary>
        /// Get a single client_application
        /// </summary>
        /// <remarks>
        /// Get a specific client_application in your accessible scope, identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ClientApplicationResponse</returns>
        ClientApplicationResponse GetClientApplicationById (long? id, string include = null);

        /// <summary>
        /// Get a single client_application
        /// </summary>
        /// <remarks>
        /// Get a specific client_application in your accessible scope, identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ApiResponse of ClientApplicationResponse</returns>
        ApiResponse<ClientApplicationResponse> GetClientApplicationByIdWithHttpInfo (long? id, string include = null);
        /// <summary>
        /// Get a range of client_applications
        /// </summary>
        /// <remarks>
        /// Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ClientApplicationsResponse</returns>
        ClientApplicationsResponse GetClientApplications (int? page = null, int? perPage = null, string include = null, string name = null, string contactPersonId = null, string orderBy = null);

        /// <summary>
        /// Get a range of client_applications
        /// </summary>
        /// <remarks>
        /// Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of ClientApplicationsResponse</returns>
        ApiResponse<ClientApplicationsResponse> GetClientApplicationsWithHttpInfo (int? page = null, int? perPage = null, string include = null, string name = null, string contactPersonId = null, string orderBy = null);
        /// <summary>
        /// Get all client applications of one edge device application
        /// </summary>
        /// <remarks>
        /// Returns a list of all client applications associated with the selected edge device application. Possible include values: &#x60;&#x60;&#x60;technical_user&#x60;&#x60;&#x60; You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeDeviceApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ClientApplicationsResponse</returns>
        ClientApplicationsResponse GetClientApplicationsOfEdgeDeviceApplication (long? edgeDeviceApplicationId, int? page = null, int? perPage = null, string include = null, string name = null, string code = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get all client applications of one edge device application
        /// </summary>
        /// <remarks>
        /// Returns a list of all client applications associated with the selected edge device application. Possible include values: &#x60;&#x60;&#x60;technical_user&#x60;&#x60;&#x60; You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeDeviceApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of ClientApplicationsResponse</returns>
        ApiResponse<ClientApplicationsResponse> GetClientApplicationsOfEdgeDeviceApplicationWithHttpInfo (long? edgeDeviceApplicationId, int? page = null, int? perPage = null, string include = null, string name = null, string code = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Get current client_application
        /// </summary>
        /// <remarks>
        /// Returns current client application used to access the api.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ClientApplicationPublicResponse</returns>
        ClientApplicationPublicResponse GetCurrentClientApplication ();

        /// <summary>
        /// Get current client_application
        /// </summary>
        /// <remarks>
        /// Returns current client application used to access the api.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ClientApplicationPublicResponse</returns>
        ApiResponse<ClientApplicationPublicResponse> GetCurrentClientApplicationWithHttpInfo ();
        /// <summary>
        /// Get all edge devices applications for an client application
        /// </summary>
        /// <remarks>
        /// Returns a list of all edge devices applications of an client application. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">id of the client application to fetch</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="edgeDeviceTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="softwareVersionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>EdgeDeviceApplicationsResponse</returns>
        EdgeDeviceApplicationsResponse GetEdgeDeviceApplicationsOfClientApplication (long? clientApplicationId, int? page = null, int? perPage = null, string name = null, string code = null, string edgeDeviceTypeId = null, string softwareVersionId = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get all edge devices applications for an client application
        /// </summary>
        /// <remarks>
        /// Returns a list of all edge devices applications of an client application. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">id of the client application to fetch</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="edgeDeviceTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="softwareVersionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of EdgeDeviceApplicationsResponse</returns>
        ApiResponse<EdgeDeviceApplicationsResponse> GetEdgeDeviceApplicationsOfClientApplicationWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string name = null, string code = null, string edgeDeviceTypeId = null, string softwareVersionId = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Get Technical Users of Client Application
        /// </summary>
        /// <remarks>
        /// Returns a list of technical of an client application. If the query has no matches, the response is an empty list
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="email">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>TechnicalUsersResponse</returns>
        TechnicalUsersResponse GetTechnicalUsersOfClientApplication (long? clientApplicationId, int? page = null, int? perPage = null, string email = null, string orderBy = null);

        /// <summary>
        /// Get Technical Users of Client Application
        /// </summary>
        /// <remarks>
        /// Returns a list of technical of an client application. If the query has no matches, the response is an empty list
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="email">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of TechnicalUsersResponse</returns>
        ApiResponse<TechnicalUsersResponse> GetTechnicalUsersOfClientApplicationWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string email = null, string orderBy = null);
        /// <summary>
        /// Get all users of a user role assigned to a client application
        /// </summary>
        /// <remarks>
        /// Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="firstName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="lastName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>UsersPublicResponse</returns>
        UsersPublicResponse GetUsersOfClientApplicationUserRole (long? clientApplicationId, long? userroleId, int? page = null, int? perPage = null, string firstName = null, string lastName = null, string orderBy = null);

        /// <summary>
        /// Get all users of a user role assigned to a client application
        /// </summary>
        /// <remarks>
        /// Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="firstName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="lastName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of UsersPublicResponse</returns>
        ApiResponse<UsersPublicResponse> GetUsersOfClientApplicationUserRoleWithHttpInfo (long? clientApplicationId, long? userroleId, int? page = null, int? perPage = null, string firstName = null, string lastName = null, string orderBy = null);
        /// <summary>
        /// Get a single webhook
        /// </summary>
        /// <remarks>
        /// Get a specific webhook identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to fetch</param>
        /// <param name="id">Id of the webhook to fetch</param>
        /// <returns>WebhookResponse</returns>
        WebhookResponse GetWebhookById (long? clientApplicationId, long? id);

        /// <summary>
        /// Get a single webhook
        /// </summary>
        /// <remarks>
        /// Get a specific webhook identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to fetch</param>
        /// <param name="id">Id of the webhook to fetch</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        ApiResponse<WebhookResponse> GetWebhookByIdWithHttpInfo (long? clientApplicationId, long? id);
        /// <summary>
        /// Get events of a webhook
        /// </summary>
        /// <remarks>
        /// Get webhook events. Events are the messages that are send to the webhok URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="eventType">Filter by event type - no wildcard support (optional)</param>
        /// <param name="occurredAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="occurredAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="occurredAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>WebhookEventResponses</returns>
        WebhookEventResponses GetWebhookEvents (long? clientApplicationId, long? id, int? page = null, int? perPage = null, string status = null, string eventType = null, DateTime? occurredAt = null, string occurredAtFrom = null, string occurredAtTo = null, string orderBy = null);

        /// <summary>
        /// Get events of a webhook
        /// </summary>
        /// <remarks>
        /// Get webhook events. Events are the messages that are send to the webhok URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="eventType">Filter by event type - no wildcard support (optional)</param>
        /// <param name="occurredAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="occurredAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="occurredAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of WebhookEventResponses</returns>
        ApiResponse<WebhookEventResponses> GetWebhookEventsWithHttpInfo (long? clientApplicationId, long? id, int? page = null, int? perPage = null, string status = null, string eventType = null, DateTime? occurredAt = null, string occurredAtFrom = null, string occurredAtTo = null, string orderBy = null);
        /// <summary>
        /// Get webhooks of Client Application
        /// </summary>
        /// <remarks>
        /// Returns a list of webhooks of an client application. If the query has no matches, the response is an empty list. Only webhooks on which the user has the can_read permission are loaded.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>WebhookResponses</returns>
        WebhookResponses GetWebhooksOfClientApplication (long? clientApplicationId, int? page = null, int? perPage = null, string orderBy = null);

        /// <summary>
        /// Get webhooks of Client Application
        /// </summary>
        /// <remarks>
        /// Returns a list of webhooks of an client application. If the query has no matches, the response is an empty list. Only webhooks on which the user has the can_read permission are loaded.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of WebhookResponses</returns>
        ApiResponse<WebhookResponses> GetWebhooksOfClientApplicationWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string orderBy = null);
        /// <summary>
        /// Remove client applications from an edge device application
        /// </summary>
        /// <remarks>
        /// Remove one or more client applications from an edge device application. This action requires the edge device admin role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application from which the client applications will be removed</param>
        /// <returns></returns>
        void RemoveClientApplicationsOfEdgeDeviceApplication (ClientApplicationIDs body, long? edgeDeviceApplicationId);

        /// <summary>
        /// Remove client applications from an edge device application
        /// </summary>
        /// <remarks>
        /// Remove one or more client applications from an edge device application. This action requires the edge device admin role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application from which the client applications will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveClientApplicationsOfEdgeDeviceApplicationWithHttpInfo (ClientApplicationIDs body, long? edgeDeviceApplicationId);
        /// <summary>
        /// Replace the client applications of an edge device application
        /// </summary>
        /// <remarks>
        /// Replaces all client applications belonging to an edge device application. You can send a list of resources that will replace all previous values. This action requires the edge device admin role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application of which the client applications will be replaced</param>
        /// <returns></returns>
        void ReplaceClientApplicationsOfEdgeDeviceApplication (ClientApplicationIDs body, long? edgeDeviceApplicationId);

        /// <summary>
        /// Replace the client applications of an edge device application
        /// </summary>
        /// <remarks>
        /// Replaces all client applications belonging to an edge device application. You can send a list of resources that will replace all previous values. This action requires the edge device admin role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application of which the client applications will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceClientApplicationsOfEdgeDeviceApplicationWithHttpInfo (ClientApplicationIDs body, long? edgeDeviceApplicationId);
        /// <summary>
        /// resend Webhook Events
        /// </summary>
        /// <remarks>
        /// Trigger the resend of webhook events
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ids of the events that should be resend. Events that are currently in state pending are ignored are required.</param>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <returns></returns>
        void ResendWebhookEvents (WebhookEventIDs body, long? clientApplicationId, long? id);

        /// <summary>
        /// resend Webhook Events
        /// </summary>
        /// <remarks>
        /// Trigger the resend of webhook events
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ids of the events that should be resend. Events that are currently in state pending are ignored are required.</param>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResendWebhookEventsWithHttpInfo (WebhookEventIDs body, long? clientApplicationId, long? id);
        /// <summary>
        /// Reset the secret property of the webhook
        /// </summary>
        /// <remarks>
        /// Reset the secret property of the webhook
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>WebhookSecretResponse</returns>
        WebhookSecretResponse ResetSecretWebhook (long? clientApplicationId, long? id);

        /// <summary>
        /// Reset the secret property of the webhook
        /// </summary>
        /// <remarks>
        /// Reset the secret property of the webhook
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>ApiResponse of WebhookSecretResponse</returns>
        ApiResponse<WebhookSecretResponse> ResetSecretWebhookWithHttpInfo (long? clientApplicationId, long? id);
        /// <summary>
        /// Update an client_application
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource in your accessible scope.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the client_application to update</param>
        /// <returns></returns>
        void UpdateClientApplication (ClientApplicationRequest body, long? id);

        /// <summary>
        /// Update an client_application
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource in your accessible scope.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the client_application to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateClientApplicationWithHttpInfo (ClientApplicationRequest body, long? id);
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource in your accessible scope.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns></returns>
        void UpdateWebhook (WebhookRequest body, long? clientApplicationId, long? id);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource in your accessible scope.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWebhookWithHttpInfo (WebhookRequest body, long? clientApplicationId, long? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add client applications to an edge device application
        /// </summary>
        /// <remarks>
        /// Add one or more client applications to an edge device application. This action requires the edge device admin role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application to which the client applications will be added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddClientApplicationsToEdgeApplicationAsync (ClientApplicationIDs body, long? edgeDeviceApplicationId);

        /// <summary>
        /// Add client applications to an edge device application
        /// </summary>
        /// <remarks>
        /// Add one or more client applications to an edge device application. This action requires the edge device admin role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application to which the client applications will be added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddClientApplicationsToEdgeApplicationAsyncWithHttpInfo (ClientApplicationIDs body, long? edgeDeviceApplicationId);
        /// <summary>
        /// Add Technical Users of Client Application
        /// </summary>
        /// <remarks>
        /// Creates a new technical user for a client application. Email (username) and password is automatically generated and can not be defined. The generated username and password are part of the response (password can not be later received again but can be changed via password_reset endpoint of technical user). 
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <returns>Task of TechnicalUserCreateResponse</returns>
        System.Threading.Tasks.Task<TechnicalUserCreateResponse> AddTechnicalUsersToClientApplicationAsync (long? clientApplicationId);

        /// <summary>
        /// Add Technical Users of Client Application
        /// </summary>
        /// <remarks>
        /// Creates a new technical user for a client application. Email (username) and password is automatically generated and can not be defined. The generated username and password are part of the response (password can not be later received again but can be changed via password_reset endpoint of technical user). 
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse (TechnicalUserCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TechnicalUserCreateResponse>> AddTechnicalUsersToClientApplicationAsyncWithHttpInfo (long? clientApplicationId);
        /// <summary>
        /// Add users to a client application user role
        /// </summary>
        /// <remarks>
        /// Add one or more users to a user role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddUsersToClientApplicationUserRoleAsync (UserIDs body, long? clientApplicationId, long? userroleId);

        /// <summary>
        /// Add users to a client application user role
        /// </summary>
        /// <remarks>
        /// Add one or more users to a user role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddUsersToClientApplicationUserRoleAsyncWithHttpInfo (UserIDs body, long? clientApplicationId, long? userroleId);
        /// <summary>
        /// Create a new client_application
        /// </summary>
        /// <remarks>
        /// Create a new client_application.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ClientApplication object that needs to be created. name and contact_person are required.</param>
        /// <returns>Task of ClientApplicationResponse</returns>
        System.Threading.Tasks.Task<ClientApplicationResponse> CreateClientApplicationAsync (ClientApplicationRequest body);

        /// <summary>
        /// Create a new client_application
        /// </summary>
        /// <remarks>
        /// Create a new client_application.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ClientApplication object that needs to be created. name and contact_person are required.</param>
        /// <returns>Task of ApiResponse (ClientApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientApplicationResponse>> CreateClientApplicationAsyncWithHttpInfo (ClientApplicationRequest body);
        /// <summary>
        /// Create a new webhook for the Client Application
        /// </summary>
        /// <remarks>
        /// Create a new web hook to the client application.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook object that needs to be created. url and event_types are required.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <returns>Task of WebhookCreateResponse</returns>
        System.Threading.Tasks.Task<WebhookCreateResponse> CreateWebhookToClientApplicationAsync (WebhookRequest body, long? clientApplicationId);

        /// <summary>
        /// Create a new webhook for the Client Application
        /// </summary>
        /// <remarks>
        /// Create a new web hook to the client application.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook object that needs to be created. url and event_types are required.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <returns>Task of ApiResponse (WebhookCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookCreateResponse>> CreateWebhookToClientApplicationAsyncWithHttpInfo (WebhookRequest body, long? clientApplicationId);
        /// <summary>
        /// Delete an client_application
        /// </summary>
        /// <remarks>
        /// Delete a specific resource in your accessible scope, identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteClientApplicationAsync (long? id);

        /// <summary>
        /// Delete an client_application
        /// </summary>
        /// <remarks>
        /// Delete a specific resource in your accessible scope, identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientApplicationAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Remove users from a client application user role
        /// </summary>
        /// <remarks>
        /// Remove one or more users from an user role. To work with roles, admin role is required.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUsersFromClientApplicationUserRoleAsync (UserIDs body, long? clientApplicationId, long? userroleId);

        /// <summary>
        /// Remove users from a client application user role
        /// </summary>
        /// <remarks>
        /// Remove one or more users from an user role. To work with roles, admin role is required.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUsersFromClientApplicationUserRoleAsyncWithHttpInfo (UserIDs body, long? clientApplicationId, long? userroleId);
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to update</param>
        /// <param name="id">Id of the webhook to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookAsync (long? clientApplicationId, long? id);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to update</param>
        /// <param name="id">Id of the webhook to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookAsyncWithHttpInfo (long? clientApplicationId, long? id);
        /// <summary>
        /// GetAPI Keys of Client Application
        /// </summary>
        /// <remarks>
        /// Returns a list of api_keys of an client application. If the query has no matches, the response is an empty list. Only api_keys on which the user has the can_read permission are loaded.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="apiKey">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ClientApplicationResponse</returns>
        System.Threading.Tasks.Task<ClientApplicationResponse> GetAPIKeysOfClientApplicationAsync (long? clientApplicationId, int? page = null, int? perPage = null, string apiKey = null, DateTime? validFrom = null, DateTime? validFromFrom = null, DateTime? validFromTo = null, DateTime? validUntil = null, DateTime? validUntilFrom = null, DateTime? validUntilTo = null, string orderBy = null);

        /// <summary>
        /// GetAPI Keys of Client Application
        /// </summary>
        /// <remarks>
        /// Returns a list of api_keys of an client application. If the query has no matches, the response is an empty list. Only api_keys on which the user has the can_read permission are loaded.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="apiKey">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ClientApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientApplicationResponse>> GetAPIKeysOfClientApplicationAsyncWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string apiKey = null, DateTime? validFrom = null, DateTime? validFromFrom = null, DateTime? validFromTo = null, DateTime? validUntil = null, DateTime? validUntilFrom = null, DateTime? validUntilTo = null, string orderBy = null);
        /// <summary>
        /// Get a single client_application
        /// </summary>
        /// <remarks>
        /// Get a specific client_application in your accessible scope, identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ClientApplicationResponse</returns>
        System.Threading.Tasks.Task<ClientApplicationResponse> GetClientApplicationByIdAsync (long? id, string include = null);

        /// <summary>
        /// Get a single client_application
        /// </summary>
        /// <remarks>
        /// Get a specific client_application in your accessible scope, identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ApiResponse (ClientApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientApplicationResponse>> GetClientApplicationByIdAsyncWithHttpInfo (long? id, string include = null);
        /// <summary>
        /// Get a range of client_applications
        /// </summary>
        /// <remarks>
        /// Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ClientApplicationsResponse</returns>
        System.Threading.Tasks.Task<ClientApplicationsResponse> GetClientApplicationsAsync (int? page = null, int? perPage = null, string include = null, string name = null, string contactPersonId = null, string orderBy = null);

        /// <summary>
        /// Get a range of client_applications
        /// </summary>
        /// <remarks>
        /// Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ClientApplicationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientApplicationsResponse>> GetClientApplicationsAsyncWithHttpInfo (int? page = null, int? perPage = null, string include = null, string name = null, string contactPersonId = null, string orderBy = null);
        /// <summary>
        /// Get all client applications of one edge device application
        /// </summary>
        /// <remarks>
        /// Returns a list of all client applications associated with the selected edge device application. Possible include values: &#x60;&#x60;&#x60;technical_user&#x60;&#x60;&#x60; You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeDeviceApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ClientApplicationsResponse</returns>
        System.Threading.Tasks.Task<ClientApplicationsResponse> GetClientApplicationsOfEdgeDeviceApplicationAsync (long? edgeDeviceApplicationId, int? page = null, int? perPage = null, string include = null, string name = null, string code = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get all client applications of one edge device application
        /// </summary>
        /// <remarks>
        /// Returns a list of all client applications associated with the selected edge device application. Possible include values: &#x60;&#x60;&#x60;technical_user&#x60;&#x60;&#x60; You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeDeviceApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (ClientApplicationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientApplicationsResponse>> GetClientApplicationsOfEdgeDeviceApplicationAsyncWithHttpInfo (long? edgeDeviceApplicationId, int? page = null, int? perPage = null, string include = null, string name = null, string code = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Get current client_application
        /// </summary>
        /// <remarks>
        /// Returns current client application used to access the api.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ClientApplicationPublicResponse</returns>
        System.Threading.Tasks.Task<ClientApplicationPublicResponse> GetCurrentClientApplicationAsync ();

        /// <summary>
        /// Get current client_application
        /// </summary>
        /// <remarks>
        /// Returns current client application used to access the api.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ClientApplicationPublicResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientApplicationPublicResponse>> GetCurrentClientApplicationAsyncWithHttpInfo ();
        /// <summary>
        /// Get all edge devices applications for an client application
        /// </summary>
        /// <remarks>
        /// Returns a list of all edge devices applications of an client application. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">id of the client application to fetch</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="edgeDeviceTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="softwareVersionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of EdgeDeviceApplicationsResponse</returns>
        System.Threading.Tasks.Task<EdgeDeviceApplicationsResponse> GetEdgeDeviceApplicationsOfClientApplicationAsync (long? clientApplicationId, int? page = null, int? perPage = null, string name = null, string code = null, string edgeDeviceTypeId = null, string softwareVersionId = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get all edge devices applications for an client application
        /// </summary>
        /// <remarks>
        /// Returns a list of all edge devices applications of an client application. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">id of the client application to fetch</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="edgeDeviceTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="softwareVersionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (EdgeDeviceApplicationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeDeviceApplicationsResponse>> GetEdgeDeviceApplicationsOfClientApplicationAsyncWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string name = null, string code = null, string edgeDeviceTypeId = null, string softwareVersionId = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Get Technical Users of Client Application
        /// </summary>
        /// <remarks>
        /// Returns a list of technical of an client application. If the query has no matches, the response is an empty list
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="email">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of TechnicalUsersResponse</returns>
        System.Threading.Tasks.Task<TechnicalUsersResponse> GetTechnicalUsersOfClientApplicationAsync (long? clientApplicationId, int? page = null, int? perPage = null, string email = null, string orderBy = null);

        /// <summary>
        /// Get Technical Users of Client Application
        /// </summary>
        /// <remarks>
        /// Returns a list of technical of an client application. If the query has no matches, the response is an empty list
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="email">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (TechnicalUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TechnicalUsersResponse>> GetTechnicalUsersOfClientApplicationAsyncWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string email = null, string orderBy = null);
        /// <summary>
        /// Get all users of a user role assigned to a client application
        /// </summary>
        /// <remarks>
        /// Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="firstName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="lastName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of UsersPublicResponse</returns>
        System.Threading.Tasks.Task<UsersPublicResponse> GetUsersOfClientApplicationUserRoleAsync (long? clientApplicationId, long? userroleId, int? page = null, int? perPage = null, string firstName = null, string lastName = null, string orderBy = null);

        /// <summary>
        /// Get all users of a user role assigned to a client application
        /// </summary>
        /// <remarks>
        /// Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="firstName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="lastName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (UsersPublicResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersPublicResponse>> GetUsersOfClientApplicationUserRoleAsyncWithHttpInfo (long? clientApplicationId, long? userroleId, int? page = null, int? perPage = null, string firstName = null, string lastName = null, string orderBy = null);
        /// <summary>
        /// Get a single webhook
        /// </summary>
        /// <remarks>
        /// Get a specific webhook identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to fetch</param>
        /// <param name="id">Id of the webhook to fetch</param>
        /// <returns>Task of WebhookResponse</returns>
        System.Threading.Tasks.Task<WebhookResponse> GetWebhookByIdAsync (long? clientApplicationId, long? id);

        /// <summary>
        /// Get a single webhook
        /// </summary>
        /// <remarks>
        /// Get a specific webhook identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to fetch</param>
        /// <param name="id">Id of the webhook to fetch</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> GetWebhookByIdAsyncWithHttpInfo (long? clientApplicationId, long? id);
        /// <summary>
        /// Get events of a webhook
        /// </summary>
        /// <remarks>
        /// Get webhook events. Events are the messages that are send to the webhok URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="eventType">Filter by event type - no wildcard support (optional)</param>
        /// <param name="occurredAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="occurredAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="occurredAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of WebhookEventResponses</returns>
        System.Threading.Tasks.Task<WebhookEventResponses> GetWebhookEventsAsync (long? clientApplicationId, long? id, int? page = null, int? perPage = null, string status = null, string eventType = null, DateTime? occurredAt = null, string occurredAtFrom = null, string occurredAtTo = null, string orderBy = null);

        /// <summary>
        /// Get events of a webhook
        /// </summary>
        /// <remarks>
        /// Get webhook events. Events are the messages that are send to the webhok URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="eventType">Filter by event type - no wildcard support (optional)</param>
        /// <param name="occurredAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="occurredAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="occurredAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (WebhookEventResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookEventResponses>> GetWebhookEventsAsyncWithHttpInfo (long? clientApplicationId, long? id, int? page = null, int? perPage = null, string status = null, string eventType = null, DateTime? occurredAt = null, string occurredAtFrom = null, string occurredAtTo = null, string orderBy = null);
        /// <summary>
        /// Get webhooks of Client Application
        /// </summary>
        /// <remarks>
        /// Returns a list of webhooks of an client application. If the query has no matches, the response is an empty list. Only webhooks on which the user has the can_read permission are loaded.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of WebhookResponses</returns>
        System.Threading.Tasks.Task<WebhookResponses> GetWebhooksOfClientApplicationAsync (long? clientApplicationId, int? page = null, int? perPage = null, string orderBy = null);

        /// <summary>
        /// Get webhooks of Client Application
        /// </summary>
        /// <remarks>
        /// Returns a list of webhooks of an client application. If the query has no matches, the response is an empty list. Only webhooks on which the user has the can_read permission are loaded.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (WebhookResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookResponses>> GetWebhooksOfClientApplicationAsyncWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string orderBy = null);
        /// <summary>
        /// Remove client applications from an edge device application
        /// </summary>
        /// <remarks>
        /// Remove one or more client applications from an edge device application. This action requires the edge device admin role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application from which the client applications will be removed</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveClientApplicationsOfEdgeDeviceApplicationAsync (ClientApplicationIDs body, long? edgeDeviceApplicationId);

        /// <summary>
        /// Remove client applications from an edge device application
        /// </summary>
        /// <remarks>
        /// Remove one or more client applications from an edge device application. This action requires the edge device admin role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application from which the client applications will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveClientApplicationsOfEdgeDeviceApplicationAsyncWithHttpInfo (ClientApplicationIDs body, long? edgeDeviceApplicationId);
        /// <summary>
        /// Replace the client applications of an edge device application
        /// </summary>
        /// <remarks>
        /// Replaces all client applications belonging to an edge device application. You can send a list of resources that will replace all previous values. This action requires the edge device admin role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application of which the client applications will be replaced</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceClientApplicationsOfEdgeDeviceApplicationAsync (ClientApplicationIDs body, long? edgeDeviceApplicationId);

        /// <summary>
        /// Replace the client applications of an edge device application
        /// </summary>
        /// <remarks>
        /// Replaces all client applications belonging to an edge device application. You can send a list of resources that will replace all previous values. This action requires the edge device admin role.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application of which the client applications will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceClientApplicationsOfEdgeDeviceApplicationAsyncWithHttpInfo (ClientApplicationIDs body, long? edgeDeviceApplicationId);
        /// <summary>
        /// resend Webhook Events
        /// </summary>
        /// <remarks>
        /// Trigger the resend of webhook events
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ids of the events that should be resend. Events that are currently in state pending are ignored are required.</param>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResendWebhookEventsAsync (WebhookEventIDs body, long? clientApplicationId, long? id);

        /// <summary>
        /// resend Webhook Events
        /// </summary>
        /// <remarks>
        /// Trigger the resend of webhook events
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ids of the events that should be resend. Events that are currently in state pending are ignored are required.</param>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResendWebhookEventsAsyncWithHttpInfo (WebhookEventIDs body, long? clientApplicationId, long? id);
        /// <summary>
        /// Reset the secret property of the webhook
        /// </summary>
        /// <remarks>
        /// Reset the secret property of the webhook
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>Task of WebhookSecretResponse</returns>
        System.Threading.Tasks.Task<WebhookSecretResponse> ResetSecretWebhookAsync (long? clientApplicationId, long? id);

        /// <summary>
        /// Reset the secret property of the webhook
        /// </summary>
        /// <remarks>
        /// Reset the secret property of the webhook
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>Task of ApiResponse (WebhookSecretResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookSecretResponse>> ResetSecretWebhookAsyncWithHttpInfo (long? clientApplicationId, long? id);
        /// <summary>
        /// Update an client_application
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource in your accessible scope.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the client_application to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateClientApplicationAsync (ClientApplicationRequest body, long? id);

        /// <summary>
        /// Update an client_application
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource in your accessible scope.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the client_application to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateClientApplicationAsyncWithHttpInfo (ClientApplicationRequest body, long? id);
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource in your accessible scope.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateWebhookAsync (WebhookRequest body, long? clientApplicationId, long? id);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource in your accessible scope.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWebhookAsyncWithHttpInfo (WebhookRequest body, long? clientApplicationId, long? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ClientApplicationApi : IClientApplicationApi
    {
        private Netilion.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientApplicationApi(String basePath)
        {
            this.Configuration = new Netilion.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApplicationApi"/> class
        /// </summary>
        /// <returns></returns>
        public ClientApplicationApi()
        {
            this.Configuration = Netilion.Api.Client.Configuration.Default;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApplicationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientApplicationApi(Netilion.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Netilion.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Netilion.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Netilion.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add client applications to an edge device application Add one or more client applications to an edge device application. This action requires the edge device admin role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application to which the client applications will be added</param>
        /// <returns></returns>
        public void AddClientApplicationsToEdgeApplication (ClientApplicationIDs body, long? edgeDeviceApplicationId)
        {
             AddClientApplicationsToEdgeApplicationWithHttpInfo(body, edgeDeviceApplicationId);
        }

        /// <summary>
        /// Add client applications to an edge device application Add one or more client applications to an edge device application. This action requires the edge device admin role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application to which the client applications will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddClientApplicationsToEdgeApplicationWithHttpInfo (ClientApplicationIDs body, long? edgeDeviceApplicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->AddClientApplicationsToEdgeApplication");
            // verify the required parameter 'edgeDeviceApplicationId' is set
            if (edgeDeviceApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'edgeDeviceApplicationId' when calling ClientApplicationApi->AddClientApplicationsToEdgeApplication");

            var localVarPath = "/edge_device/applications/{edge_device_application_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (edgeDeviceApplicationId != null) localVarPathParams.Add("edge_device_application_id", this.Configuration.ApiClient.ParameterToString(edgeDeviceApplicationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddClientApplicationsToEdgeApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add client applications to an edge device application Add one or more client applications to an edge device application. This action requires the edge device admin role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application to which the client applications will be added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddClientApplicationsToEdgeApplicationAsync (ClientApplicationIDs body, long? edgeDeviceApplicationId)
        {
             await AddClientApplicationsToEdgeApplicationAsyncWithHttpInfo(body, edgeDeviceApplicationId);

        }

        /// <summary>
        /// Add client applications to an edge device application Add one or more client applications to an edge device application. This action requires the edge device admin role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application to which the client applications will be added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddClientApplicationsToEdgeApplicationAsyncWithHttpInfo (ClientApplicationIDs body, long? edgeDeviceApplicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->AddClientApplicationsToEdgeApplication");
            // verify the required parameter 'edgeDeviceApplicationId' is set
            if (edgeDeviceApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'edgeDeviceApplicationId' when calling ClientApplicationApi->AddClientApplicationsToEdgeApplication");

            var localVarPath = "/edge_device/applications/{edge_device_application_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (edgeDeviceApplicationId != null) localVarPathParams.Add("edge_device_application_id", this.Configuration.ApiClient.ParameterToString(edgeDeviceApplicationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddClientApplicationsToEdgeApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add Technical Users of Client Application Creates a new technical user for a client application. Email (username) and password is automatically generated and can not be defined. The generated username and password are part of the response (password can not be later received again but can be changed via password_reset endpoint of technical user). 
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <returns>TechnicalUserCreateResponse</returns>
        public TechnicalUserCreateResponse AddTechnicalUsersToClientApplication (long? clientApplicationId)
        {
             ApiResponse<TechnicalUserCreateResponse> localVarResponse = AddTechnicalUsersToClientApplicationWithHttpInfo(clientApplicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Technical Users of Client Application Creates a new technical user for a client application. Email (username) and password is automatically generated and can not be defined. The generated username and password are part of the response (password can not be later received again but can be changed via password_reset endpoint of technical user). 
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <returns>ApiResponse of TechnicalUserCreateResponse</returns>
        public ApiResponse< TechnicalUserCreateResponse > AddTechnicalUsersToClientApplicationWithHttpInfo (long? clientApplicationId)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->AddTechnicalUsersToClientApplication");

            var localVarPath = "/client_applications/{client_application_id}/technical_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTechnicalUsersToClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TechnicalUserCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TechnicalUserCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TechnicalUserCreateResponse)));
        }

        /// <summary>
        /// Add Technical Users of Client Application Creates a new technical user for a client application. Email (username) and password is automatically generated and can not be defined. The generated username and password are part of the response (password can not be later received again but can be changed via password_reset endpoint of technical user). 
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <returns>Task of TechnicalUserCreateResponse</returns>
        public async System.Threading.Tasks.Task<TechnicalUserCreateResponse> AddTechnicalUsersToClientApplicationAsync (long? clientApplicationId)
        {
             ApiResponse<TechnicalUserCreateResponse> localVarResponse = await AddTechnicalUsersToClientApplicationAsyncWithHttpInfo(clientApplicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Technical Users of Client Application Creates a new technical user for a client application. Email (username) and password is automatically generated and can not be defined. The generated username and password are part of the response (password can not be later received again but can be changed via password_reset endpoint of technical user). 
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse (TechnicalUserCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TechnicalUserCreateResponse>> AddTechnicalUsersToClientApplicationAsyncWithHttpInfo (long? clientApplicationId)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->AddTechnicalUsersToClientApplication");

            var localVarPath = "/client_applications/{client_application_id}/technical_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTechnicalUsersToClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TechnicalUserCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TechnicalUserCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TechnicalUserCreateResponse)));
        }

        /// <summary>
        /// Add users to a client application user role Add one or more users to a user role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns></returns>
        public void AddUsersToClientApplicationUserRole (UserIDs body, long? clientApplicationId, long? userroleId)
        {
             AddUsersToClientApplicationUserRoleWithHttpInfo(body, clientApplicationId, userroleId);
        }

        /// <summary>
        /// Add users to a client application user role Add one or more users to a user role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddUsersToClientApplicationUserRoleWithHttpInfo (UserIDs body, long? clientApplicationId, long? userroleId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->AddUsersToClientApplicationUserRole");
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->AddUsersToClientApplicationUserRole");
            // verify the required parameter 'userroleId' is set
            if (userroleId == null)
                throw new ApiException(400, "Missing required parameter 'userroleId' when calling ClientApplicationApi->AddUsersToClientApplicationUserRole");

            var localVarPath = "/client_applications/{client_application_id}/roles/{userrole_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (userroleId != null) localVarPathParams.Add("userrole_id", this.Configuration.ApiClient.ParameterToString(userroleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUsersToClientApplicationUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add users to a client application user role Add one or more users to a user role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddUsersToClientApplicationUserRoleAsync (UserIDs body, long? clientApplicationId, long? userroleId)
        {
             await AddUsersToClientApplicationUserRoleAsyncWithHttpInfo(body, clientApplicationId, userroleId);

        }

        /// <summary>
        /// Add users to a client application user role Add one or more users to a user role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddUsersToClientApplicationUserRoleAsyncWithHttpInfo (UserIDs body, long? clientApplicationId, long? userroleId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->AddUsersToClientApplicationUserRole");
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->AddUsersToClientApplicationUserRole");
            // verify the required parameter 'userroleId' is set
            if (userroleId == null)
                throw new ApiException(400, "Missing required parameter 'userroleId' when calling ClientApplicationApi->AddUsersToClientApplicationUserRole");

            var localVarPath = "/client_applications/{client_application_id}/roles/{userrole_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (userroleId != null) localVarPathParams.Add("userrole_id", this.Configuration.ApiClient.ParameterToString(userroleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUsersToClientApplicationUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new client_application Create a new client_application.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ClientApplication object that needs to be created. name and contact_person are required.</param>
        /// <returns>ClientApplicationResponse</returns>
        public ClientApplicationResponse CreateClientApplication (ClientApplicationRequest body)
        {
             ApiResponse<ClientApplicationResponse> localVarResponse = CreateClientApplicationWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new client_application Create a new client_application.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ClientApplication object that needs to be created. name and contact_person are required.</param>
        /// <returns>ApiResponse of ClientApplicationResponse</returns>
        public ApiResponse< ClientApplicationResponse > CreateClientApplicationWithHttpInfo (ClientApplicationRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->CreateClientApplication");

            var localVarPath = "/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationResponse)));
        }

        /// <summary>
        /// Create a new client_application Create a new client_application.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ClientApplication object that needs to be created. name and contact_person are required.</param>
        /// <returns>Task of ClientApplicationResponse</returns>
        public async System.Threading.Tasks.Task<ClientApplicationResponse> CreateClientApplicationAsync (ClientApplicationRequest body)
        {
             ApiResponse<ClientApplicationResponse> localVarResponse = await CreateClientApplicationAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new client_application Create a new client_application.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ClientApplication object that needs to be created. name and contact_person are required.</param>
        /// <returns>Task of ApiResponse (ClientApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientApplicationResponse>> CreateClientApplicationAsyncWithHttpInfo (ClientApplicationRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->CreateClientApplication");

            var localVarPath = "/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationResponse)));
        }

        /// <summary>
        /// Create a new webhook for the Client Application Create a new web hook to the client application.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook object that needs to be created. url and event_types are required.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <returns>WebhookCreateResponse</returns>
        public WebhookCreateResponse CreateWebhookToClientApplication (WebhookRequest body, long? clientApplicationId)
        {
             ApiResponse<WebhookCreateResponse> localVarResponse = CreateWebhookToClientApplicationWithHttpInfo(body, clientApplicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new webhook for the Client Application Create a new web hook to the client application.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook object that needs to be created. url and event_types are required.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <returns>ApiResponse of WebhookCreateResponse</returns>
        public ApiResponse< WebhookCreateResponse > CreateWebhookToClientApplicationWithHttpInfo (WebhookRequest body, long? clientApplicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->CreateWebhookToClientApplication");
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->CreateWebhookToClientApplication");

            var localVarPath = "/client_applications/{client_application_id}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebhookToClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookCreateResponse)));
        }

        /// <summary>
        /// Create a new webhook for the Client Application Create a new web hook to the client application.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook object that needs to be created. url and event_types are required.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <returns>Task of WebhookCreateResponse</returns>
        public async System.Threading.Tasks.Task<WebhookCreateResponse> CreateWebhookToClientApplicationAsync (WebhookRequest body, long? clientApplicationId)
        {
             ApiResponse<WebhookCreateResponse> localVarResponse = await CreateWebhookToClientApplicationAsyncWithHttpInfo(body, clientApplicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new webhook for the Client Application Create a new web hook to the client application.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Webhook object that needs to be created. url and event_types are required.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <returns>Task of ApiResponse (WebhookCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookCreateResponse>> CreateWebhookToClientApplicationAsyncWithHttpInfo (WebhookRequest body, long? clientApplicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->CreateWebhookToClientApplication");
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->CreateWebhookToClientApplication");

            var localVarPath = "/client_applications/{client_application_id}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebhookToClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookCreateResponse)));
        }

        /// <summary>
        /// Delete an client_application Delete a specific resource in your accessible scope, identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to delete</param>
        /// <returns></returns>
        public void DeleteClientApplication (long? id)
        {
             DeleteClientApplicationWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an client_application Delete a specific resource in your accessible scope, identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteClientApplicationWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->DeleteClientApplication");

            var localVarPath = "/client_applications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an client_application Delete a specific resource in your accessible scope, identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteClientApplicationAsync (long? id)
        {
             await DeleteClientApplicationAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an client_application Delete a specific resource in your accessible scope, identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientApplicationAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->DeleteClientApplication");

            var localVarPath = "/client_applications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove users from a client application user role Remove one or more users from an user role. To work with roles, admin role is required.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns></returns>
        public void DeleteUsersFromClientApplicationUserRole (UserIDs body, long? clientApplicationId, long? userroleId)
        {
             DeleteUsersFromClientApplicationUserRoleWithHttpInfo(body, clientApplicationId, userroleId);
        }

        /// <summary>
        /// Remove users from a client application user role Remove one or more users from an user role. To work with roles, admin role is required.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUsersFromClientApplicationUserRoleWithHttpInfo (UserIDs body, long? clientApplicationId, long? userroleId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->DeleteUsersFromClientApplicationUserRole");
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->DeleteUsersFromClientApplicationUserRole");
            // verify the required parameter 'userroleId' is set
            if (userroleId == null)
                throw new ApiException(400, "Missing required parameter 'userroleId' when calling ClientApplicationApi->DeleteUsersFromClientApplicationUserRole");

            var localVarPath = "/client_applications/{client_application_id}/roles/{userrole_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (userroleId != null) localVarPathParams.Add("userrole_id", this.Configuration.ApiClient.ParameterToString(userroleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsersFromClientApplicationUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove users from a client application user role Remove one or more users from an user role. To work with roles, admin role is required.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUsersFromClientApplicationUserRoleAsync (UserIDs body, long? clientApplicationId, long? userroleId)
        {
             await DeleteUsersFromClientApplicationUserRoleAsyncWithHttpInfo(body, clientApplicationId, userroleId);

        }

        /// <summary>
        /// Remove users from a client application user role Remove one or more users from an user role. To work with roles, admin role is required.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUsersFromClientApplicationUserRoleAsyncWithHttpInfo (UserIDs body, long? clientApplicationId, long? userroleId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->DeleteUsersFromClientApplicationUserRole");
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->DeleteUsersFromClientApplicationUserRole");
            // verify the required parameter 'userroleId' is set
            if (userroleId == null)
                throw new ApiException(400, "Missing required parameter 'userroleId' when calling ClientApplicationApi->DeleteUsersFromClientApplicationUserRole");

            var localVarPath = "/client_applications/{client_application_id}/roles/{userrole_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (userroleId != null) localVarPathParams.Add("userrole_id", this.Configuration.ApiClient.ParameterToString(userroleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsersFromClientApplicationUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a webhook Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to update</param>
        /// <param name="id">Id of the webhook to delete</param>
        /// <returns></returns>
        public void DeleteWebhook (long? clientApplicationId, long? id)
        {
             DeleteWebhookWithHttpInfo(clientApplicationId, id);
        }

        /// <summary>
        /// Delete a webhook Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to update</param>
        /// <param name="id">Id of the webhook to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWebhookWithHttpInfo (long? clientApplicationId, long? id)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->DeleteWebhook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->DeleteWebhook");

            var localVarPath = "/client_applications/{client_application_id}/webhooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a webhook Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to update</param>
        /// <param name="id">Id of the webhook to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookAsync (long? clientApplicationId, long? id)
        {
             await DeleteWebhookAsyncWithHttpInfo(clientApplicationId, id);

        }

        /// <summary>
        /// Delete a webhook Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to update</param>
        /// <param name="id">Id of the webhook to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookAsyncWithHttpInfo (long? clientApplicationId, long? id)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->DeleteWebhook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->DeleteWebhook");

            var localVarPath = "/client_applications/{client_application_id}/webhooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// GetAPI Keys of Client Application Returns a list of api_keys of an client application. If the query has no matches, the response is an empty list. Only api_keys on which the user has the can_read permission are loaded.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="apiKey">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ClientApplicationResponse</returns>
        public ClientApplicationResponse GetAPIKeysOfClientApplication (long? clientApplicationId, int? page = null, int? perPage = null, string apiKey = null, DateTime? validFrom = null, DateTime? validFromFrom = null, DateTime? validFromTo = null, DateTime? validUntil = null, DateTime? validUntilFrom = null, DateTime? validUntilTo = null, string orderBy = null)
        {
             ApiResponse<ClientApplicationResponse> localVarResponse = GetAPIKeysOfClientApplicationWithHttpInfo(clientApplicationId, page, perPage, apiKey, validFrom, validFromFrom, validFromTo, validUntil, validUntilFrom, validUntilTo, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// GetAPI Keys of Client Application Returns a list of api_keys of an client application. If the query has no matches, the response is an empty list. Only api_keys on which the user has the can_read permission are loaded.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="apiKey">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of ClientApplicationResponse</returns>
        public ApiResponse< ClientApplicationResponse > GetAPIKeysOfClientApplicationWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string apiKey = null, DateTime? validFrom = null, DateTime? validFromFrom = null, DateTime? validFromTo = null, DateTime? validUntil = null, DateTime? validUntilFrom = null, DateTime? validUntilTo = null, string orderBy = null)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetAPIKeysOfClientApplication");

            var localVarPath = "/client_applications/{client_application_id}/api_keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", apiKey)); // query parameter
            if (validFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_from", validFrom)); // query parameter
            if (validFromFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_from_from", validFromFrom)); // query parameter
            if (validFromTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_from_to", validFromTo)); // query parameter
            if (validUntil != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_until", validUntil)); // query parameter
            if (validUntilFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_until_from", validUntilFrom)); // query parameter
            if (validUntilTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_until_to", validUntilTo)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAPIKeysOfClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationResponse)));
        }

        /// <summary>
        /// GetAPI Keys of Client Application Returns a list of api_keys of an client application. If the query has no matches, the response is an empty list. Only api_keys on which the user has the can_read permission are loaded.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="apiKey">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ClientApplicationResponse</returns>
        public async System.Threading.Tasks.Task<ClientApplicationResponse> GetAPIKeysOfClientApplicationAsync (long? clientApplicationId, int? page = null, int? perPage = null, string apiKey = null, DateTime? validFrom = null, DateTime? validFromFrom = null, DateTime? validFromTo = null, DateTime? validUntil = null, DateTime? validUntilFrom = null, DateTime? validUntilTo = null, string orderBy = null)
        {
             ApiResponse<ClientApplicationResponse> localVarResponse = await GetAPIKeysOfClientApplicationAsyncWithHttpInfo(clientApplicationId, page, perPage, apiKey, validFrom, validFromFrom, validFromTo, validUntil, validUntilFrom, validUntilTo, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// GetAPI Keys of Client Application Returns a list of api_keys of an client application. If the query has no matches, the response is an empty list. Only api_keys on which the user has the can_read permission are loaded.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="apiKey">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validFromTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntilTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ClientApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientApplicationResponse>> GetAPIKeysOfClientApplicationAsyncWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string apiKey = null, DateTime? validFrom = null, DateTime? validFromFrom = null, DateTime? validFromTo = null, DateTime? validUntil = null, DateTime? validUntilFrom = null, DateTime? validUntilTo = null, string orderBy = null)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetAPIKeysOfClientApplication");

            var localVarPath = "/client_applications/{client_application_id}/api_keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", apiKey)); // query parameter
            if (validFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_from", validFrom)); // query parameter
            if (validFromFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_from_from", validFromFrom)); // query parameter
            if (validFromTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_from_to", validFromTo)); // query parameter
            if (validUntil != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_until", validUntil)); // query parameter
            if (validUntilFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_until_from", validUntilFrom)); // query parameter
            if (validUntilTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_until_to", validUntilTo)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAPIKeysOfClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationResponse)));
        }

        /// <summary>
        /// Get a single client_application Get a specific client_application in your accessible scope, identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ClientApplicationResponse</returns>
        public ClientApplicationResponse GetClientApplicationById (long? id, string include = null)
        {
             ApiResponse<ClientApplicationResponse> localVarResponse = GetClientApplicationByIdWithHttpInfo(id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single client_application Get a specific client_application in your accessible scope, identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ApiResponse of ClientApplicationResponse</returns>
        public ApiResponse< ClientApplicationResponse > GetClientApplicationByIdWithHttpInfo (long? id, string include = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->GetClientApplicationById");

            var localVarPath = "/client_applications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientApplicationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationResponse)));
        }

        /// <summary>
        /// Get a single client_application Get a specific client_application in your accessible scope, identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ClientApplicationResponse</returns>
        public async System.Threading.Tasks.Task<ClientApplicationResponse> GetClientApplicationByIdAsync (long? id, string include = null)
        {
             ApiResponse<ClientApplicationResponse> localVarResponse = await GetClientApplicationByIdAsyncWithHttpInfo(id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single client_application Get a specific client_application in your accessible scope, identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the client_application to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ApiResponse (ClientApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientApplicationResponse>> GetClientApplicationByIdAsyncWithHttpInfo (long? id, string include = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->GetClientApplicationById");

            var localVarPath = "/client_applications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientApplicationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationResponse)));
        }

        /// <summary>
        /// Get a range of client_applications Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ClientApplicationsResponse</returns>
        public ClientApplicationsResponse GetClientApplications (int? page = null, int? perPage = null, string include = null, string name = null, string contactPersonId = null, string orderBy = null)
        {
             ApiResponse<ClientApplicationsResponse> localVarResponse = GetClientApplicationsWithHttpInfo(page, perPage, include, name, contactPersonId, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a range of client_applications Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of ClientApplicationsResponse</returns>
        public ApiResponse< ClientApplicationsResponse > GetClientApplicationsWithHttpInfo (int? page = null, int? perPage = null, string include = null, string name = null, string contactPersonId = null, string orderBy = null)
        {

            var localVarPath = "/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (contactPersonId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_person_id", contactPersonId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationsResponse)));
        }

        /// <summary>
        /// Get a range of client_applications Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ClientApplicationsResponse</returns>
        public async System.Threading.Tasks.Task<ClientApplicationsResponse> GetClientApplicationsAsync (int? page = null, int? perPage = null, string include = null, string name = null, string contactPersonId = null, string orderBy = null)
        {
             ApiResponse<ClientApplicationsResponse> localVarResponse = await GetClientApplicationsAsyncWithHttpInfo(page, perPage, include, name, contactPersonId, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a range of client_applications Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded. Possible include values: &#x60;&#x60;&#x60;technical_users&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ClientApplicationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientApplicationsResponse>> GetClientApplicationsAsyncWithHttpInfo (int? page = null, int? perPage = null, string include = null, string name = null, string contactPersonId = null, string orderBy = null)
        {

            var localVarPath = "/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (contactPersonId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_person_id", contactPersonId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationsResponse)));
        }

        /// <summary>
        /// Get all client applications of one edge device application Returns a list of all client applications associated with the selected edge device application. Possible include values: &#x60;&#x60;&#x60;technical_user&#x60;&#x60;&#x60; You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeDeviceApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ClientApplicationsResponse</returns>
        public ClientApplicationsResponse GetClientApplicationsOfEdgeDeviceApplication (long? edgeDeviceApplicationId, int? page = null, int? perPage = null, string include = null, string name = null, string code = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<ClientApplicationsResponse> localVarResponse = GetClientApplicationsOfEdgeDeviceApplicationWithHttpInfo(edgeDeviceApplicationId, page, perPage, include, name, code, orderBy, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all client applications of one edge device application Returns a list of all client applications associated with the selected edge device application. Possible include values: &#x60;&#x60;&#x60;technical_user&#x60;&#x60;&#x60; You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeDeviceApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of ClientApplicationsResponse</returns>
        public ApiResponse< ClientApplicationsResponse > GetClientApplicationsOfEdgeDeviceApplicationWithHttpInfo (long? edgeDeviceApplicationId, int? page = null, int? perPage = null, string include = null, string name = null, string code = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'edgeDeviceApplicationId' is set
            if (edgeDeviceApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'edgeDeviceApplicationId' when calling ClientApplicationApi->GetClientApplicationsOfEdgeDeviceApplication");

            var localVarPath = "/edge_device/applications/{edge_device_application_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (edgeDeviceApplicationId != null) localVarPathParams.Add("edge_device_application_id", this.Configuration.ApiClient.ParameterToString(edgeDeviceApplicationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientApplicationsOfEdgeDeviceApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationsResponse)));
        }

        /// <summary>
        /// Get all client applications of one edge device application Returns a list of all client applications associated with the selected edge device application. Possible include values: &#x60;&#x60;&#x60;technical_user&#x60;&#x60;&#x60; You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeDeviceApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ClientApplicationsResponse</returns>
        public async System.Threading.Tasks.Task<ClientApplicationsResponse> GetClientApplicationsOfEdgeDeviceApplicationAsync (long? edgeDeviceApplicationId, int? page = null, int? perPage = null, string include = null, string name = null, string code = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<ClientApplicationsResponse> localVarResponse = await GetClientApplicationsOfEdgeDeviceApplicationAsyncWithHttpInfo(edgeDeviceApplicationId, page, perPage, include, name, code, orderBy, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all client applications of one edge device application Returns a list of all client applications associated with the selected edge device application. Possible include values: &#x60;&#x60;&#x60;technical_user&#x60;&#x60;&#x60; You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeDeviceApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (ClientApplicationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientApplicationsResponse>> GetClientApplicationsOfEdgeDeviceApplicationAsyncWithHttpInfo (long? edgeDeviceApplicationId, int? page = null, int? perPage = null, string include = null, string name = null, string code = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'edgeDeviceApplicationId' is set
            if (edgeDeviceApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'edgeDeviceApplicationId' when calling ClientApplicationApi->GetClientApplicationsOfEdgeDeviceApplication");

            var localVarPath = "/edge_device/applications/{edge_device_application_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (edgeDeviceApplicationId != null) localVarPathParams.Add("edge_device_application_id", this.Configuration.ApiClient.ParameterToString(edgeDeviceApplicationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientApplicationsOfEdgeDeviceApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationsResponse)));
        }

        /// <summary>
        /// Get current client_application Returns current client application used to access the api.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ClientApplicationPublicResponse</returns>
        public ClientApplicationPublicResponse GetCurrentClientApplication ()
        {
             ApiResponse<ClientApplicationPublicResponse> localVarResponse = GetCurrentClientApplicationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current client_application Returns current client application used to access the api.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ClientApplicationPublicResponse</returns>
        public ApiResponse< ClientApplicationPublicResponse > GetCurrentClientApplicationWithHttpInfo ()
        {

            var localVarPath = "/client_applications/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationPublicResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationPublicResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationPublicResponse)));
        }

        /// <summary>
        /// Get current client_application Returns current client application used to access the api.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ClientApplicationPublicResponse</returns>
        public async System.Threading.Tasks.Task<ClientApplicationPublicResponse> GetCurrentClientApplicationAsync ()
        {
             ApiResponse<ClientApplicationPublicResponse> localVarResponse = await GetCurrentClientApplicationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current client_application Returns current client application used to access the api.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ClientApplicationPublicResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientApplicationPublicResponse>> GetCurrentClientApplicationAsyncWithHttpInfo ()
        {

            var localVarPath = "/client_applications/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationPublicResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationPublicResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationPublicResponse)));
        }

        /// <summary>
        /// Get all edge devices applications for an client application Returns a list of all edge devices applications of an client application. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">id of the client application to fetch</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="edgeDeviceTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="softwareVersionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>EdgeDeviceApplicationsResponse</returns>
        public EdgeDeviceApplicationsResponse GetEdgeDeviceApplicationsOfClientApplication (long? clientApplicationId, int? page = null, int? perPage = null, string name = null, string code = null, string edgeDeviceTypeId = null, string softwareVersionId = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<EdgeDeviceApplicationsResponse> localVarResponse = GetEdgeDeviceApplicationsOfClientApplicationWithHttpInfo(clientApplicationId, page, perPage, name, code, edgeDeviceTypeId, softwareVersionId, orderBy, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all edge devices applications for an client application Returns a list of all edge devices applications of an client application. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">id of the client application to fetch</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="edgeDeviceTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="softwareVersionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of EdgeDeviceApplicationsResponse</returns>
        public ApiResponse< EdgeDeviceApplicationsResponse > GetEdgeDeviceApplicationsOfClientApplicationWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string name = null, string code = null, string edgeDeviceTypeId = null, string softwareVersionId = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetEdgeDeviceApplicationsOfClientApplication");

            var localVarPath = "/client_applications/{client_application_id}/edge_device/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (edgeDeviceTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "edge_device_type_id", edgeDeviceTypeId)); // query parameter
            if (softwareVersionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "software_version_id", softwareVersionId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEdgeDeviceApplicationsOfClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeDeviceApplicationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EdgeDeviceApplicationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeDeviceApplicationsResponse)));
        }

        /// <summary>
        /// Get all edge devices applications for an client application Returns a list of all edge devices applications of an client application. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">id of the client application to fetch</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="edgeDeviceTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="softwareVersionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of EdgeDeviceApplicationsResponse</returns>
        public async System.Threading.Tasks.Task<EdgeDeviceApplicationsResponse> GetEdgeDeviceApplicationsOfClientApplicationAsync (long? clientApplicationId, int? page = null, int? perPage = null, string name = null, string code = null, string edgeDeviceTypeId = null, string softwareVersionId = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<EdgeDeviceApplicationsResponse> localVarResponse = await GetEdgeDeviceApplicationsOfClientApplicationAsyncWithHttpInfo(clientApplicationId, page, perPage, name, code, edgeDeviceTypeId, softwareVersionId, orderBy, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all edge devices applications for an client application Returns a list of all edge devices applications of an client application. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">id of the client application to fetch</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="edgeDeviceTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="softwareVersionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (EdgeDeviceApplicationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EdgeDeviceApplicationsResponse>> GetEdgeDeviceApplicationsOfClientApplicationAsyncWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string name = null, string code = null, string edgeDeviceTypeId = null, string softwareVersionId = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetEdgeDeviceApplicationsOfClientApplication");

            var localVarPath = "/client_applications/{client_application_id}/edge_device/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (edgeDeviceTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "edge_device_type_id", edgeDeviceTypeId)); // query parameter
            if (softwareVersionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "software_version_id", softwareVersionId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEdgeDeviceApplicationsOfClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EdgeDeviceApplicationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EdgeDeviceApplicationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EdgeDeviceApplicationsResponse)));
        }

        /// <summary>
        /// Get Technical Users of Client Application Returns a list of technical of an client application. If the query has no matches, the response is an empty list
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="email">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>TechnicalUsersResponse</returns>
        public TechnicalUsersResponse GetTechnicalUsersOfClientApplication (long? clientApplicationId, int? page = null, int? perPage = null, string email = null, string orderBy = null)
        {
             ApiResponse<TechnicalUsersResponse> localVarResponse = GetTechnicalUsersOfClientApplicationWithHttpInfo(clientApplicationId, page, perPage, email, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Technical Users of Client Application Returns a list of technical of an client application. If the query has no matches, the response is an empty list
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="email">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of TechnicalUsersResponse</returns>
        public ApiResponse< TechnicalUsersResponse > GetTechnicalUsersOfClientApplicationWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string email = null, string orderBy = null)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetTechnicalUsersOfClientApplication");

            var localVarPath = "/client_applications/{client_application_id}/technical_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTechnicalUsersOfClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TechnicalUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TechnicalUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TechnicalUsersResponse)));
        }

        /// <summary>
        /// Get Technical Users of Client Application Returns a list of technical of an client application. If the query has no matches, the response is an empty list
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="email">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of TechnicalUsersResponse</returns>
        public async System.Threading.Tasks.Task<TechnicalUsersResponse> GetTechnicalUsersOfClientApplicationAsync (long? clientApplicationId, int? page = null, int? perPage = null, string email = null, string orderBy = null)
        {
             ApiResponse<TechnicalUsersResponse> localVarResponse = await GetTechnicalUsersOfClientApplicationAsyncWithHttpInfo(clientApplicationId, page, perPage, email, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Technical Users of Client Application Returns a list of technical of an client application. If the query has no matches, the response is an empty list
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="email">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (TechnicalUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TechnicalUsersResponse>> GetTechnicalUsersOfClientApplicationAsyncWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string email = null, string orderBy = null)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetTechnicalUsersOfClientApplication");

            var localVarPath = "/client_applications/{client_application_id}/technical_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTechnicalUsersOfClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TechnicalUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TechnicalUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TechnicalUsersResponse)));
        }

        /// <summary>
        /// Get all users of a user role assigned to a client application Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="firstName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="lastName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>UsersPublicResponse</returns>
        public UsersPublicResponse GetUsersOfClientApplicationUserRole (long? clientApplicationId, long? userroleId, int? page = null, int? perPage = null, string firstName = null, string lastName = null, string orderBy = null)
        {
             ApiResponse<UsersPublicResponse> localVarResponse = GetUsersOfClientApplicationUserRoleWithHttpInfo(clientApplicationId, userroleId, page, perPage, firstName, lastName, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all users of a user role assigned to a client application Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="firstName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="lastName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of UsersPublicResponse</returns>
        public ApiResponse< UsersPublicResponse > GetUsersOfClientApplicationUserRoleWithHttpInfo (long? clientApplicationId, long? userroleId, int? page = null, int? perPage = null, string firstName = null, string lastName = null, string orderBy = null)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetUsersOfClientApplicationUserRole");
            // verify the required parameter 'userroleId' is set
            if (userroleId == null)
                throw new ApiException(400, "Missing required parameter 'userroleId' when calling ClientApplicationApi->GetUsersOfClientApplicationUserRole");

            var localVarPath = "/client_applications/{client_application_id}/roles/{userrole_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (userroleId != null) localVarPathParams.Add("userrole_id", this.Configuration.ApiClient.ParameterToString(userroleId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "first_name", firstName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_name", lastName)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersOfClientApplicationUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersPublicResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UsersPublicResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersPublicResponse)));
        }

        /// <summary>
        /// Get all users of a user role assigned to a client application Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="firstName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="lastName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of UsersPublicResponse</returns>
        public async System.Threading.Tasks.Task<UsersPublicResponse> GetUsersOfClientApplicationUserRoleAsync (long? clientApplicationId, long? userroleId, int? page = null, int? perPage = null, string firstName = null, string lastName = null, string orderBy = null)
        {
             ApiResponse<UsersPublicResponse> localVarResponse = await GetUsersOfClientApplicationUserRoleAsyncWithHttpInfo(clientApplicationId, userroleId, page, perPage, firstName, lastName, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all users of a user role assigned to a client application Returns a list of all users that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">The resource defined in the URL</param>
        /// <param name="userroleId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="firstName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="lastName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (UsersPublicResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersPublicResponse>> GetUsersOfClientApplicationUserRoleAsyncWithHttpInfo (long? clientApplicationId, long? userroleId, int? page = null, int? perPage = null, string firstName = null, string lastName = null, string orderBy = null)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetUsersOfClientApplicationUserRole");
            // verify the required parameter 'userroleId' is set
            if (userroleId == null)
                throw new ApiException(400, "Missing required parameter 'userroleId' when calling ClientApplicationApi->GetUsersOfClientApplicationUserRole");

            var localVarPath = "/client_applications/{client_application_id}/roles/{userrole_id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (userroleId != null) localVarPathParams.Add("userrole_id", this.Configuration.ApiClient.ParameterToString(userroleId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "first_name", firstName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_name", lastName)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersOfClientApplicationUserRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersPublicResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UsersPublicResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersPublicResponse)));
        }

        /// <summary>
        /// Get a single webhook Get a specific webhook identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to fetch</param>
        /// <param name="id">Id of the webhook to fetch</param>
        /// <returns>WebhookResponse</returns>
        public WebhookResponse GetWebhookById (long? clientApplicationId, long? id)
        {
             ApiResponse<WebhookResponse> localVarResponse = GetWebhookByIdWithHttpInfo(clientApplicationId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single webhook Get a specific webhook identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to fetch</param>
        /// <param name="id">Id of the webhook to fetch</param>
        /// <returns>ApiResponse of WebhookResponse</returns>
        public ApiResponse< WebhookResponse > GetWebhookByIdWithHttpInfo (long? clientApplicationId, long? id)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetWebhookById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->GetWebhookById");

            var localVarPath = "/client_applications/{client_application_id}/webhooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

        /// <summary>
        /// Get a single webhook Get a specific webhook identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to fetch</param>
        /// <param name="id">Id of the webhook to fetch</param>
        /// <returns>Task of WebhookResponse</returns>
        public async System.Threading.Tasks.Task<WebhookResponse> GetWebhookByIdAsync (long? clientApplicationId, long? id)
        {
             ApiResponse<WebhookResponse> localVarResponse = await GetWebhookByIdAsyncWithHttpInfo(clientApplicationId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single webhook Get a specific webhook identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook to fetch</param>
        /// <param name="id">Id of the webhook to fetch</param>
        /// <returns>Task of ApiResponse (WebhookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookResponse>> GetWebhookByIdAsyncWithHttpInfo (long? clientApplicationId, long? id)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetWebhookById");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->GetWebhookById");

            var localVarPath = "/client_applications/{client_application_id}/webhooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponse)));
        }

        /// <summary>
        /// Get events of a webhook Get webhook events. Events are the messages that are send to the webhok URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="eventType">Filter by event type - no wildcard support (optional)</param>
        /// <param name="occurredAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="occurredAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="occurredAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>WebhookEventResponses</returns>
        public WebhookEventResponses GetWebhookEvents (long? clientApplicationId, long? id, int? page = null, int? perPage = null, string status = null, string eventType = null, DateTime? occurredAt = null, string occurredAtFrom = null, string occurredAtTo = null, string orderBy = null)
        {
             ApiResponse<WebhookEventResponses> localVarResponse = GetWebhookEventsWithHttpInfo(clientApplicationId, id, page, perPage, status, eventType, occurredAt, occurredAtFrom, occurredAtTo, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get events of a webhook Get webhook events. Events are the messages that are send to the webhok URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="eventType">Filter by event type - no wildcard support (optional)</param>
        /// <param name="occurredAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="occurredAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="occurredAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of WebhookEventResponses</returns>
        public ApiResponse< WebhookEventResponses > GetWebhookEventsWithHttpInfo (long? clientApplicationId, long? id, int? page = null, int? perPage = null, string status = null, string eventType = null, DateTime? occurredAt = null, string occurredAtFrom = null, string occurredAtTo = null, string orderBy = null)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetWebhookEvents");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->GetWebhookEvents");

            var localVarPath = "/client_applications/{client_application_id}/webhooks/{id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_type", eventType)); // query parameter
            if (occurredAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "occurred_at", occurredAt)); // query parameter
            if (occurredAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "occurred_at_from", occurredAtFrom)); // query parameter
            if (occurredAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "occurred_at_to", occurredAtTo)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookEventResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookEventResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookEventResponses)));
        }

        /// <summary>
        /// Get events of a webhook Get webhook events. Events are the messages that are send to the webhok URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="eventType">Filter by event type - no wildcard support (optional)</param>
        /// <param name="occurredAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="occurredAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="occurredAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of WebhookEventResponses</returns>
        public async System.Threading.Tasks.Task<WebhookEventResponses> GetWebhookEventsAsync (long? clientApplicationId, long? id, int? page = null, int? perPage = null, string status = null, string eventType = null, DateTime? occurredAt = null, string occurredAtFrom = null, string occurredAtTo = null, string orderBy = null)
        {
             ApiResponse<WebhookEventResponses> localVarResponse = await GetWebhookEventsAsyncWithHttpInfo(clientApplicationId, id, page, perPage, status, eventType, occurredAt, occurredAtFrom, occurredAtTo, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get events of a webhook Get webhook events. Events are the messages that are send to the webhok URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="eventType">Filter by event type - no wildcard support (optional)</param>
        /// <param name="occurredAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="occurredAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="occurredAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (WebhookEventResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookEventResponses>> GetWebhookEventsAsyncWithHttpInfo (long? clientApplicationId, long? id, int? page = null, int? perPage = null, string status = null, string eventType = null, DateTime? occurredAt = null, string occurredAtFrom = null, string occurredAtTo = null, string orderBy = null)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetWebhookEvents");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->GetWebhookEvents");

            var localVarPath = "/client_applications/{client_application_id}/webhooks/{id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (eventType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_type", eventType)); // query parameter
            if (occurredAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "occurred_at", occurredAt)); // query parameter
            if (occurredAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "occurred_at_from", occurredAtFrom)); // query parameter
            if (occurredAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "occurred_at_to", occurredAtTo)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookEventResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookEventResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookEventResponses)));
        }

        /// <summary>
        /// Get webhooks of Client Application Returns a list of webhooks of an client application. If the query has no matches, the response is an empty list. Only webhooks on which the user has the can_read permission are loaded.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>WebhookResponses</returns>
        public WebhookResponses GetWebhooksOfClientApplication (long? clientApplicationId, int? page = null, int? perPage = null, string orderBy = null)
        {
             ApiResponse<WebhookResponses> localVarResponse = GetWebhooksOfClientApplicationWithHttpInfo(clientApplicationId, page, perPage, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get webhooks of Client Application Returns a list of webhooks of an client application. If the query has no matches, the response is an empty list. Only webhooks on which the user has the can_read permission are loaded.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of WebhookResponses</returns>
        public ApiResponse< WebhookResponses > GetWebhooksOfClientApplicationWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string orderBy = null)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetWebhooksOfClientApplication");

            var localVarPath = "/client_applications/{client_application_id}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooksOfClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponses)));
        }

        /// <summary>
        /// Get webhooks of Client Application Returns a list of webhooks of an client application. If the query has no matches, the response is an empty list. Only webhooks on which the user has the can_read permission are loaded.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of WebhookResponses</returns>
        public async System.Threading.Tasks.Task<WebhookResponses> GetWebhooksOfClientApplicationAsync (long? clientApplicationId, int? page = null, int? perPage = null, string orderBy = null)
        {
             ApiResponse<WebhookResponses> localVarResponse = await GetWebhooksOfClientApplicationAsyncWithHttpInfo(clientApplicationId, page, perPage, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get webhooks of Client Application Returns a list of webhooks of an client application. If the query has no matches, the response is an empty list. Only webhooks on which the user has the can_read permission are loaded.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (WebhookResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookResponses>> GetWebhooksOfClientApplicationAsyncWithHttpInfo (long? clientApplicationId, int? page = null, int? perPage = null, string orderBy = null)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->GetWebhooksOfClientApplication");

            var localVarPath = "/client_applications/{client_application_id}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooksOfClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookResponses)));
        }

        /// <summary>
        /// Remove client applications from an edge device application Remove one or more client applications from an edge device application. This action requires the edge device admin role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application from which the client applications will be removed</param>
        /// <returns></returns>
        public void RemoveClientApplicationsOfEdgeDeviceApplication (ClientApplicationIDs body, long? edgeDeviceApplicationId)
        {
             RemoveClientApplicationsOfEdgeDeviceApplicationWithHttpInfo(body, edgeDeviceApplicationId);
        }

        /// <summary>
        /// Remove client applications from an edge device application Remove one or more client applications from an edge device application. This action requires the edge device admin role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application from which the client applications will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveClientApplicationsOfEdgeDeviceApplicationWithHttpInfo (ClientApplicationIDs body, long? edgeDeviceApplicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->RemoveClientApplicationsOfEdgeDeviceApplication");
            // verify the required parameter 'edgeDeviceApplicationId' is set
            if (edgeDeviceApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'edgeDeviceApplicationId' when calling ClientApplicationApi->RemoveClientApplicationsOfEdgeDeviceApplication");

            var localVarPath = "/edge_device/applications/{edge_device_application_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (edgeDeviceApplicationId != null) localVarPathParams.Add("edge_device_application_id", this.Configuration.ApiClient.ParameterToString(edgeDeviceApplicationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveClientApplicationsOfEdgeDeviceApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove client applications from an edge device application Remove one or more client applications from an edge device application. This action requires the edge device admin role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application from which the client applications will be removed</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveClientApplicationsOfEdgeDeviceApplicationAsync (ClientApplicationIDs body, long? edgeDeviceApplicationId)
        {
             await RemoveClientApplicationsOfEdgeDeviceApplicationAsyncWithHttpInfo(body, edgeDeviceApplicationId);

        }

        /// <summary>
        /// Remove client applications from an edge device application Remove one or more client applications from an edge device application. This action requires the edge device admin role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application from which the client applications will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveClientApplicationsOfEdgeDeviceApplicationAsyncWithHttpInfo (ClientApplicationIDs body, long? edgeDeviceApplicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->RemoveClientApplicationsOfEdgeDeviceApplication");
            // verify the required parameter 'edgeDeviceApplicationId' is set
            if (edgeDeviceApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'edgeDeviceApplicationId' when calling ClientApplicationApi->RemoveClientApplicationsOfEdgeDeviceApplication");

            var localVarPath = "/edge_device/applications/{edge_device_application_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (edgeDeviceApplicationId != null) localVarPathParams.Add("edge_device_application_id", this.Configuration.ApiClient.ParameterToString(edgeDeviceApplicationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveClientApplicationsOfEdgeDeviceApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the client applications of an edge device application Replaces all client applications belonging to an edge device application. You can send a list of resources that will replace all previous values. This action requires the edge device admin role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application of which the client applications will be replaced</param>
        /// <returns></returns>
        public void ReplaceClientApplicationsOfEdgeDeviceApplication (ClientApplicationIDs body, long? edgeDeviceApplicationId)
        {
             ReplaceClientApplicationsOfEdgeDeviceApplicationWithHttpInfo(body, edgeDeviceApplicationId);
        }

        /// <summary>
        /// Replace the client applications of an edge device application Replaces all client applications belonging to an edge device application. You can send a list of resources that will replace all previous values. This action requires the edge device admin role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application of which the client applications will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReplaceClientApplicationsOfEdgeDeviceApplicationWithHttpInfo (ClientApplicationIDs body, long? edgeDeviceApplicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->ReplaceClientApplicationsOfEdgeDeviceApplication");
            // verify the required parameter 'edgeDeviceApplicationId' is set
            if (edgeDeviceApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'edgeDeviceApplicationId' when calling ClientApplicationApi->ReplaceClientApplicationsOfEdgeDeviceApplication");

            var localVarPath = "/edge_device/applications/{edge_device_application_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (edgeDeviceApplicationId != null) localVarPathParams.Add("edge_device_application_id", this.Configuration.ApiClient.ParameterToString(edgeDeviceApplicationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceClientApplicationsOfEdgeDeviceApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the client applications of an edge device application Replaces all client applications belonging to an edge device application. You can send a list of resources that will replace all previous values. This action requires the edge device admin role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application of which the client applications will be replaced</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceClientApplicationsOfEdgeDeviceApplicationAsync (ClientApplicationIDs body, long? edgeDeviceApplicationId)
        {
             await ReplaceClientApplicationsOfEdgeDeviceApplicationAsyncWithHttpInfo(body, edgeDeviceApplicationId);

        }

        /// <summary>
        /// Replace the client applications of an edge device application Replaces all client applications belonging to an edge device application. You can send a list of resources that will replace all previous values. This action requires the edge device admin role.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="edgeDeviceApplicationId">Id of the edge device application of which the client applications will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceClientApplicationsOfEdgeDeviceApplicationAsyncWithHttpInfo (ClientApplicationIDs body, long? edgeDeviceApplicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->ReplaceClientApplicationsOfEdgeDeviceApplication");
            // verify the required parameter 'edgeDeviceApplicationId' is set
            if (edgeDeviceApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'edgeDeviceApplicationId' when calling ClientApplicationApi->ReplaceClientApplicationsOfEdgeDeviceApplication");

            var localVarPath = "/edge_device/applications/{edge_device_application_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (edgeDeviceApplicationId != null) localVarPathParams.Add("edge_device_application_id", this.Configuration.ApiClient.ParameterToString(edgeDeviceApplicationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceClientApplicationsOfEdgeDeviceApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// resend Webhook Events Trigger the resend of webhook events
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ids of the events that should be resend. Events that are currently in state pending are ignored are required.</param>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <returns></returns>
        public void ResendWebhookEvents (WebhookEventIDs body, long? clientApplicationId, long? id)
        {
             ResendWebhookEventsWithHttpInfo(body, clientApplicationId, id);
        }

        /// <summary>
        /// resend Webhook Events Trigger the resend of webhook events
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ids of the events that should be resend. Events that are currently in state pending are ignored are required.</param>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResendWebhookEventsWithHttpInfo (WebhookEventIDs body, long? clientApplicationId, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->ResendWebhookEvents");
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->ResendWebhookEvents");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->ResendWebhookEvents");

            var localVarPath = "/client_applications/{client_application_id}/webhooks/{id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendWebhookEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// resend Webhook Events Trigger the resend of webhook events
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ids of the events that should be resend. Events that are currently in state pending are ignored are required.</param>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResendWebhookEventsAsync (WebhookEventIDs body, long? clientApplicationId, long? id)
        {
             await ResendWebhookEventsAsyncWithHttpInfo(body, clientApplicationId, id);

        }

        /// <summary>
        /// resend Webhook Events Trigger the resend of webhook events
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ids of the events that should be resend. Events that are currently in state pending are ignored are required.</param>
        /// <param name="clientApplicationId">Id of the client_application where webhook is registered</param>
        /// <param name="id">Id of the webhook</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResendWebhookEventsAsyncWithHttpInfo (WebhookEventIDs body, long? clientApplicationId, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->ResendWebhookEvents");
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->ResendWebhookEvents");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->ResendWebhookEvents");

            var localVarPath = "/client_applications/{client_application_id}/webhooks/{id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendWebhookEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset the secret property of the webhook Reset the secret property of the webhook
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>WebhookSecretResponse</returns>
        public WebhookSecretResponse ResetSecretWebhook (long? clientApplicationId, long? id)
        {
             ApiResponse<WebhookSecretResponse> localVarResponse = ResetSecretWebhookWithHttpInfo(clientApplicationId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the secret property of the webhook Reset the secret property of the webhook
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>ApiResponse of WebhookSecretResponse</returns>
        public ApiResponse< WebhookSecretResponse > ResetSecretWebhookWithHttpInfo (long? clientApplicationId, long? id)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->ResetSecretWebhook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->ResetSecretWebhook");

            var localVarPath = "/client_applications/{client_application_id}/webhooks/{id}/reset_secret";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetSecretWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSecretResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookSecretResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSecretResponse)));
        }

        /// <summary>
        /// Reset the secret property of the webhook Reset the secret property of the webhook
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>Task of WebhookSecretResponse</returns>
        public async System.Threading.Tasks.Task<WebhookSecretResponse> ResetSecretWebhookAsync (long? clientApplicationId, long? id)
        {
             ApiResponse<WebhookSecretResponse> localVarResponse = await ResetSecretWebhookAsyncWithHttpInfo(clientApplicationId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset the secret property of the webhook Reset the secret property of the webhook
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>Task of ApiResponse (WebhookSecretResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookSecretResponse>> ResetSecretWebhookAsyncWithHttpInfo (long? clientApplicationId, long? id)
        {
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->ResetSecretWebhook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->ResetSecretWebhook");

            var localVarPath = "/client_applications/{client_application_id}/webhooks/{id}/reset_secret";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetSecretWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSecretResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookSecretResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSecretResponse)));
        }

        /// <summary>
        /// Update an client_application Update accessible parameters of the requested resource in your accessible scope.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the client_application to update</param>
        /// <returns></returns>
        public void UpdateClientApplication (ClientApplicationRequest body, long? id)
        {
             UpdateClientApplicationWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update an client_application Update accessible parameters of the requested resource in your accessible scope.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the client_application to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateClientApplicationWithHttpInfo (ClientApplicationRequest body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->UpdateClientApplication");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->UpdateClientApplication");

            var localVarPath = "/client_applications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update an client_application Update accessible parameters of the requested resource in your accessible scope.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the client_application to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateClientApplicationAsync (ClientApplicationRequest body, long? id)
        {
             await UpdateClientApplicationAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update an client_application Update accessible parameters of the requested resource in your accessible scope.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the client_application to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateClientApplicationAsyncWithHttpInfo (ClientApplicationRequest body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->UpdateClientApplication");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->UpdateClientApplication");

            var localVarPath = "/client_applications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a webhook Update accessible parameters of the requested resource in your accessible scope.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns></returns>
        public void UpdateWebhook (WebhookRequest body, long? clientApplicationId, long? id)
        {
             UpdateWebhookWithHttpInfo(body, clientApplicationId, id);
        }

        /// <summary>
        /// Update a webhook Update accessible parameters of the requested resource in your accessible scope.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateWebhookWithHttpInfo (WebhookRequest body, long? clientApplicationId, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->UpdateWebhook");
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->UpdateWebhook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->UpdateWebhook");

            var localVarPath = "/client_applications/{client_application_id}/webhooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a webhook Update accessible parameters of the requested resource in your accessible scope.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateWebhookAsync (WebhookRequest body, long? clientApplicationId, long? id)
        {
             await UpdateWebhookAsyncWithHttpInfo(body, clientApplicationId, id);

        }

        /// <summary>
        /// Update a webhook Update accessible parameters of the requested resource in your accessible scope.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="clientApplicationId">Id of the client_application to update</param>
        /// <param name="id">Id of the webhook to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWebhookAsyncWithHttpInfo (WebhookRequest body, long? clientApplicationId, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ClientApplicationApi->UpdateWebhook");
            // verify the required parameter 'clientApplicationId' is set
            if (clientApplicationId == null)
                throw new ApiException(400, "Missing required parameter 'clientApplicationId' when calling ClientApplicationApi->UpdateWebhook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientApplicationApi->UpdateWebhook");

            var localVarPath = "/client_applications/{client_application_id}/webhooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientApplicationId != null) localVarPathParams.Add("client_application_id", this.Configuration.ApiClient.ParameterToString(clientApplicationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
