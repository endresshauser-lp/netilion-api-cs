/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Netilion.Api.Client;
using Netilion.Api.Model;

namespace Netilion.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface INotificationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// add client_applications to a notification
        /// </summary>
        /// <remarks>
        /// Add one or more client_applications to a notification.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="notificationId">Id of the notification to which the client_applications will be added</param>
        /// <returns></returns>
        void AddClientApplicationsToNotification (ClientApplicationIDs body, long? notificationId);

        /// <summary>
        /// add client_applications to a notification
        /// </summary>
        /// <remarks>
        /// Add one or more client_applications to a notification.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="notificationId">Id of the notification to which the client_applications will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddClientApplicationsToNotificationWithHttpInfo (ClientApplicationIDs body, long? notificationId);
        /// <summary>
        /// Create a new notification
        /// </summary>
        /// <remarks>
        /// The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. POST sets values in default language: en.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification object to create.</param>
        /// <returns>NotificationResponse</returns>
        NotificationResponse CreateNotification (NotificationRequest body);

        /// <summary>
        /// Create a new notification
        /// </summary>
        /// <remarks>
        /// The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. POST sets values in default language: en.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification object to create.</param>
        /// <returns>ApiResponse of NotificationResponse</returns>
        ApiResponse<NotificationResponse> CreateNotificationWithHttpInfo (NotificationRequest body);
        /// <summary>
        /// Delete a notification
        /// </summary>
        /// <remarks>
        /// Delete a specific resource identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the notification to delete</param>
        /// <returns></returns>
        void DeleteNotification (long? id);

        /// <summary>
        /// Delete a notification
        /// </summary>
        /// <remarks>
        /// Delete a specific resource identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the notification to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNotificationWithHttpInfo (long? id);
        /// <summary>
        /// Get all client_applications assigned to a notification
        /// </summary>
        /// <remarks>
        /// Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Id of the notification to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ClientApplicationsResponse</returns>
        ClientApplicationsResponse GetClientApplicationsOfNotification (long? notificationId, int? page = null, int? perPage = null, string name = null, string contactPersonId = null, string orderBy = null);

        /// <summary>
        /// Get all client_applications assigned to a notification
        /// </summary>
        /// <remarks>
        /// Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Id of the notification to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of ClientApplicationsResponse</returns>
        ApiResponse<ClientApplicationsResponse> GetClientApplicationsOfNotificationWithHttpInfo (long? notificationId, int? page = null, int? perPage = null, string name = null, string contactPersonId = null, string orderBy = null);
        /// <summary>
        /// Get a single notification
        /// </summary>
        /// <remarks>
        /// Get a specific notification identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of notification to fetch</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>NotificationResponse</returns>
        NotificationResponse GetNotificationById (long? id, string acceptLanguage = null);

        /// <summary>
        /// Get a single notification
        /// </summary>
        /// <remarks>
        /// Get a specific notification identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of notification to fetch</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of NotificationResponse</returns>
        ApiResponse<NotificationResponse> GetNotificationByIdWithHttpInfo (long? id, string acceptLanguage = null);
        /// <summary>
        /// Get a range of notifications
        /// </summary>
        /// <remarks>
        /// Returns a list of all notifications available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="name">searches notifications with given name (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Notifications</returns>
        Notifications GetNotifications (int? page = null, int? perPage = null, long? clientApplicationId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string name = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get a range of notifications
        /// </summary>
        /// <remarks>
        /// Returns a list of all notifications available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="name">searches notifications with given name (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of Notifications</returns>
        ApiResponse<Notifications> GetNotificationsWithHttpInfo (int? page = null, int? perPage = null, long? clientApplicationId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string name = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Remove client_application form a notification
        /// </summary>
        /// <remarks>
        /// Remove one or more client_applications from a notification
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="notificationId">Id of the notification from which the client_applications will be removed</param>
        /// <returns></returns>
        void RemoteClientApplicationsFromNotification (ClientApplicationIDs body, long? notificationId);

        /// <summary>
        /// Remove client_application form a notification
        /// </summary>
        /// <remarks>
        /// Remove one or more client_applications from a notification
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="notificationId">Id of the notification from which the client_applications will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoteClientApplicationsFromNotificationWithHttpInfo (ClientApplicationIDs body, long? notificationId);
        /// <summary>
        /// Replace the client_applications of a notification
        /// </summary>
        /// <remarks>
        /// Replaces all client_applications belonging to a notificatoin. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="notificationId">Id of the notification of which the client_applications will be replaced</param>
        /// <returns></returns>
        void ReplaceClientApplicationsOfNotification (ClientApplicationIDs body, long? notificationId);

        /// <summary>
        /// Replace the client_applications of a notification
        /// </summary>
        /// <remarks>
        /// Replaces all client_applications belonging to a notificatoin. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="notificationId">Id of the notification of which the client_applications will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceClientApplicationsOfNotificationWithHttpInfo (ClientApplicationIDs body, long? notificationId);
        /// <summary>
        /// Update a notification
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource. The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the notification to update</param>
        /// <param name="contentLanguage">language of the content (optional)</param>
        /// <returns></returns>
        void UpdateNotification (NotificationRequest body, long? id, string contentLanguage = null);

        /// <summary>
        /// Update a notification
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource. The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the notification to update</param>
        /// <param name="contentLanguage">language of the content (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateNotificationWithHttpInfo (NotificationRequest body, long? id, string contentLanguage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// add client_applications to a notification
        /// </summary>
        /// <remarks>
        /// Add one or more client_applications to a notification.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="notificationId">Id of the notification to which the client_applications will be added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddClientApplicationsToNotificationAsync (ClientApplicationIDs body, long? notificationId);

        /// <summary>
        /// add client_applications to a notification
        /// </summary>
        /// <remarks>
        /// Add one or more client_applications to a notification.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="notificationId">Id of the notification to which the client_applications will be added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddClientApplicationsToNotificationAsyncWithHttpInfo (ClientApplicationIDs body, long? notificationId);
        /// <summary>
        /// Create a new notification
        /// </summary>
        /// <remarks>
        /// The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. POST sets values in default language: en.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification object to create.</param>
        /// <returns>Task of NotificationResponse</returns>
        System.Threading.Tasks.Task<NotificationResponse> CreateNotificationAsync (NotificationRequest body);

        /// <summary>
        /// Create a new notification
        /// </summary>
        /// <remarks>
        /// The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. POST sets values in default language: en.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification object to create.</param>
        /// <returns>Task of ApiResponse (NotificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationResponse>> CreateNotificationAsyncWithHttpInfo (NotificationRequest body);
        /// <summary>
        /// Delete a notification
        /// </summary>
        /// <remarks>
        /// Delete a specific resource identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the notification to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNotificationAsync (long? id);

        /// <summary>
        /// Delete a notification
        /// </summary>
        /// <remarks>
        /// Delete a specific resource identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the notification to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNotificationAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get all client_applications assigned to a notification
        /// </summary>
        /// <remarks>
        /// Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Id of the notification to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ClientApplicationsResponse</returns>
        System.Threading.Tasks.Task<ClientApplicationsResponse> GetClientApplicationsOfNotificationAsync (long? notificationId, int? page = null, int? perPage = null, string name = null, string contactPersonId = null, string orderBy = null);

        /// <summary>
        /// Get all client_applications assigned to a notification
        /// </summary>
        /// <remarks>
        /// Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Id of the notification to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ClientApplicationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientApplicationsResponse>> GetClientApplicationsOfNotificationAsyncWithHttpInfo (long? notificationId, int? page = null, int? perPage = null, string name = null, string contactPersonId = null, string orderBy = null);
        /// <summary>
        /// Get a single notification
        /// </summary>
        /// <remarks>
        /// Get a specific notification identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of notification to fetch</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of NotificationResponse</returns>
        System.Threading.Tasks.Task<NotificationResponse> GetNotificationByIdAsync (long? id, string acceptLanguage = null);

        /// <summary>
        /// Get a single notification
        /// </summary>
        /// <remarks>
        /// Get a specific notification identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of notification to fetch</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (NotificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationResponse>> GetNotificationByIdAsyncWithHttpInfo (long? id, string acceptLanguage = null);
        /// <summary>
        /// Get a range of notifications
        /// </summary>
        /// <remarks>
        /// Returns a list of all notifications available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="name">searches notifications with given name (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of Notifications</returns>
        System.Threading.Tasks.Task<Notifications> GetNotificationsAsync (int? page = null, int? perPage = null, long? clientApplicationId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string name = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get a range of notifications
        /// </summary>
        /// <remarks>
        /// Returns a list of all notifications available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="name">searches notifications with given name (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (Notifications)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notifications>> GetNotificationsAsyncWithHttpInfo (int? page = null, int? perPage = null, long? clientApplicationId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string name = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Remove client_application form a notification
        /// </summary>
        /// <remarks>
        /// Remove one or more client_applications from a notification
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="notificationId">Id of the notification from which the client_applications will be removed</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoteClientApplicationsFromNotificationAsync (ClientApplicationIDs body, long? notificationId);

        /// <summary>
        /// Remove client_application form a notification
        /// </summary>
        /// <remarks>
        /// Remove one or more client_applications from a notification
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="notificationId">Id of the notification from which the client_applications will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoteClientApplicationsFromNotificationAsyncWithHttpInfo (ClientApplicationIDs body, long? notificationId);
        /// <summary>
        /// Replace the client_applications of a notification
        /// </summary>
        /// <remarks>
        /// Replaces all client_applications belonging to a notificatoin. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="notificationId">Id of the notification of which the client_applications will be replaced</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceClientApplicationsOfNotificationAsync (ClientApplicationIDs body, long? notificationId);

        /// <summary>
        /// Replace the client_applications of a notification
        /// </summary>
        /// <remarks>
        /// Replaces all client_applications belonging to a notificatoin. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="notificationId">Id of the notification of which the client_applications will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceClientApplicationsOfNotificationAsyncWithHttpInfo (ClientApplicationIDs body, long? notificationId);
        /// <summary>
        /// Update a notification
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource. The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the notification to update</param>
        /// <param name="contentLanguage">language of the content (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateNotificationAsync (NotificationRequest body, long? id, string contentLanguage = null);

        /// <summary>
        /// Update a notification
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource. The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the notification to update</param>
        /// <param name="contentLanguage">language of the content (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateNotificationAsyncWithHttpInfo (NotificationRequest body, long? id, string contentLanguage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class NotificationApi : INotificationApi
    {
        private Netilion.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationApi(String basePath)
        {
            this.Configuration = new Netilion.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationApi"/> class
        /// </summary>
        /// <returns></returns>
        public NotificationApi()
        {
            this.Configuration = Netilion.Api.Client.Configuration.Default;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotificationApi(Netilion.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Netilion.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Netilion.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Netilion.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// add client_applications to a notification Add one or more client_applications to a notification.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="notificationId">Id of the notification to which the client_applications will be added</param>
        /// <returns></returns>
        public void AddClientApplicationsToNotification (ClientApplicationIDs body, long? notificationId)
        {
             AddClientApplicationsToNotificationWithHttpInfo(body, notificationId);
        }

        /// <summary>
        /// add client_applications to a notification Add one or more client_applications to a notification.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="notificationId">Id of the notification to which the client_applications will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddClientApplicationsToNotificationWithHttpInfo (ClientApplicationIDs body, long? notificationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NotificationApi->AddClientApplicationsToNotification");
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling NotificationApi->AddClientApplicationsToNotification");

            var localVarPath = "/notifications/{notification_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddClientApplicationsToNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// add client_applications to a notification Add one or more client_applications to a notification.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="notificationId">Id of the notification to which the client_applications will be added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddClientApplicationsToNotificationAsync (ClientApplicationIDs body, long? notificationId)
        {
             await AddClientApplicationsToNotificationAsyncWithHttpInfo(body, notificationId);

        }

        /// <summary>
        /// add client_applications to a notification Add one or more client_applications to a notification.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="notificationId">Id of the notification to which the client_applications will be added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddClientApplicationsToNotificationAsyncWithHttpInfo (ClientApplicationIDs body, long? notificationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NotificationApi->AddClientApplicationsToNotification");
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling NotificationApi->AddClientApplicationsToNotification");

            var localVarPath = "/notifications/{notification_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddClientApplicationsToNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new notification The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. POST sets values in default language: en.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification object to create.</param>
        /// <returns>NotificationResponse</returns>
        public NotificationResponse CreateNotification (NotificationRequest body)
        {
             ApiResponse<NotificationResponse> localVarResponse = CreateNotificationWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new notification The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. POST sets values in default language: en.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification object to create.</param>
        /// <returns>ApiResponse of NotificationResponse</returns>
        public ApiResponse< NotificationResponse > CreateNotificationWithHttpInfo (NotificationRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NotificationApi->CreateNotification");

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationResponse)));
        }

        /// <summary>
        /// Create a new notification The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. POST sets values in default language: en.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification object to create.</param>
        /// <returns>Task of NotificationResponse</returns>
        public async System.Threading.Tasks.Task<NotificationResponse> CreateNotificationAsync (NotificationRequest body)
        {
             ApiResponse<NotificationResponse> localVarResponse = await CreateNotificationAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new notification The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. POST sets values in default language: en.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification object to create.</param>
        /// <returns>Task of ApiResponse (NotificationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationResponse>> CreateNotificationAsyncWithHttpInfo (NotificationRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NotificationApi->CreateNotification");

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationResponse)));
        }

        /// <summary>
        /// Delete a notification Delete a specific resource identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the notification to delete</param>
        /// <returns></returns>
        public void DeleteNotification (long? id)
        {
             DeleteNotificationWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a notification Delete a specific resource identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the notification to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNotificationWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationApi->DeleteNotification");

            var localVarPath = "/notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a notification Delete a specific resource identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the notification to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNotificationAsync (long? id)
        {
             await DeleteNotificationAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a notification Delete a specific resource identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the notification to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNotificationAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationApi->DeleteNotification");

            var localVarPath = "/notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get all client_applications assigned to a notification Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Id of the notification to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ClientApplicationsResponse</returns>
        public ClientApplicationsResponse GetClientApplicationsOfNotification (long? notificationId, int? page = null, int? perPage = null, string name = null, string contactPersonId = null, string orderBy = null)
        {
             ApiResponse<ClientApplicationsResponse> localVarResponse = GetClientApplicationsOfNotificationWithHttpInfo(notificationId, page, perPage, name, contactPersonId, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all client_applications assigned to a notification Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Id of the notification to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of ClientApplicationsResponse</returns>
        public ApiResponse< ClientApplicationsResponse > GetClientApplicationsOfNotificationWithHttpInfo (long? notificationId, int? page = null, int? perPage = null, string name = null, string contactPersonId = null, string orderBy = null)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling NotificationApi->GetClientApplicationsOfNotification");

            var localVarPath = "/notifications/{notification_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (contactPersonId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_person_id", contactPersonId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientApplicationsOfNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationsResponse)));
        }

        /// <summary>
        /// Get all client_applications assigned to a notification Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Id of the notification to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ClientApplicationsResponse</returns>
        public async System.Threading.Tasks.Task<ClientApplicationsResponse> GetClientApplicationsOfNotificationAsync (long? notificationId, int? page = null, int? perPage = null, string name = null, string contactPersonId = null, string orderBy = null)
        {
             ApiResponse<ClientApplicationsResponse> localVarResponse = await GetClientApplicationsOfNotificationAsyncWithHttpInfo(notificationId, page, perPage, name, contactPersonId, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all client_applications assigned to a notification Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list. Only client_applications on which the user has the can_read permission are loaded.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">Id of the notification to update</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contactPersonId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ClientApplicationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientApplicationsResponse>> GetClientApplicationsOfNotificationAsyncWithHttpInfo (long? notificationId, int? page = null, int? perPage = null, string name = null, string contactPersonId = null, string orderBy = null)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling NotificationApi->GetClientApplicationsOfNotification");

            var localVarPath = "/notifications/{notification_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (contactPersonId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_person_id", contactPersonId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientApplicationsOfNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientApplicationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClientApplicationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientApplicationsResponse)));
        }

        /// <summary>
        /// Get a single notification Get a specific notification identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of notification to fetch</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>NotificationResponse</returns>
        public NotificationResponse GetNotificationById (long? id, string acceptLanguage = null)
        {
             ApiResponse<NotificationResponse> localVarResponse = GetNotificationByIdWithHttpInfo(id, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single notification Get a specific notification identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of notification to fetch</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of NotificationResponse</returns>
        public ApiResponse< NotificationResponse > GetNotificationByIdWithHttpInfo (long? id, string acceptLanguage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationApi->GetNotificationById");

            var localVarPath = "/notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationResponse)));
        }

        /// <summary>
        /// Get a single notification Get a specific notification identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of notification to fetch</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of NotificationResponse</returns>
        public async System.Threading.Tasks.Task<NotificationResponse> GetNotificationByIdAsync (long? id, string acceptLanguage = null)
        {
             ApiResponse<NotificationResponse> localVarResponse = await GetNotificationByIdAsyncWithHttpInfo(id, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single notification Get a specific notification identified by the id in the URL. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of notification to fetch</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (NotificationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationResponse>> GetNotificationByIdAsyncWithHttpInfo (long? id, string acceptLanguage = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationApi->GetNotificationById");

            var localVarPath = "/notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NotificationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationResponse)));
        }

        /// <summary>
        /// Get a range of notifications Returns a list of all notifications available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="name">searches notifications with given name (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Notifications</returns>
        public Notifications GetNotifications (int? page = null, int? perPage = null, long? clientApplicationId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string name = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<Notifications> localVarResponse = GetNotificationsWithHttpInfo(page, perPage, clientApplicationId, startDatetime, startDatetimeFrom, startDatetimeTo, endDatetime, endDatetimeFrom, endDatetimeTo, name, orderBy, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a range of notifications Returns a list of all notifications available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="name">searches notifications with given name (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of Notifications</returns>
        public ApiResponse< Notifications > GetNotificationsWithHttpInfo (int? page = null, int? perPage = null, long? clientApplicationId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string name = null, string orderBy = null, string acceptLanguage = null)
        {

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (clientApplicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_application_id", clientApplicationId)); // query parameter
            if (startDatetime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_datetime", startDatetime)); // query parameter
            if (startDatetimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_datetime_from", startDatetimeFrom)); // query parameter
            if (startDatetimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_datetime_to", startDatetimeTo)); // query parameter
            if (endDatetime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_datetime", endDatetime)); // query parameter
            if (endDatetimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_datetime_from", endDatetimeFrom)); // query parameter
            if (endDatetimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_datetime_to", endDatetimeTo)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notifications>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Notifications) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notifications)));
        }

        /// <summary>
        /// Get a range of notifications Returns a list of all notifications available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="name">searches notifications with given name (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of Notifications</returns>
        public async System.Threading.Tasks.Task<Notifications> GetNotificationsAsync (int? page = null, int? perPage = null, long? clientApplicationId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string name = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<Notifications> localVarResponse = await GetNotificationsAsyncWithHttpInfo(page, perPage, clientApplicationId, startDatetime, startDatetimeFrom, startDatetimeTo, endDatetime, endDatetimeFrom, endDatetimeTo, name, orderBy, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a range of notifications Returns a list of all notifications available in your scope. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;content&#x60;&#x60;&#x60;. To get a translation set Accept-Language.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="name">searches notifications with given name (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (Notifications)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Notifications>> GetNotificationsAsyncWithHttpInfo (int? page = null, int? perPage = null, long? clientApplicationId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string name = null, string orderBy = null, string acceptLanguage = null)
        {

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (clientApplicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_application_id", clientApplicationId)); // query parameter
            if (startDatetime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_datetime", startDatetime)); // query parameter
            if (startDatetimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_datetime_from", startDatetimeFrom)); // query parameter
            if (startDatetimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_datetime_to", startDatetimeTo)); // query parameter
            if (endDatetime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_datetime", endDatetime)); // query parameter
            if (endDatetimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_datetime_from", endDatetimeFrom)); // query parameter
            if (endDatetimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_datetime_to", endDatetimeTo)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notifications>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Notifications) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notifications)));
        }

        /// <summary>
        /// Remove client_application form a notification Remove one or more client_applications from a notification
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="notificationId">Id of the notification from which the client_applications will be removed</param>
        /// <returns></returns>
        public void RemoteClientApplicationsFromNotification (ClientApplicationIDs body, long? notificationId)
        {
             RemoteClientApplicationsFromNotificationWithHttpInfo(body, notificationId);
        }

        /// <summary>
        /// Remove client_application form a notification Remove one or more client_applications from a notification
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="notificationId">Id of the notification from which the client_applications will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoteClientApplicationsFromNotificationWithHttpInfo (ClientApplicationIDs body, long? notificationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NotificationApi->RemoteClientApplicationsFromNotification");
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling NotificationApi->RemoteClientApplicationsFromNotification");

            var localVarPath = "/notifications/{notification_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoteClientApplicationsFromNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove client_application form a notification Remove one or more client_applications from a notification
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="notificationId">Id of the notification from which the client_applications will be removed</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoteClientApplicationsFromNotificationAsync (ClientApplicationIDs body, long? notificationId)
        {
             await RemoteClientApplicationsFromNotificationAsyncWithHttpInfo(body, notificationId);

        }

        /// <summary>
        /// Remove client_application form a notification Remove one or more client_applications from a notification
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="notificationId">Id of the notification from which the client_applications will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoteClientApplicationsFromNotificationAsyncWithHttpInfo (ClientApplicationIDs body, long? notificationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NotificationApi->RemoteClientApplicationsFromNotification");
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling NotificationApi->RemoteClientApplicationsFromNotification");

            var localVarPath = "/notifications/{notification_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoteClientApplicationsFromNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the client_applications of a notification Replaces all client_applications belonging to a notificatoin. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="notificationId">Id of the notification of which the client_applications will be replaced</param>
        /// <returns></returns>
        public void ReplaceClientApplicationsOfNotification (ClientApplicationIDs body, long? notificationId)
        {
             ReplaceClientApplicationsOfNotificationWithHttpInfo(body, notificationId);
        }

        /// <summary>
        /// Replace the client_applications of a notification Replaces all client_applications belonging to a notificatoin. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="notificationId">Id of the notification of which the client_applications will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReplaceClientApplicationsOfNotificationWithHttpInfo (ClientApplicationIDs body, long? notificationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NotificationApi->ReplaceClientApplicationsOfNotification");
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling NotificationApi->ReplaceClientApplicationsOfNotification");

            var localVarPath = "/notifications/{notification_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceClientApplicationsOfNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the client_applications of a notification Replaces all client_applications belonging to a notificatoin. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="notificationId">Id of the notification of which the client_applications will be replaced</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceClientApplicationsOfNotificationAsync (ClientApplicationIDs body, long? notificationId)
        {
             await ReplaceClientApplicationsOfNotificationAsyncWithHttpInfo(body, notificationId);

        }

        /// <summary>
        /// Replace the client_applications of a notification Replaces all client_applications belonging to a notificatoin. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="notificationId">Id of the notification of which the client_applications will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceClientApplicationsOfNotificationAsyncWithHttpInfo (ClientApplicationIDs body, long? notificationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NotificationApi->ReplaceClientApplicationsOfNotification");
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling NotificationApi->ReplaceClientApplicationsOfNotification");

            var localVarPath = "/notifications/{notification_id}/client_applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceClientApplicationsOfNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a notification Update accessible parameters of the requested resource. The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the notification to update</param>
        /// <param name="contentLanguage">language of the content (optional)</param>
        /// <returns></returns>
        public void UpdateNotification (NotificationRequest body, long? id, string contentLanguage = null)
        {
             UpdateNotificationWithHttpInfo(body, id, contentLanguage);
        }

        /// <summary>
        /// Update a notification Update accessible parameters of the requested resource. The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the notification to update</param>
        /// <param name="contentLanguage">language of the content (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateNotificationWithHttpInfo (NotificationRequest body, long? id, string contentLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NotificationApi->UpdateNotification");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationApi->UpdateNotification");

            var localVarPath = "/notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contentLanguage != null) localVarHeaderParams.Add("Content-Language", this.Configuration.ApiClient.ParameterToString(contentLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a notification Update accessible parameters of the requested resource. The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the notification to update</param>
        /// <param name="contentLanguage">language of the content (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateNotificationAsync (NotificationRequest body, long? id, string contentLanguage = null)
        {
             await UpdateNotificationAsyncWithHttpInfo(body, id, contentLanguage);

        }

        /// <summary>
        /// Update a notification Update accessible parameters of the requested resource. The notification content can be formatted with markdown. The only html tag allowed is &#x60;&#x60;&#x60;a&#x60;&#x60;&#x60;, all other tags will be silently removed. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To add a translation set Content-Language.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated.</param>
        /// <param name="id">Id of the notification to update</param>
        /// <param name="contentLanguage">language of the content (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateNotificationAsyncWithHttpInfo (NotificationRequest body, long? id, string contentLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NotificationApi->UpdateNotification");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationApi->UpdateNotification");

            var localVarPath = "/notifications/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contentLanguage != null) localVarHeaderParams.Add("Content-Language", this.Configuration.ApiClient.ParameterToString(contentLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
