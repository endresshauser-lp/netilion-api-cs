/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Netilion.Api.Client;
using Netilion.Api.Model;

namespace Netilion.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProductHealthConditionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add health conditions to an product
        /// </summary>
        /// <remarks>
        /// Add one or more health conditions to an product.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns></returns>
        void AddHealthConditionsToProduct (HealthConditionsRequest body, long? productId);

        /// <summary>
        /// Add health conditions to an product
        /// </summary>
        /// <remarks>
        /// Add one or more health conditions to an product.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddHealthConditionsToProductWithHttpInfo (HealthConditionsRequest body, long? productId);
        /// <summary>
        /// Get all health conditions assigned to an product
        /// </summary>
        /// <remarks>
        /// Returns a list of health conditions of an product.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="deviceIdent">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60; and &#x60;MODBUS&#x60; (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;diagnosis_code&#x60;, &#x60;device_ident&#x60;, &#x60;product_identifier&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>HealthConditionsResponse</returns>
        HealthConditionsResponse GetProductHealthConditions (long? productId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string deviceIdent = null, string productIdentifier = null, string protocol = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get all health conditions assigned to an product
        /// </summary>
        /// <remarks>
        /// Returns a list of health conditions of an product.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="deviceIdent">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60; and &#x60;MODBUS&#x60; (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;diagnosis_code&#x60;, &#x60;device_ident&#x60;, &#x60;product_identifier&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of HealthConditionsResponse</returns>
        ApiResponse<HealthConditionsResponse> GetProductHealthConditionsWithHttpInfo (long? productId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string deviceIdent = null, string productIdentifier = null, string protocol = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Replace health conditions of an product
        /// </summary>
        /// <remarks>
        /// Replaces all health conditions belonging to an product. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns></returns>
        void ReaplaceHealthConditionsOfProduct (HealthConditionsRequest body, long? productId);

        /// <summary>
        /// Replace health conditions of an product
        /// </summary>
        /// <remarks>
        /// Replaces all health conditions belonging to an product. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReaplaceHealthConditionsOfProductWithHttpInfo (HealthConditionsRequest body, long? productId);
        /// <summary>
        /// Remove health conditions of an product
        /// </summary>
        /// <remarks>
        /// Remove one or more health conditions from an product.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns></returns>
        void RemoveHealthConditionsOfProduct (HealthConditionCauseIDs body, long? productId);

        /// <summary>
        /// Remove health conditions of an product
        /// </summary>
        /// <remarks>
        /// Remove one or more health conditions from an product.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveHealthConditionsOfProductWithHttpInfo (HealthConditionCauseIDs body, long? productId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add health conditions to an product
        /// </summary>
        /// <remarks>
        /// Add one or more health conditions to an product.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddHealthConditionsToProductAsync (HealthConditionsRequest body, long? productId);

        /// <summary>
        /// Add health conditions to an product
        /// </summary>
        /// <remarks>
        /// Add one or more health conditions to an product.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddHealthConditionsToProductAsyncWithHttpInfo (HealthConditionsRequest body, long? productId);
        /// <summary>
        /// Get all health conditions assigned to an product
        /// </summary>
        /// <remarks>
        /// Returns a list of health conditions of an product.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="deviceIdent">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60; and &#x60;MODBUS&#x60; (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;diagnosis_code&#x60;, &#x60;device_ident&#x60;, &#x60;product_identifier&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of HealthConditionsResponse</returns>
        System.Threading.Tasks.Task<HealthConditionsResponse> GetProductHealthConditionsAsync (long? productId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string deviceIdent = null, string productIdentifier = null, string protocol = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get all health conditions assigned to an product
        /// </summary>
        /// <remarks>
        /// Returns a list of health conditions of an product.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="deviceIdent">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60; and &#x60;MODBUS&#x60; (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;diagnosis_code&#x60;, &#x60;device_ident&#x60;, &#x60;product_identifier&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (HealthConditionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HealthConditionsResponse>> GetProductHealthConditionsAsyncWithHttpInfo (long? productId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string deviceIdent = null, string productIdentifier = null, string protocol = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Replace health conditions of an product
        /// </summary>
        /// <remarks>
        /// Replaces all health conditions belonging to an product. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReaplaceHealthConditionsOfProductAsync (HealthConditionsRequest body, long? productId);

        /// <summary>
        /// Replace health conditions of an product
        /// </summary>
        /// <remarks>
        /// Replaces all health conditions belonging to an product. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReaplaceHealthConditionsOfProductAsyncWithHttpInfo (HealthConditionsRequest body, long? productId);
        /// <summary>
        /// Remove health conditions of an product
        /// </summary>
        /// <remarks>
        /// Remove one or more health conditions from an product.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveHealthConditionsOfProductAsync (HealthConditionCauseIDs body, long? productId);

        /// <summary>
        /// Remove health conditions of an product
        /// </summary>
        /// <remarks>
        /// Remove one or more health conditions from an product.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveHealthConditionsOfProductAsyncWithHttpInfo (HealthConditionCauseIDs body, long? productId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProductHealthConditionApi : IProductHealthConditionApi
    {
        private Netilion.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductHealthConditionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductHealthConditionApi(String basePath)
        {
            this.Configuration = new Netilion.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductHealthConditionApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProductHealthConditionApi()
        {
            this.Configuration = Netilion.Api.Client.Configuration.Default;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductHealthConditionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductHealthConditionApi(Netilion.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Netilion.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Netilion.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Netilion.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add health conditions to an product Add one or more health conditions to an product.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns></returns>
        public void AddHealthConditionsToProduct (HealthConditionsRequest body, long? productId)
        {
             AddHealthConditionsToProductWithHttpInfo(body, productId);
        }

        /// <summary>
        /// Add health conditions to an product Add one or more health conditions to an product.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddHealthConditionsToProductWithHttpInfo (HealthConditionsRequest body, long? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductHealthConditionApi->AddHealthConditionsToProduct");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductHealthConditionApi->AddHealthConditionsToProduct");

            var localVarPath = "/products/{product_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHealthConditionsToProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add health conditions to an product Add one or more health conditions to an product.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddHealthConditionsToProductAsync (HealthConditionsRequest body, long? productId)
        {
             await AddHealthConditionsToProductAsyncWithHttpInfo(body, productId);

        }

        /// <summary>
        /// Add health conditions to an product Add one or more health conditions to an product.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddHealthConditionsToProductAsyncWithHttpInfo (HealthConditionsRequest body, long? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductHealthConditionApi->AddHealthConditionsToProduct");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductHealthConditionApi->AddHealthConditionsToProduct");

            var localVarPath = "/products/{product_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHealthConditionsToProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get all health conditions assigned to an product Returns a list of health conditions of an product.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="deviceIdent">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60; and &#x60;MODBUS&#x60; (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;diagnosis_code&#x60;, &#x60;device_ident&#x60;, &#x60;product_identifier&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>HealthConditionsResponse</returns>
        public HealthConditionsResponse GetProductHealthConditions (long? productId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string deviceIdent = null, string productIdentifier = null, string protocol = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<HealthConditionsResponse> localVarResponse = GetProductHealthConditionsWithHttpInfo(productId, page, perPage, include, healthConditionId, diagnosisCode, deviceIdent, productIdentifier, protocol, orderBy, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all health conditions assigned to an product Returns a list of health conditions of an product.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="deviceIdent">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60; and &#x60;MODBUS&#x60; (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;diagnosis_code&#x60;, &#x60;device_ident&#x60;, &#x60;product_identifier&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of HealthConditionsResponse</returns>
        public ApiResponse< HealthConditionsResponse > GetProductHealthConditionsWithHttpInfo (long? productId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string deviceIdent = null, string productIdentifier = null, string protocol = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductHealthConditionApi->GetProductHealthConditions");

            var localVarPath = "/products/{product_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (healthConditionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "health_condition_id", healthConditionId)); // query parameter
            if (diagnosisCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "diagnosis_code", diagnosisCode)); // query parameter
            if (deviceIdent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_ident", deviceIdent)); // query parameter
            if (productIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_identifier", productIdentifier)); // query parameter
            if (protocol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocol", protocol)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductHealthConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HealthConditionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HealthConditionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HealthConditionsResponse)));
        }

        /// <summary>
        /// Get all health conditions assigned to an product Returns a list of health conditions of an product.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="deviceIdent">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60; and &#x60;MODBUS&#x60; (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;diagnosis_code&#x60;, &#x60;device_ident&#x60;, &#x60;product_identifier&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of HealthConditionsResponse</returns>
        public async System.Threading.Tasks.Task<HealthConditionsResponse> GetProductHealthConditionsAsync (long? productId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string deviceIdent = null, string productIdentifier = null, string protocol = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<HealthConditionsResponse> localVarResponse = await GetProductHealthConditionsAsyncWithHttpInfo(productId, page, perPage, include, healthConditionId, diagnosisCode, deviceIdent, productIdentifier, protocol, orderBy, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all health conditions assigned to an product Returns a list of health conditions of an product.  Possible include value: &#x60;&#x60;asset_status, causes, causes.remedies&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="healthConditionId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="diagnosisCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="deviceIdent">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productIdentifier">Filter accepts * as wildcard (optional)</param>
        /// <param name="protocol">Filter accepts &#x60;PROFIBUS&#x60;, &#x60;HART&#x60;, &#x60;ETHERNETIP&#x60; and &#x60;MODBUS&#x60; (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;diagnosis_code&#x60;, &#x60;device_ident&#x60;, &#x60;product_identifier&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (HealthConditionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HealthConditionsResponse>> GetProductHealthConditionsAsyncWithHttpInfo (long? productId, int? page = null, int? perPage = null, string include = null, string healthConditionId = null, string diagnosisCode = null, string deviceIdent = null, string productIdentifier = null, string protocol = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductHealthConditionApi->GetProductHealthConditions");

            var localVarPath = "/products/{product_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (healthConditionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "health_condition_id", healthConditionId)); // query parameter
            if (diagnosisCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "diagnosis_code", diagnosisCode)); // query parameter
            if (deviceIdent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "device_ident", deviceIdent)); // query parameter
            if (productIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_identifier", productIdentifier)); // query parameter
            if (protocol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocol", protocol)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductHealthConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HealthConditionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HealthConditionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HealthConditionsResponse)));
        }

        /// <summary>
        /// Replace health conditions of an product Replaces all health conditions belonging to an product. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns></returns>
        public void ReaplaceHealthConditionsOfProduct (HealthConditionsRequest body, long? productId)
        {
             ReaplaceHealthConditionsOfProductWithHttpInfo(body, productId);
        }

        /// <summary>
        /// Replace health conditions of an product Replaces all health conditions belonging to an product. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReaplaceHealthConditionsOfProductWithHttpInfo (HealthConditionsRequest body, long? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductHealthConditionApi->ReaplaceHealthConditionsOfProduct");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductHealthConditionApi->ReaplaceHealthConditionsOfProduct");

            var localVarPath = "/products/{product_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReaplaceHealthConditionsOfProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace health conditions of an product Replaces all health conditions belonging to an product. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReaplaceHealthConditionsOfProductAsync (HealthConditionsRequest body, long? productId)
        {
             await ReaplaceHealthConditionsOfProductAsyncWithHttpInfo(body, productId);

        }

        /// <summary>
        /// Replace health conditions of an product Replaces all health conditions belonging to an product. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReaplaceHealthConditionsOfProductAsyncWithHttpInfo (HealthConditionsRequest body, long? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductHealthConditionApi->ReaplaceHealthConditionsOfProduct");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductHealthConditionApi->ReaplaceHealthConditionsOfProduct");

            var localVarPath = "/products/{product_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReaplaceHealthConditionsOfProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove health conditions of an product Remove one or more health conditions from an product.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns></returns>
        public void RemoveHealthConditionsOfProduct (HealthConditionCauseIDs body, long? productId)
        {
             RemoveHealthConditionsOfProductWithHttpInfo(body, productId);
        }

        /// <summary>
        /// Remove health conditions of an product Remove one or more health conditions from an product.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveHealthConditionsOfProductWithHttpInfo (HealthConditionCauseIDs body, long? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductHealthConditionApi->RemoveHealthConditionsOfProduct");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductHealthConditionApi->RemoveHealthConditionsOfProduct");

            var localVarPath = "/products/{product_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveHealthConditionsOfProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove health conditions of an product Remove one or more health conditions from an product.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveHealthConditionsOfProductAsync (HealthConditionCauseIDs body, long? productId)
        {
             await RemoveHealthConditionsOfProductAsyncWithHttpInfo(body, productId);

        }

        /// <summary>
        /// Remove health conditions of an product Remove one or more health conditions from an product.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="productId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveHealthConditionsOfProductAsyncWithHttpInfo (HealthConditionCauseIDs body, long? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductHealthConditionApi->RemoveHealthConditionsOfProduct");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductHealthConditionApi->RemoveHealthConditionsOfProduct");

            var localVarPath = "/products/{product_id}/health_conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("product_id", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveHealthConditionsOfProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
