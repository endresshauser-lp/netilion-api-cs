/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Netilion.Api.Client;
using Netilion.Api.Model;

namespace Netilion.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISoftwareAttachmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new link as software attachment
        /// </summary>
        /// <remarks>
        /// Create a software attachments that links to an external resource
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be created</param>
        /// <returns>SoftwareAttachmentResponse</returns>
        SoftwareAttachmentResponse CreateLinkSoftwareAttachment (SoftwareAttachmentLinkRequestPost body);

        /// <summary>
        /// Create a new link as software attachment
        /// </summary>
        /// <remarks>
        /// Create a software attachments that links to an external resource
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be created</param>
        /// <returns>ApiResponse of SoftwareAttachmentResponse</returns>
        ApiResponse<SoftwareAttachmentResponse> CreateLinkSoftwareAttachmentWithHttpInfo (SoftwareAttachmentLinkRequestPost body);
        /// <summary>
        /// Delete a software attachment and the file
        /// </summary>
        /// <remarks>
        /// Delete a specific software attachment resource and file identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to delete</param>
        /// <returns></returns>
        void DeleteSoftwareAttachment (int? id);

        /// <summary>
        /// Delete a software attachment and the file
        /// </summary>
        /// <remarks>
        /// Delete a specific software attachment resource and file identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSoftwareAttachmentWithHttpInfo (int? id);
        /// <summary>
        /// Download the software attachments file
        /// </summary>
        /// <remarks>
        /// Download the file of the software attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns></returns>
        void DownloadSoftwareAttachment (long? id, string disposition = null);

        /// <summary>
        /// Download the software attachments file
        /// </summary>
        /// <remarks>
        /// Download the file of the software attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadSoftwareAttachmentWithHttpInfo (long? id, string disposition = null);
        /// <summary>
        /// Get a single software attachment
        /// </summary>
        /// <remarks>
        /// specific software attachment in your accessible scope, identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <returns>SoftwareAttachmentResponse</returns>
        SoftwareAttachmentResponse GetSoftwareAttachmentById (long? id);

        /// <summary>
        /// Get a single software attachment
        /// </summary>
        /// <remarks>
        /// specific software attachment in your accessible scope, identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <returns>ApiResponse of SoftwareAttachmentResponse</returns>
        ApiResponse<SoftwareAttachmentResponse> GetSoftwareAttachmentByIdWithHttpInfo (long? id);
        /// <summary>
        /// Get a range of software attachments
        /// </summary>
        /// <remarks>
        /// Returns a list of all software attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>SoftwareAttachmentsResponse</returns>
        SoftwareAttachmentsResponse GetSoftwareAttachments (int? page = null, int? perPage = null, DateTime? contentDate = null, string remarks = null, string fileName = null, string orderBy = null);

        /// <summary>
        /// Get a range of software attachments
        /// </summary>
        /// <remarks>
        /// Returns a list of all software attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of SoftwareAttachmentsResponse</returns>
        ApiResponse<SoftwareAttachmentsResponse> GetSoftwareAttachmentsWithHttpInfo (int? page = null, int? perPage = null, DateTime? contentDate = null, string remarks = null, string fileName = null, string orderBy = null);
        /// <summary>
        /// Update a software attachment with a link
        /// </summary>
        /// <remarks>
        /// update an software attachment that has a link
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be updated</param>
        /// <param name="id">Id of the software attachment to update</param>
        /// <returns>SoftwareAttachmentResponse</returns>
        SoftwareAttachmentResponse UpdateLinkSoftwareAttachment (SoftwareAttachmentLinkRequestPatch body, long? id);

        /// <summary>
        /// Update a software attachment with a link
        /// </summary>
        /// <remarks>
        /// update an software attachment that has a link
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be updated</param>
        /// <param name="id">Id of the software attachment to update</param>
        /// <returns>ApiResponse of SoftwareAttachmentResponse</returns>
        ApiResponse<SoftwareAttachmentResponse> UpdateLinkSoftwareAttachmentWithHttpInfo (SoftwareAttachmentLinkRequestPatch body, long? id);
        /// <summary>
        /// Update an software attachment and especially its file
        /// </summary>
        /// <remarks>
        /// The software attachment object and also the file can be changed with a patch call.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="softwareId"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <returns></returns>
        void UpdateSoftwareAttachment (long? id, byte[] file = null, long? softwareId = null, string contentDate = null, string remarks = null);

        /// <summary>
        /// Update an software attachment and especially its file
        /// </summary>
        /// <remarks>
        /// The software attachment object and also the file can be changed with a patch call.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="softwareId"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSoftwareAttachmentWithHttpInfo (long? id, byte[] file = null, long? softwareId = null, string contentDate = null, string remarks = null);
        /// <summary>
        /// Create and upload a new software attachment
        /// </summary>
        /// <remarks>
        /// the creation of an software attachment works through a multipart/form-data upload of the file and its filename.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="softwareId"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <returns>SoftwareAttachmentResponse</returns>
        SoftwareAttachmentResponse UploadSoftwareAttachment (byte[] file, long? softwareId, string contentDate, string remarks);

        /// <summary>
        /// Create and upload a new software attachment
        /// </summary>
        /// <remarks>
        /// the creation of an software attachment works through a multipart/form-data upload of the file and its filename.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="softwareId"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <returns>ApiResponse of SoftwareAttachmentResponse</returns>
        ApiResponse<SoftwareAttachmentResponse> UploadSoftwareAttachmentWithHttpInfo (byte[] file, long? softwareId, string contentDate, string remarks);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new link as software attachment
        /// </summary>
        /// <remarks>
        /// Create a software attachments that links to an external resource
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be created</param>
        /// <returns>Task of SoftwareAttachmentResponse</returns>
        System.Threading.Tasks.Task<SoftwareAttachmentResponse> CreateLinkSoftwareAttachmentAsync (SoftwareAttachmentLinkRequestPost body);

        /// <summary>
        /// Create a new link as software attachment
        /// </summary>
        /// <remarks>
        /// Create a software attachments that links to an external resource
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be created</param>
        /// <returns>Task of ApiResponse (SoftwareAttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoftwareAttachmentResponse>> CreateLinkSoftwareAttachmentAsyncWithHttpInfo (SoftwareAttachmentLinkRequestPost body);
        /// <summary>
        /// Delete a software attachment and the file
        /// </summary>
        /// <remarks>
        /// Delete a specific software attachment resource and file identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSoftwareAttachmentAsync (int? id);

        /// <summary>
        /// Delete a software attachment and the file
        /// </summary>
        /// <remarks>
        /// Delete a specific software attachment resource and file identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSoftwareAttachmentAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Download the software attachments file
        /// </summary>
        /// <remarks>
        /// Download the file of the software attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadSoftwareAttachmentAsync (long? id, string disposition = null);

        /// <summary>
        /// Download the software attachments file
        /// </summary>
        /// <remarks>
        /// Download the file of the software attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadSoftwareAttachmentAsyncWithHttpInfo (long? id, string disposition = null);
        /// <summary>
        /// Get a single software attachment
        /// </summary>
        /// <remarks>
        /// specific software attachment in your accessible scope, identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <returns>Task of SoftwareAttachmentResponse</returns>
        System.Threading.Tasks.Task<SoftwareAttachmentResponse> GetSoftwareAttachmentByIdAsync (long? id);

        /// <summary>
        /// Get a single software attachment
        /// </summary>
        /// <remarks>
        /// specific software attachment in your accessible scope, identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <returns>Task of ApiResponse (SoftwareAttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoftwareAttachmentResponse>> GetSoftwareAttachmentByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get a range of software attachments
        /// </summary>
        /// <remarks>
        /// Returns a list of all software attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of SoftwareAttachmentsResponse</returns>
        System.Threading.Tasks.Task<SoftwareAttachmentsResponse> GetSoftwareAttachmentsAsync (int? page = null, int? perPage = null, DateTime? contentDate = null, string remarks = null, string fileName = null, string orderBy = null);

        /// <summary>
        /// Get a range of software attachments
        /// </summary>
        /// <remarks>
        /// Returns a list of all software attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (SoftwareAttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoftwareAttachmentsResponse>> GetSoftwareAttachmentsAsyncWithHttpInfo (int? page = null, int? perPage = null, DateTime? contentDate = null, string remarks = null, string fileName = null, string orderBy = null);
        /// <summary>
        /// Update a software attachment with a link
        /// </summary>
        /// <remarks>
        /// update an software attachment that has a link
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be updated</param>
        /// <param name="id">Id of the software attachment to update</param>
        /// <returns>Task of SoftwareAttachmentResponse</returns>
        System.Threading.Tasks.Task<SoftwareAttachmentResponse> UpdateLinkSoftwareAttachmentAsync (SoftwareAttachmentLinkRequestPatch body, long? id);

        /// <summary>
        /// Update a software attachment with a link
        /// </summary>
        /// <remarks>
        /// update an software attachment that has a link
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be updated</param>
        /// <param name="id">Id of the software attachment to update</param>
        /// <returns>Task of ApiResponse (SoftwareAttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoftwareAttachmentResponse>> UpdateLinkSoftwareAttachmentAsyncWithHttpInfo (SoftwareAttachmentLinkRequestPatch body, long? id);
        /// <summary>
        /// Update an software attachment and especially its file
        /// </summary>
        /// <remarks>
        /// The software attachment object and also the file can be changed with a patch call.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="softwareId"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSoftwareAttachmentAsync (long? id, byte[] file = null, long? softwareId = null, string contentDate = null, string remarks = null);

        /// <summary>
        /// Update an software attachment and especially its file
        /// </summary>
        /// <remarks>
        /// The software attachment object and also the file can be changed with a patch call.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="softwareId"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSoftwareAttachmentAsyncWithHttpInfo (long? id, byte[] file = null, long? softwareId = null, string contentDate = null, string remarks = null);
        /// <summary>
        /// Create and upload a new software attachment
        /// </summary>
        /// <remarks>
        /// the creation of an software attachment works through a multipart/form-data upload of the file and its filename.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="softwareId"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <returns>Task of SoftwareAttachmentResponse</returns>
        System.Threading.Tasks.Task<SoftwareAttachmentResponse> UploadSoftwareAttachmentAsync (byte[] file, long? softwareId, string contentDate, string remarks);

        /// <summary>
        /// Create and upload a new software attachment
        /// </summary>
        /// <remarks>
        /// the creation of an software attachment works through a multipart/form-data upload of the file and its filename.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="softwareId"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <returns>Task of ApiResponse (SoftwareAttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoftwareAttachmentResponse>> UploadSoftwareAttachmentAsyncWithHttpInfo (byte[] file, long? softwareId, string contentDate, string remarks);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SoftwareAttachmentApi : ISoftwareAttachmentApi
    {
        private Netilion.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareAttachmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SoftwareAttachmentApi(String basePath)
        {
            this.Configuration = new Netilion.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareAttachmentApi"/> class
        /// </summary>
        /// <returns></returns>
        public SoftwareAttachmentApi()
        {
            this.Configuration = Netilion.Api.Client.Configuration.Default;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareAttachmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SoftwareAttachmentApi(Netilion.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Netilion.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Netilion.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Netilion.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new link as software attachment Create a software attachments that links to an external resource
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be created</param>
        /// <returns>SoftwareAttachmentResponse</returns>
        public SoftwareAttachmentResponse CreateLinkSoftwareAttachment (SoftwareAttachmentLinkRequestPost body)
        {
             ApiResponse<SoftwareAttachmentResponse> localVarResponse = CreateLinkSoftwareAttachmentWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new link as software attachment Create a software attachments that links to an external resource
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be created</param>
        /// <returns>ApiResponse of SoftwareAttachmentResponse</returns>
        public ApiResponse< SoftwareAttachmentResponse > CreateLinkSoftwareAttachmentWithHttpInfo (SoftwareAttachmentLinkRequestPost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SoftwareAttachmentApi->CreateLinkSoftwareAttachment");

            var localVarPath = "/software/attachments/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLinkSoftwareAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwareAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareAttachmentResponse)));
        }

        /// <summary>
        /// Create a new link as software attachment Create a software attachments that links to an external resource
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be created</param>
        /// <returns>Task of SoftwareAttachmentResponse</returns>
        public async System.Threading.Tasks.Task<SoftwareAttachmentResponse> CreateLinkSoftwareAttachmentAsync (SoftwareAttachmentLinkRequestPost body)
        {
             ApiResponse<SoftwareAttachmentResponse> localVarResponse = await CreateLinkSoftwareAttachmentAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new link as software attachment Create a software attachments that links to an external resource
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be created</param>
        /// <returns>Task of ApiResponse (SoftwareAttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SoftwareAttachmentResponse>> CreateLinkSoftwareAttachmentAsyncWithHttpInfo (SoftwareAttachmentLinkRequestPost body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SoftwareAttachmentApi->CreateLinkSoftwareAttachment");

            var localVarPath = "/software/attachments/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLinkSoftwareAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwareAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareAttachmentResponse)));
        }

        /// <summary>
        /// Delete a software attachment and the file Delete a specific software attachment resource and file identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to delete</param>
        /// <returns></returns>
        public void DeleteSoftwareAttachment (int? id)
        {
             DeleteSoftwareAttachmentWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a software attachment and the file Delete a specific software attachment resource and file identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSoftwareAttachmentWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SoftwareAttachmentApi->DeleteSoftwareAttachment");

            var localVarPath = "/software/attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSoftwareAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a software attachment and the file Delete a specific software attachment resource and file identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSoftwareAttachmentAsync (int? id)
        {
             await DeleteSoftwareAttachmentAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a software attachment and the file Delete a specific software attachment resource and file identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSoftwareAttachmentAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SoftwareAttachmentApi->DeleteSoftwareAttachment");

            var localVarPath = "/software/attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSoftwareAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download the software attachments file Download the file of the software attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns></returns>
        public void DownloadSoftwareAttachment (long? id, string disposition = null)
        {
             DownloadSoftwareAttachmentWithHttpInfo(id, disposition);
        }

        /// <summary>
        /// Download the software attachments file Download the file of the software attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DownloadSoftwareAttachmentWithHttpInfo (long? id, string disposition = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SoftwareAttachmentApi->DownloadSoftwareAttachment");

            var localVarPath = "/software/attachments/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disposition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disposition", disposition)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadSoftwareAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download the software attachments file Download the file of the software attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadSoftwareAttachmentAsync (long? id, string disposition = null)
        {
             await DownloadSoftwareAttachmentAsyncWithHttpInfo(id, disposition);

        }

        /// <summary>
        /// Download the software attachments file Download the file of the software attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadSoftwareAttachmentAsyncWithHttpInfo (long? id, string disposition = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SoftwareAttachmentApi->DownloadSoftwareAttachment");

            var localVarPath = "/software/attachments/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disposition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disposition", disposition)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadSoftwareAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a single software attachment specific software attachment in your accessible scope, identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <returns>SoftwareAttachmentResponse</returns>
        public SoftwareAttachmentResponse GetSoftwareAttachmentById (long? id)
        {
             ApiResponse<SoftwareAttachmentResponse> localVarResponse = GetSoftwareAttachmentByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single software attachment specific software attachment in your accessible scope, identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <returns>ApiResponse of SoftwareAttachmentResponse</returns>
        public ApiResponse< SoftwareAttachmentResponse > GetSoftwareAttachmentByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SoftwareAttachmentApi->GetSoftwareAttachmentById");

            var localVarPath = "/software/attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSoftwareAttachmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwareAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareAttachmentResponse)));
        }

        /// <summary>
        /// Get a single software attachment specific software attachment in your accessible scope, identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <returns>Task of SoftwareAttachmentResponse</returns>
        public async System.Threading.Tasks.Task<SoftwareAttachmentResponse> GetSoftwareAttachmentByIdAsync (long? id)
        {
             ApiResponse<SoftwareAttachmentResponse> localVarResponse = await GetSoftwareAttachmentByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single software attachment specific software attachment in your accessible scope, identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to fetch</param>
        /// <returns>Task of ApiResponse (SoftwareAttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SoftwareAttachmentResponse>> GetSoftwareAttachmentByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SoftwareAttachmentApi->GetSoftwareAttachmentById");

            var localVarPath = "/software/attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSoftwareAttachmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwareAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareAttachmentResponse)));
        }

        /// <summary>
        /// Get a range of software attachments Returns a list of all software attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>SoftwareAttachmentsResponse</returns>
        public SoftwareAttachmentsResponse GetSoftwareAttachments (int? page = null, int? perPage = null, DateTime? contentDate = null, string remarks = null, string fileName = null, string orderBy = null)
        {
             ApiResponse<SoftwareAttachmentsResponse> localVarResponse = GetSoftwareAttachmentsWithHttpInfo(page, perPage, contentDate, remarks, fileName, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a range of software attachments Returns a list of all software attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of SoftwareAttachmentsResponse</returns>
        public ApiResponse< SoftwareAttachmentsResponse > GetSoftwareAttachmentsWithHttpInfo (int? page = null, int? perPage = null, DateTime? contentDate = null, string remarks = null, string fileName = null, string orderBy = null)
        {

            var localVarPath = "/software/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (contentDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_date", contentDate)); // query parameter
            if (remarks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "remarks", remarks)); // query parameter
            if (fileName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "file_name", fileName)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSoftwareAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareAttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwareAttachmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareAttachmentsResponse)));
        }

        /// <summary>
        /// Get a range of software attachments Returns a list of all software attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of SoftwareAttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<SoftwareAttachmentsResponse> GetSoftwareAttachmentsAsync (int? page = null, int? perPage = null, DateTime? contentDate = null, string remarks = null, string fileName = null, string orderBy = null)
        {
             ApiResponse<SoftwareAttachmentsResponse> localVarResponse = await GetSoftwareAttachmentsAsyncWithHttpInfo(page, perPage, contentDate, remarks, fileName, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a range of software attachments Returns a list of all software attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (SoftwareAttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SoftwareAttachmentsResponse>> GetSoftwareAttachmentsAsyncWithHttpInfo (int? page = null, int? perPage = null, DateTime? contentDate = null, string remarks = null, string fileName = null, string orderBy = null)
        {

            var localVarPath = "/software/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (contentDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_date", contentDate)); // query parameter
            if (remarks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "remarks", remarks)); // query parameter
            if (fileName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "file_name", fileName)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSoftwareAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareAttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwareAttachmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareAttachmentsResponse)));
        }

        /// <summary>
        /// Update a software attachment with a link update an software attachment that has a link
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be updated</param>
        /// <param name="id">Id of the software attachment to update</param>
        /// <returns>SoftwareAttachmentResponse</returns>
        public SoftwareAttachmentResponse UpdateLinkSoftwareAttachment (SoftwareAttachmentLinkRequestPatch body, long? id)
        {
             ApiResponse<SoftwareAttachmentResponse> localVarResponse = UpdateLinkSoftwareAttachmentWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a software attachment with a link update an software attachment that has a link
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be updated</param>
        /// <param name="id">Id of the software attachment to update</param>
        /// <returns>ApiResponse of SoftwareAttachmentResponse</returns>
        public ApiResponse< SoftwareAttachmentResponse > UpdateLinkSoftwareAttachmentWithHttpInfo (SoftwareAttachmentLinkRequestPatch body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SoftwareAttachmentApi->UpdateLinkSoftwareAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SoftwareAttachmentApi->UpdateLinkSoftwareAttachment");

            var localVarPath = "/software/attachments/links/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLinkSoftwareAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwareAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareAttachmentResponse)));
        }

        /// <summary>
        /// Update a software attachment with a link update an software attachment that has a link
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be updated</param>
        /// <param name="id">Id of the software attachment to update</param>
        /// <returns>Task of SoftwareAttachmentResponse</returns>
        public async System.Threading.Tasks.Task<SoftwareAttachmentResponse> UpdateLinkSoftwareAttachmentAsync (SoftwareAttachmentLinkRequestPatch body, long? id)
        {
             ApiResponse<SoftwareAttachmentResponse> localVarResponse = await UpdateLinkSoftwareAttachmentAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a software attachment with a link update an software attachment that has a link
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Software attachment object that needs to be updated</param>
        /// <param name="id">Id of the software attachment to update</param>
        /// <returns>Task of ApiResponse (SoftwareAttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SoftwareAttachmentResponse>> UpdateLinkSoftwareAttachmentAsyncWithHttpInfo (SoftwareAttachmentLinkRequestPatch body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SoftwareAttachmentApi->UpdateLinkSoftwareAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SoftwareAttachmentApi->UpdateLinkSoftwareAttachment");

            var localVarPath = "/software/attachments/links/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLinkSoftwareAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwareAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareAttachmentResponse)));
        }

        /// <summary>
        /// Update an software attachment and especially its file The software attachment object and also the file can be changed with a patch call.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="softwareId"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <returns></returns>
        public void UpdateSoftwareAttachment (long? id, byte[] file = null, long? softwareId = null, string contentDate = null, string remarks = null)
        {
             UpdateSoftwareAttachmentWithHttpInfo(id, file, softwareId, contentDate, remarks);
        }

        /// <summary>
        /// Update an software attachment and especially its file The software attachment object and also the file can be changed with a patch call.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="softwareId"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSoftwareAttachmentWithHttpInfo (long? id, byte[] file = null, long? softwareId = null, string contentDate = null, string remarks = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SoftwareAttachmentApi->UpdateSoftwareAttachment");

            var localVarPath = "/software/attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (softwareId != null) localVarFormParams.Add("software_id", this.Configuration.ApiClient.ParameterToString(softwareId)); // form parameter
            if (contentDate != null) localVarFormParams.Add("content_date", this.Configuration.ApiClient.ParameterToString(contentDate)); // form parameter
            if (remarks != null) localVarFormParams.Add("remarks", this.Configuration.ApiClient.ParameterToString(remarks)); // form parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSoftwareAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update an software attachment and especially its file The software attachment object and also the file can be changed with a patch call.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="softwareId"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSoftwareAttachmentAsync (long? id, byte[] file = null, long? softwareId = null, string contentDate = null, string remarks = null)
        {
             await UpdateSoftwareAttachmentAsyncWithHttpInfo(id, file, softwareId, contentDate, remarks);

        }

        /// <summary>
        /// Update an software attachment and especially its file The software attachment object and also the file can be changed with a patch call.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the software attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="softwareId"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSoftwareAttachmentAsyncWithHttpInfo (long? id, byte[] file = null, long? softwareId = null, string contentDate = null, string remarks = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SoftwareAttachmentApi->UpdateSoftwareAttachment");

            var localVarPath = "/software/attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (softwareId != null) localVarFormParams.Add("software_id", this.Configuration.ApiClient.ParameterToString(softwareId)); // form parameter
            if (contentDate != null) localVarFormParams.Add("content_date", this.Configuration.ApiClient.ParameterToString(contentDate)); // form parameter
            if (remarks != null) localVarFormParams.Add("remarks", this.Configuration.ApiClient.ParameterToString(remarks)); // form parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSoftwareAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create and upload a new software attachment the creation of an software attachment works through a multipart/form-data upload of the file and its filename.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="softwareId"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <returns>SoftwareAttachmentResponse</returns>
        public SoftwareAttachmentResponse UploadSoftwareAttachment (byte[] file, long? softwareId, string contentDate, string remarks)
        {
             ApiResponse<SoftwareAttachmentResponse> localVarResponse = UploadSoftwareAttachmentWithHttpInfo(file, softwareId, contentDate, remarks);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create and upload a new software attachment the creation of an software attachment works through a multipart/form-data upload of the file and its filename.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="softwareId"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <returns>ApiResponse of SoftwareAttachmentResponse</returns>
        public ApiResponse< SoftwareAttachmentResponse > UploadSoftwareAttachmentWithHttpInfo (byte[] file, long? softwareId, string contentDate, string remarks)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SoftwareAttachmentApi->UploadSoftwareAttachment");
            // verify the required parameter 'softwareId' is set
            if (softwareId == null)
                throw new ApiException(400, "Missing required parameter 'softwareId' when calling SoftwareAttachmentApi->UploadSoftwareAttachment");
            // verify the required parameter 'contentDate' is set
            if (contentDate == null)
                throw new ApiException(400, "Missing required parameter 'contentDate' when calling SoftwareAttachmentApi->UploadSoftwareAttachment");
            // verify the required parameter 'remarks' is set
            if (remarks == null)
                throw new ApiException(400, "Missing required parameter 'remarks' when calling SoftwareAttachmentApi->UploadSoftwareAttachment");

            var localVarPath = "/software/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (softwareId != null) localVarFormParams.Add("software_id", this.Configuration.ApiClient.ParameterToString(softwareId)); // form parameter
            if (contentDate != null) localVarFormParams.Add("content_date", this.Configuration.ApiClient.ParameterToString(contentDate)); // form parameter
            if (remarks != null) localVarFormParams.Add("remarks", this.Configuration.ApiClient.ParameterToString(remarks)); // form parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadSoftwareAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwareAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareAttachmentResponse)));
        }

        /// <summary>
        /// Create and upload a new software attachment the creation of an software attachment works through a multipart/form-data upload of the file and its filename.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="softwareId"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <returns>Task of SoftwareAttachmentResponse</returns>
        public async System.Threading.Tasks.Task<SoftwareAttachmentResponse> UploadSoftwareAttachmentAsync (byte[] file, long? softwareId, string contentDate, string remarks)
        {
             ApiResponse<SoftwareAttachmentResponse> localVarResponse = await UploadSoftwareAttachmentAsyncWithHttpInfo(file, softwareId, contentDate, remarks);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create and upload a new software attachment the creation of an software attachment works through a multipart/form-data upload of the file and its filename.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="softwareId"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <returns>Task of ApiResponse (SoftwareAttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SoftwareAttachmentResponse>> UploadSoftwareAttachmentAsyncWithHttpInfo (byte[] file, long? softwareId, string contentDate, string remarks)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling SoftwareAttachmentApi->UploadSoftwareAttachment");
            // verify the required parameter 'softwareId' is set
            if (softwareId == null)
                throw new ApiException(400, "Missing required parameter 'softwareId' when calling SoftwareAttachmentApi->UploadSoftwareAttachment");
            // verify the required parameter 'contentDate' is set
            if (contentDate == null)
                throw new ApiException(400, "Missing required parameter 'contentDate' when calling SoftwareAttachmentApi->UploadSoftwareAttachment");
            // verify the required parameter 'remarks' is set
            if (remarks == null)
                throw new ApiException(400, "Missing required parameter 'remarks' when calling SoftwareAttachmentApi->UploadSoftwareAttachment");

            var localVarPath = "/software/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (softwareId != null) localVarFormParams.Add("software_id", this.Configuration.ApiClient.ParameterToString(softwareId)); // form parameter
            if (contentDate != null) localVarFormParams.Add("content_date", this.Configuration.ApiClient.ParameterToString(contentDate)); // form parameter
            if (remarks != null) localVarFormParams.Add("remarks", this.Configuration.ApiClient.ParameterToString(remarks)); // form parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadSoftwareAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwareAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwareAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwareAttachmentResponse)));
        }

    }
}
