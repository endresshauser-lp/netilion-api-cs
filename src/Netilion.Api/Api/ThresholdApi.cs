/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Netilion.Api.Client;
using Netilion.Api.Model;

namespace Netilion.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IThresholdApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an instrumentation threshold
        /// </summary>
        /// <remarks>
        /// Create a new instrumentation threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="instrumentationId">Id of the specified instrumentation</param>
        /// <returns>ThresholdResponse</returns>
        ThresholdResponse CreateInstrumentationThreshold (ThresholdRequest body, long? instrumentationId);

        /// <summary>
        /// Create an instrumentation threshold
        /// </summary>
        /// <remarks>
        /// Create a new instrumentation threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="instrumentationId">Id of the specified instrumentation</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        ApiResponse<ThresholdResponse> CreateInstrumentationThresholdWithHttpInfo (ThresholdRequest body, long? instrumentationId);
        /// <summary>
        /// Create an recipe threshold
        /// </summary>
        /// <remarks>
        /// Create a new recipe threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="recipeId">Id of the specified recipe</param>
        /// <returns>ThresholdResponse</returns>
        ThresholdResponse CreateRecipeThreshold (ThresholdRequest body, long? recipeId);

        /// <summary>
        /// Create an recipe threshold
        /// </summary>
        /// <remarks>
        /// Create a new recipe threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="recipeId">Id of the specified recipe</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        ApiResponse<ThresholdResponse> CreateRecipeThresholdWithHttpInfo (ThresholdRequest body, long? recipeId);
        /// <summary>
        /// Create an system threshold
        /// </summary>
        /// <remarks>
        /// Create a new system threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="systemId">Id of the specified system</param>
        /// <returns>ThresholdResponse</returns>
        ThresholdResponse CreateSystemThreshold (ThresholdRequest body, long? systemId);

        /// <summary>
        /// Create an system threshold
        /// </summary>
        /// <remarks>
        /// Create a new system threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="systemId">Id of the specified system</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        ApiResponse<ThresholdResponse> CreateSystemThresholdWithHttpInfo (ThresholdRequest body, long? systemId);
        /// <summary>
        /// Delete an instrumentation threshold.
        /// </summary>
        /// <remarks>
        /// Delete an instrumentation threshold.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns></returns>
        void DeleteInstrumentationThreshold (long? instrumentationId, long? id);

        /// <summary>
        /// Delete an instrumentation threshold.
        /// </summary>
        /// <remarks>
        /// Delete an instrumentation threshold.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInstrumentationThresholdWithHttpInfo (long? instrumentationId, long? id);
        /// <summary>
        /// Delete an recipe threshold.
        /// </summary>
        /// <remarks>
        /// Delete an recipe threshold.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns></returns>
        void DeleteRecipeThreshold (long? recipeId, long? id);

        /// <summary>
        /// Delete an recipe threshold.
        /// </summary>
        /// <remarks>
        /// Delete an recipe threshold.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecipeThresholdWithHttpInfo (long? recipeId, long? id);
        /// <summary>
        /// Delete an system threshold.
        /// </summary>
        /// <remarks>
        /// Delete an system threshold.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns></returns>
        void DeleteSystemThreshold (long? systemId, long? id);

        /// <summary>
        /// Delete an system threshold.
        /// </summary>
        /// <remarks>
        /// Delete an system threshold.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSystemThresholdWithHttpInfo (long? systemId, long? id);
        /// <summary>
        /// Get an instrumentation threshold
        /// </summary>
        /// <remarks>
        /// Get a single threshold of an instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>ThresholdResponse</returns>
        ThresholdResponse GetInstrumentationThreshold (long? instrumentationId, long? id);

        /// <summary>
        /// Get an instrumentation threshold
        /// </summary>
        /// <remarks>
        /// Get a single threshold of an instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        ApiResponse<ThresholdResponse> GetInstrumentationThresholdWithHttpInfo (long? instrumentationId, long? id);
        /// <summary>
        /// Get instrumentation thresholds
        /// </summary>
        /// <remarks>
        /// Get all thresholds of an instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ThresholdsResponse</returns>
        ThresholdsResponse GetInstrumentationThresholds (long? instrumentationId, string key = null, string thresholdType = null, string orderBy = null);

        /// <summary>
        /// Get instrumentation thresholds
        /// </summary>
        /// <remarks>
        /// Get all thresholds of an instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of ThresholdsResponse</returns>
        ApiResponse<ThresholdsResponse> GetInstrumentationThresholdsWithHttpInfo (long? instrumentationId, string key = null, string thresholdType = null, string orderBy = null);
        /// <summary>
        /// Get an recipe threshold
        /// </summary>
        /// <remarks>
        /// Get a single threshold of an recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>ThresholdResponse</returns>
        ThresholdResponse GetRecipeThreshold (long? recipeId, long? id);

        /// <summary>
        /// Get an recipe threshold
        /// </summary>
        /// <remarks>
        /// Get a single threshold of an recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        ApiResponse<ThresholdResponse> GetRecipeThresholdWithHttpInfo (long? recipeId, long? id);
        /// <summary>
        /// Get recipe thresholds
        /// </summary>
        /// <remarks>
        /// Get all thresholds of an recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ThresholdsResponse</returns>
        ThresholdsResponse GetRecipeThresholds (long? recipeId, string key = null, string thresholdType = null, string orderBy = null);

        /// <summary>
        /// Get recipe thresholds
        /// </summary>
        /// <remarks>
        /// Get all thresholds of an recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of ThresholdsResponse</returns>
        ApiResponse<ThresholdsResponse> GetRecipeThresholdsWithHttpInfo (long? recipeId, string key = null, string thresholdType = null, string orderBy = null);
        /// <summary>
        /// Get an system threshold
        /// </summary>
        /// <remarks>
        /// Get a single threshold of an system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>ThresholdResponse</returns>
        ThresholdResponse GetSystemThreshold (long? systemId, long? id);

        /// <summary>
        /// Get an system threshold
        /// </summary>
        /// <remarks>
        /// Get a single threshold of an system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        ApiResponse<ThresholdResponse> GetSystemThresholdWithHttpInfo (long? systemId, long? id);
        /// <summary>
        /// Get system thresholds
        /// </summary>
        /// <remarks>
        /// Get all thresholds of an system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ThresholdsResponse</returns>
        ThresholdsResponse GetSystemThresholds (long? systemId, string key = null, string thresholdType = null, string orderBy = null);

        /// <summary>
        /// Get system thresholds
        /// </summary>
        /// <remarks>
        /// Get all thresholds of an system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of ThresholdsResponse</returns>
        ApiResponse<ThresholdsResponse> GetSystemThresholdsWithHttpInfo (long? systemId, string key = null, string thresholdType = null, string orderBy = null);
        /// <summary>
        /// Update an instrumentation threshold
        /// </summary>
        /// <remarks>
        /// Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>ThresholdResponse</returns>
        ThresholdResponse UpdateInstrumentationThreshold (ThresholdRequest body, long? instrumentationId, long? id);

        /// <summary>
        /// Update an instrumentation threshold
        /// </summary>
        /// <remarks>
        /// Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        ApiResponse<ThresholdResponse> UpdateInstrumentationThresholdWithHttpInfo (ThresholdRequest body, long? instrumentationId, long? id);
        /// <summary>
        /// Update an recipe threshold
        /// </summary>
        /// <remarks>
        /// Replaces the threshold belonging to an recipe. This action requires &#x60;can_update&#x60; permission on the recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>ThresholdResponse</returns>
        ThresholdResponse UpdateRecipeThreshold (ThresholdRequest body, long? recipeId, long? id);

        /// <summary>
        /// Update an recipe threshold
        /// </summary>
        /// <remarks>
        /// Replaces the threshold belonging to an recipe. This action requires &#x60;can_update&#x60; permission on the recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        ApiResponse<ThresholdResponse> UpdateRecipeThresholdWithHttpInfo (ThresholdRequest body, long? recipeId, long? id);
        /// <summary>
        /// Update an system threshold
        /// </summary>
        /// <remarks>
        /// Replaces the threshold belonging to an system. This action requires &#x60;can_update&#x60; permission on the system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>ThresholdResponse</returns>
        ThresholdResponse UpdateSystemThreshold (ThresholdRequest body, long? systemId, long? id);

        /// <summary>
        /// Update an system threshold
        /// </summary>
        /// <remarks>
        /// Replaces the threshold belonging to an system. This action requires &#x60;can_update&#x60; permission on the system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        ApiResponse<ThresholdResponse> UpdateSystemThresholdWithHttpInfo (ThresholdRequest body, long? systemId, long? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an instrumentation threshold
        /// </summary>
        /// <remarks>
        /// Create a new instrumentation threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="instrumentationId">Id of the specified instrumentation</param>
        /// <returns>Task of ThresholdResponse</returns>
        System.Threading.Tasks.Task<ThresholdResponse> CreateInstrumentationThresholdAsync (ThresholdRequest body, long? instrumentationId);

        /// <summary>
        /// Create an instrumentation threshold
        /// </summary>
        /// <remarks>
        /// Create a new instrumentation threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="instrumentationId">Id of the specified instrumentation</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> CreateInstrumentationThresholdAsyncWithHttpInfo (ThresholdRequest body, long? instrumentationId);
        /// <summary>
        /// Create an recipe threshold
        /// </summary>
        /// <remarks>
        /// Create a new recipe threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="recipeId">Id of the specified recipe</param>
        /// <returns>Task of ThresholdResponse</returns>
        System.Threading.Tasks.Task<ThresholdResponse> CreateRecipeThresholdAsync (ThresholdRequest body, long? recipeId);

        /// <summary>
        /// Create an recipe threshold
        /// </summary>
        /// <remarks>
        /// Create a new recipe threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="recipeId">Id of the specified recipe</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> CreateRecipeThresholdAsyncWithHttpInfo (ThresholdRequest body, long? recipeId);
        /// <summary>
        /// Create an system threshold
        /// </summary>
        /// <remarks>
        /// Create a new system threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="systemId">Id of the specified system</param>
        /// <returns>Task of ThresholdResponse</returns>
        System.Threading.Tasks.Task<ThresholdResponse> CreateSystemThresholdAsync (ThresholdRequest body, long? systemId);

        /// <summary>
        /// Create an system threshold
        /// </summary>
        /// <remarks>
        /// Create a new system threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="systemId">Id of the specified system</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> CreateSystemThresholdAsyncWithHttpInfo (ThresholdRequest body, long? systemId);
        /// <summary>
        /// Delete an instrumentation threshold.
        /// </summary>
        /// <remarks>
        /// Delete an instrumentation threshold.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInstrumentationThresholdAsync (long? instrumentationId, long? id);

        /// <summary>
        /// Delete an instrumentation threshold.
        /// </summary>
        /// <remarks>
        /// Delete an instrumentation threshold.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInstrumentationThresholdAsyncWithHttpInfo (long? instrumentationId, long? id);
        /// <summary>
        /// Delete an recipe threshold.
        /// </summary>
        /// <remarks>
        /// Delete an recipe threshold.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecipeThresholdAsync (long? recipeId, long? id);

        /// <summary>
        /// Delete an recipe threshold.
        /// </summary>
        /// <remarks>
        /// Delete an recipe threshold.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecipeThresholdAsyncWithHttpInfo (long? recipeId, long? id);
        /// <summary>
        /// Delete an system threshold.
        /// </summary>
        /// <remarks>
        /// Delete an system threshold.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSystemThresholdAsync (long? systemId, long? id);

        /// <summary>
        /// Delete an system threshold.
        /// </summary>
        /// <remarks>
        /// Delete an system threshold.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSystemThresholdAsyncWithHttpInfo (long? systemId, long? id);
        /// <summary>
        /// Get an instrumentation threshold
        /// </summary>
        /// <remarks>
        /// Get a single threshold of an instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>Task of ThresholdResponse</returns>
        System.Threading.Tasks.Task<ThresholdResponse> GetInstrumentationThresholdAsync (long? instrumentationId, long? id);

        /// <summary>
        /// Get an instrumentation threshold
        /// </summary>
        /// <remarks>
        /// Get a single threshold of an instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> GetInstrumentationThresholdAsyncWithHttpInfo (long? instrumentationId, long? id);
        /// <summary>
        /// Get instrumentation thresholds
        /// </summary>
        /// <remarks>
        /// Get all thresholds of an instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ThresholdsResponse</returns>
        System.Threading.Tasks.Task<ThresholdsResponse> GetInstrumentationThresholdsAsync (long? instrumentationId, string key = null, string thresholdType = null, string orderBy = null);

        /// <summary>
        /// Get instrumentation thresholds
        /// </summary>
        /// <remarks>
        /// Get all thresholds of an instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ThresholdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThresholdsResponse>> GetInstrumentationThresholdsAsyncWithHttpInfo (long? instrumentationId, string key = null, string thresholdType = null, string orderBy = null);
        /// <summary>
        /// Get an recipe threshold
        /// </summary>
        /// <remarks>
        /// Get a single threshold of an recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>Task of ThresholdResponse</returns>
        System.Threading.Tasks.Task<ThresholdResponse> GetRecipeThresholdAsync (long? recipeId, long? id);

        /// <summary>
        /// Get an recipe threshold
        /// </summary>
        /// <remarks>
        /// Get a single threshold of an recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> GetRecipeThresholdAsyncWithHttpInfo (long? recipeId, long? id);
        /// <summary>
        /// Get recipe thresholds
        /// </summary>
        /// <remarks>
        /// Get all thresholds of an recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ThresholdsResponse</returns>
        System.Threading.Tasks.Task<ThresholdsResponse> GetRecipeThresholdsAsync (long? recipeId, string key = null, string thresholdType = null, string orderBy = null);

        /// <summary>
        /// Get recipe thresholds
        /// </summary>
        /// <remarks>
        /// Get all thresholds of an recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ThresholdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThresholdsResponse>> GetRecipeThresholdsAsyncWithHttpInfo (long? recipeId, string key = null, string thresholdType = null, string orderBy = null);
        /// <summary>
        /// Get an system threshold
        /// </summary>
        /// <remarks>
        /// Get a single threshold of an system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>Task of ThresholdResponse</returns>
        System.Threading.Tasks.Task<ThresholdResponse> GetSystemThresholdAsync (long? systemId, long? id);

        /// <summary>
        /// Get an system threshold
        /// </summary>
        /// <remarks>
        /// Get a single threshold of an system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> GetSystemThresholdAsyncWithHttpInfo (long? systemId, long? id);
        /// <summary>
        /// Get system thresholds
        /// </summary>
        /// <remarks>
        /// Get all thresholds of an system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ThresholdsResponse</returns>
        System.Threading.Tasks.Task<ThresholdsResponse> GetSystemThresholdsAsync (long? systemId, string key = null, string thresholdType = null, string orderBy = null);

        /// <summary>
        /// Get system thresholds
        /// </summary>
        /// <remarks>
        /// Get all thresholds of an system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ThresholdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThresholdsResponse>> GetSystemThresholdsAsyncWithHttpInfo (long? systemId, string key = null, string thresholdType = null, string orderBy = null);
        /// <summary>
        /// Update an instrumentation threshold
        /// </summary>
        /// <remarks>
        /// Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>Task of ThresholdResponse</returns>
        System.Threading.Tasks.Task<ThresholdResponse> UpdateInstrumentationThresholdAsync (ThresholdRequest body, long? instrumentationId, long? id);

        /// <summary>
        /// Update an instrumentation threshold
        /// </summary>
        /// <remarks>
        /// Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> UpdateInstrumentationThresholdAsyncWithHttpInfo (ThresholdRequest body, long? instrumentationId, long? id);
        /// <summary>
        /// Update an recipe threshold
        /// </summary>
        /// <remarks>
        /// Replaces the threshold belonging to an recipe. This action requires &#x60;can_update&#x60; permission on the recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>Task of ThresholdResponse</returns>
        System.Threading.Tasks.Task<ThresholdResponse> UpdateRecipeThresholdAsync (ThresholdRequest body, long? recipeId, long? id);

        /// <summary>
        /// Update an recipe threshold
        /// </summary>
        /// <remarks>
        /// Replaces the threshold belonging to an recipe. This action requires &#x60;can_update&#x60; permission on the recipe.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> UpdateRecipeThresholdAsyncWithHttpInfo (ThresholdRequest body, long? recipeId, long? id);
        /// <summary>
        /// Update an system threshold
        /// </summary>
        /// <remarks>
        /// Replaces the threshold belonging to an system. This action requires &#x60;can_update&#x60; permission on the system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>Task of ThresholdResponse</returns>
        System.Threading.Tasks.Task<ThresholdResponse> UpdateSystemThresholdAsync (ThresholdRequest body, long? systemId, long? id);

        /// <summary>
        /// Update an system threshold
        /// </summary>
        /// <remarks>
        /// Replaces the threshold belonging to an system. This action requires &#x60;can_update&#x60; permission on the system.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> UpdateSystemThresholdAsyncWithHttpInfo (ThresholdRequest body, long? systemId, long? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ThresholdApi : IThresholdApi
    {
        private Netilion.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ThresholdApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ThresholdApi(String basePath)
        {
            this.Configuration = new Netilion.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ThresholdApi"/> class
        /// </summary>
        /// <returns></returns>
        public ThresholdApi()
        {
            this.Configuration = Netilion.Api.Client.Configuration.Default;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ThresholdApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ThresholdApi(Netilion.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Netilion.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Netilion.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Netilion.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an instrumentation threshold Create a new instrumentation threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="instrumentationId">Id of the specified instrumentation</param>
        /// <returns>ThresholdResponse</returns>
        public ThresholdResponse CreateInstrumentationThreshold (ThresholdRequest body, long? instrumentationId)
        {
             ApiResponse<ThresholdResponse> localVarResponse = CreateInstrumentationThresholdWithHttpInfo(body, instrumentationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an instrumentation threshold Create a new instrumentation threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="instrumentationId">Id of the specified instrumentation</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        public ApiResponse< ThresholdResponse > CreateInstrumentationThresholdWithHttpInfo (ThresholdRequest body, long? instrumentationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThresholdApi->CreateInstrumentationThreshold");
            // verify the required parameter 'instrumentationId' is set
            if (instrumentationId == null)
                throw new ApiException(400, "Missing required parameter 'instrumentationId' when calling ThresholdApi->CreateInstrumentationThreshold");

            var localVarPath = "/instrumentations/{instrumentation_id}/thresholds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentationId != null) localVarPathParams.Add("instrumentation_id", this.Configuration.ApiClient.ParameterToString(instrumentationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInstrumentationThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Create an instrumentation threshold Create a new instrumentation threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="instrumentationId">Id of the specified instrumentation</param>
        /// <returns>Task of ThresholdResponse</returns>
        public async System.Threading.Tasks.Task<ThresholdResponse> CreateInstrumentationThresholdAsync (ThresholdRequest body, long? instrumentationId)
        {
             ApiResponse<ThresholdResponse> localVarResponse = await CreateInstrumentationThresholdAsyncWithHttpInfo(body, instrumentationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an instrumentation threshold Create a new instrumentation threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="instrumentationId">Id of the specified instrumentation</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> CreateInstrumentationThresholdAsyncWithHttpInfo (ThresholdRequest body, long? instrumentationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThresholdApi->CreateInstrumentationThreshold");
            // verify the required parameter 'instrumentationId' is set
            if (instrumentationId == null)
                throw new ApiException(400, "Missing required parameter 'instrumentationId' when calling ThresholdApi->CreateInstrumentationThreshold");

            var localVarPath = "/instrumentations/{instrumentation_id}/thresholds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentationId != null) localVarPathParams.Add("instrumentation_id", this.Configuration.ApiClient.ParameterToString(instrumentationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInstrumentationThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Create an recipe threshold Create a new recipe threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="recipeId">Id of the specified recipe</param>
        /// <returns>ThresholdResponse</returns>
        public ThresholdResponse CreateRecipeThreshold (ThresholdRequest body, long? recipeId)
        {
             ApiResponse<ThresholdResponse> localVarResponse = CreateRecipeThresholdWithHttpInfo(body, recipeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an recipe threshold Create a new recipe threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="recipeId">Id of the specified recipe</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        public ApiResponse< ThresholdResponse > CreateRecipeThresholdWithHttpInfo (ThresholdRequest body, long? recipeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThresholdApi->CreateRecipeThreshold");
            // verify the required parameter 'recipeId' is set
            if (recipeId == null)
                throw new ApiException(400, "Missing required parameter 'recipeId' when calling ThresholdApi->CreateRecipeThreshold");

            var localVarPath = "/recipes/{recipe_id}/thresholds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipeId != null) localVarPathParams.Add("recipe_id", this.Configuration.ApiClient.ParameterToString(recipeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRecipeThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Create an recipe threshold Create a new recipe threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="recipeId">Id of the specified recipe</param>
        /// <returns>Task of ThresholdResponse</returns>
        public async System.Threading.Tasks.Task<ThresholdResponse> CreateRecipeThresholdAsync (ThresholdRequest body, long? recipeId)
        {
             ApiResponse<ThresholdResponse> localVarResponse = await CreateRecipeThresholdAsyncWithHttpInfo(body, recipeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an recipe threshold Create a new recipe threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="recipeId">Id of the specified recipe</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> CreateRecipeThresholdAsyncWithHttpInfo (ThresholdRequest body, long? recipeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThresholdApi->CreateRecipeThreshold");
            // verify the required parameter 'recipeId' is set
            if (recipeId == null)
                throw new ApiException(400, "Missing required parameter 'recipeId' when calling ThresholdApi->CreateRecipeThreshold");

            var localVarPath = "/recipes/{recipe_id}/thresholds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipeId != null) localVarPathParams.Add("recipe_id", this.Configuration.ApiClient.ParameterToString(recipeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRecipeThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Create an system threshold Create a new system threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="systemId">Id of the specified system</param>
        /// <returns>ThresholdResponse</returns>
        public ThresholdResponse CreateSystemThreshold (ThresholdRequest body, long? systemId)
        {
             ApiResponse<ThresholdResponse> localVarResponse = CreateSystemThresholdWithHttpInfo(body, systemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an system threshold Create a new system threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="systemId">Id of the specified system</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        public ApiResponse< ThresholdResponse > CreateSystemThresholdWithHttpInfo (ThresholdRequest body, long? systemId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThresholdApi->CreateSystemThreshold");
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling ThresholdApi->CreateSystemThreshold");

            var localVarPath = "/systems/{system_id}/thresholds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemId != null) localVarPathParams.Add("system_id", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSystemThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Create an system threshold Create a new system threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="systemId">Id of the specified system</param>
        /// <returns>Task of ThresholdResponse</returns>
        public async System.Threading.Tasks.Task<ThresholdResponse> CreateSystemThresholdAsync (ThresholdRequest body, long? systemId)
        {
             ApiResponse<ThresholdResponse> localVarResponse = await CreateSystemThresholdAsyncWithHttpInfo(body, systemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an system threshold Create a new system threshold. This action requires &#x60;&#x60;&#x60;can_udpate&#x60;&#x60;&#x60; permission on the system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be created.</param>
        /// <param name="systemId">Id of the specified system</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> CreateSystemThresholdAsyncWithHttpInfo (ThresholdRequest body, long? systemId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThresholdApi->CreateSystemThreshold");
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling ThresholdApi->CreateSystemThreshold");

            var localVarPath = "/systems/{system_id}/thresholds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemId != null) localVarPathParams.Add("system_id", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSystemThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Delete an instrumentation threshold. Delete an instrumentation threshold.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns></returns>
        public void DeleteInstrumentationThreshold (long? instrumentationId, long? id)
        {
             DeleteInstrumentationThresholdWithHttpInfo(instrumentationId, id);
        }

        /// <summary>
        /// Delete an instrumentation threshold. Delete an instrumentation threshold.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInstrumentationThresholdWithHttpInfo (long? instrumentationId, long? id)
        {
            // verify the required parameter 'instrumentationId' is set
            if (instrumentationId == null)
                throw new ApiException(400, "Missing required parameter 'instrumentationId' when calling ThresholdApi->DeleteInstrumentationThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->DeleteInstrumentationThreshold");

            var localVarPath = "/instrumentations/{instrumentation_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentationId != null) localVarPathParams.Add("instrumentation_id", this.Configuration.ApiClient.ParameterToString(instrumentationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInstrumentationThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an instrumentation threshold. Delete an instrumentation threshold.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInstrumentationThresholdAsync (long? instrumentationId, long? id)
        {
             await DeleteInstrumentationThresholdAsyncWithHttpInfo(instrumentationId, id);

        }

        /// <summary>
        /// Delete an instrumentation threshold. Delete an instrumentation threshold.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInstrumentationThresholdAsyncWithHttpInfo (long? instrumentationId, long? id)
        {
            // verify the required parameter 'instrumentationId' is set
            if (instrumentationId == null)
                throw new ApiException(400, "Missing required parameter 'instrumentationId' when calling ThresholdApi->DeleteInstrumentationThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->DeleteInstrumentationThreshold");

            var localVarPath = "/instrumentations/{instrumentation_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentationId != null) localVarPathParams.Add("instrumentation_id", this.Configuration.ApiClient.ParameterToString(instrumentationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInstrumentationThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an recipe threshold. Delete an recipe threshold.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns></returns>
        public void DeleteRecipeThreshold (long? recipeId, long? id)
        {
             DeleteRecipeThresholdWithHttpInfo(recipeId, id);
        }

        /// <summary>
        /// Delete an recipe threshold. Delete an recipe threshold.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRecipeThresholdWithHttpInfo (long? recipeId, long? id)
        {
            // verify the required parameter 'recipeId' is set
            if (recipeId == null)
                throw new ApiException(400, "Missing required parameter 'recipeId' when calling ThresholdApi->DeleteRecipeThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->DeleteRecipeThreshold");

            var localVarPath = "/recipes/{recipe_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipeId != null) localVarPathParams.Add("recipe_id", this.Configuration.ApiClient.ParameterToString(recipeId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecipeThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an recipe threshold. Delete an recipe threshold.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecipeThresholdAsync (long? recipeId, long? id)
        {
             await DeleteRecipeThresholdAsyncWithHttpInfo(recipeId, id);

        }

        /// <summary>
        /// Delete an recipe threshold. Delete an recipe threshold.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecipeThresholdAsyncWithHttpInfo (long? recipeId, long? id)
        {
            // verify the required parameter 'recipeId' is set
            if (recipeId == null)
                throw new ApiException(400, "Missing required parameter 'recipeId' when calling ThresholdApi->DeleteRecipeThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->DeleteRecipeThreshold");

            var localVarPath = "/recipes/{recipe_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipeId != null) localVarPathParams.Add("recipe_id", this.Configuration.ApiClient.ParameterToString(recipeId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecipeThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an system threshold. Delete an system threshold.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns></returns>
        public void DeleteSystemThreshold (long? systemId, long? id)
        {
             DeleteSystemThresholdWithHttpInfo(systemId, id);
        }

        /// <summary>
        /// Delete an system threshold. Delete an system threshold.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSystemThresholdWithHttpInfo (long? systemId, long? id)
        {
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling ThresholdApi->DeleteSystemThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->DeleteSystemThreshold");

            var localVarPath = "/systems/{system_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemId != null) localVarPathParams.Add("system_id", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSystemThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an system threshold. Delete an system threshold.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSystemThresholdAsync (long? systemId, long? id)
        {
             await DeleteSystemThresholdAsyncWithHttpInfo(systemId, id);

        }

        /// <summary>
        /// Delete an system threshold. Delete an system threshold.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSystemThresholdAsyncWithHttpInfo (long? systemId, long? id)
        {
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling ThresholdApi->DeleteSystemThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->DeleteSystemThreshold");

            var localVarPath = "/systems/{system_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemId != null) localVarPathParams.Add("system_id", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSystemThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an instrumentation threshold Get a single threshold of an instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>ThresholdResponse</returns>
        public ThresholdResponse GetInstrumentationThreshold (long? instrumentationId, long? id)
        {
             ApiResponse<ThresholdResponse> localVarResponse = GetInstrumentationThresholdWithHttpInfo(instrumentationId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an instrumentation threshold Get a single threshold of an instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        public ApiResponse< ThresholdResponse > GetInstrumentationThresholdWithHttpInfo (long? instrumentationId, long? id)
        {
            // verify the required parameter 'instrumentationId' is set
            if (instrumentationId == null)
                throw new ApiException(400, "Missing required parameter 'instrumentationId' when calling ThresholdApi->GetInstrumentationThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->GetInstrumentationThreshold");

            var localVarPath = "/instrumentations/{instrumentation_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentationId != null) localVarPathParams.Add("instrumentation_id", this.Configuration.ApiClient.ParameterToString(instrumentationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstrumentationThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Get an instrumentation threshold Get a single threshold of an instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>Task of ThresholdResponse</returns>
        public async System.Threading.Tasks.Task<ThresholdResponse> GetInstrumentationThresholdAsync (long? instrumentationId, long? id)
        {
             ApiResponse<ThresholdResponse> localVarResponse = await GetInstrumentationThresholdAsyncWithHttpInfo(instrumentationId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an instrumentation threshold Get a single threshold of an instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> GetInstrumentationThresholdAsyncWithHttpInfo (long? instrumentationId, long? id)
        {
            // verify the required parameter 'instrumentationId' is set
            if (instrumentationId == null)
                throw new ApiException(400, "Missing required parameter 'instrumentationId' when calling ThresholdApi->GetInstrumentationThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->GetInstrumentationThreshold");

            var localVarPath = "/instrumentations/{instrumentation_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentationId != null) localVarPathParams.Add("instrumentation_id", this.Configuration.ApiClient.ParameterToString(instrumentationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstrumentationThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Get instrumentation thresholds Get all thresholds of an instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ThresholdsResponse</returns>
        public ThresholdsResponse GetInstrumentationThresholds (long? instrumentationId, string key = null, string thresholdType = null, string orderBy = null)
        {
             ApiResponse<ThresholdsResponse> localVarResponse = GetInstrumentationThresholdsWithHttpInfo(instrumentationId, key, thresholdType, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get instrumentation thresholds Get all thresholds of an instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of ThresholdsResponse</returns>
        public ApiResponse< ThresholdsResponse > GetInstrumentationThresholdsWithHttpInfo (long? instrumentationId, string key = null, string thresholdType = null, string orderBy = null)
        {
            // verify the required parameter 'instrumentationId' is set
            if (instrumentationId == null)
                throw new ApiException(400, "Missing required parameter 'instrumentationId' when calling ThresholdApi->GetInstrumentationThresholds");

            var localVarPath = "/instrumentations/{instrumentation_id}/thresholds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentationId != null) localVarPathParams.Add("instrumentation_id", this.Configuration.ApiClient.ParameterToString(instrumentationId)); // path parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (thresholdType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "threshold_type", thresholdType)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstrumentationThresholds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdsResponse)));
        }

        /// <summary>
        /// Get instrumentation thresholds Get all thresholds of an instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ThresholdsResponse</returns>
        public async System.Threading.Tasks.Task<ThresholdsResponse> GetInstrumentationThresholdsAsync (long? instrumentationId, string key = null, string thresholdType = null, string orderBy = null)
        {
             ApiResponse<ThresholdsResponse> localVarResponse = await GetInstrumentationThresholdsAsyncWithHttpInfo(instrumentationId, key, thresholdType, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get instrumentation thresholds Get all thresholds of an instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ThresholdsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThresholdsResponse>> GetInstrumentationThresholdsAsyncWithHttpInfo (long? instrumentationId, string key = null, string thresholdType = null, string orderBy = null)
        {
            // verify the required parameter 'instrumentationId' is set
            if (instrumentationId == null)
                throw new ApiException(400, "Missing required parameter 'instrumentationId' when calling ThresholdApi->GetInstrumentationThresholds");

            var localVarPath = "/instrumentations/{instrumentation_id}/thresholds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentationId != null) localVarPathParams.Add("instrumentation_id", this.Configuration.ApiClient.ParameterToString(instrumentationId)); // path parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (thresholdType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "threshold_type", thresholdType)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstrumentationThresholds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdsResponse)));
        }

        /// <summary>
        /// Get an recipe threshold Get a single threshold of an recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>ThresholdResponse</returns>
        public ThresholdResponse GetRecipeThreshold (long? recipeId, long? id)
        {
             ApiResponse<ThresholdResponse> localVarResponse = GetRecipeThresholdWithHttpInfo(recipeId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an recipe threshold Get a single threshold of an recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        public ApiResponse< ThresholdResponse > GetRecipeThresholdWithHttpInfo (long? recipeId, long? id)
        {
            // verify the required parameter 'recipeId' is set
            if (recipeId == null)
                throw new ApiException(400, "Missing required parameter 'recipeId' when calling ThresholdApi->GetRecipeThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->GetRecipeThreshold");

            var localVarPath = "/recipes/{recipe_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipeId != null) localVarPathParams.Add("recipe_id", this.Configuration.ApiClient.ParameterToString(recipeId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecipeThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Get an recipe threshold Get a single threshold of an recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>Task of ThresholdResponse</returns>
        public async System.Threading.Tasks.Task<ThresholdResponse> GetRecipeThresholdAsync (long? recipeId, long? id)
        {
             ApiResponse<ThresholdResponse> localVarResponse = await GetRecipeThresholdAsyncWithHttpInfo(recipeId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an recipe threshold Get a single threshold of an recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> GetRecipeThresholdAsyncWithHttpInfo (long? recipeId, long? id)
        {
            // verify the required parameter 'recipeId' is set
            if (recipeId == null)
                throw new ApiException(400, "Missing required parameter 'recipeId' when calling ThresholdApi->GetRecipeThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->GetRecipeThreshold");

            var localVarPath = "/recipes/{recipe_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipeId != null) localVarPathParams.Add("recipe_id", this.Configuration.ApiClient.ParameterToString(recipeId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecipeThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Get recipe thresholds Get all thresholds of an recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ThresholdsResponse</returns>
        public ThresholdsResponse GetRecipeThresholds (long? recipeId, string key = null, string thresholdType = null, string orderBy = null)
        {
             ApiResponse<ThresholdsResponse> localVarResponse = GetRecipeThresholdsWithHttpInfo(recipeId, key, thresholdType, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get recipe thresholds Get all thresholds of an recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of ThresholdsResponse</returns>
        public ApiResponse< ThresholdsResponse > GetRecipeThresholdsWithHttpInfo (long? recipeId, string key = null, string thresholdType = null, string orderBy = null)
        {
            // verify the required parameter 'recipeId' is set
            if (recipeId == null)
                throw new ApiException(400, "Missing required parameter 'recipeId' when calling ThresholdApi->GetRecipeThresholds");

            var localVarPath = "/recipes/{recipe_id}/thresholds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipeId != null) localVarPathParams.Add("recipe_id", this.Configuration.ApiClient.ParameterToString(recipeId)); // path parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (thresholdType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "threshold_type", thresholdType)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecipeThresholds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdsResponse)));
        }

        /// <summary>
        /// Get recipe thresholds Get all thresholds of an recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ThresholdsResponse</returns>
        public async System.Threading.Tasks.Task<ThresholdsResponse> GetRecipeThresholdsAsync (long? recipeId, string key = null, string thresholdType = null, string orderBy = null)
        {
             ApiResponse<ThresholdsResponse> localVarResponse = await GetRecipeThresholdsAsyncWithHttpInfo(recipeId, key, thresholdType, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get recipe thresholds Get all thresholds of an recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ThresholdsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThresholdsResponse>> GetRecipeThresholdsAsyncWithHttpInfo (long? recipeId, string key = null, string thresholdType = null, string orderBy = null)
        {
            // verify the required parameter 'recipeId' is set
            if (recipeId == null)
                throw new ApiException(400, "Missing required parameter 'recipeId' when calling ThresholdApi->GetRecipeThresholds");

            var localVarPath = "/recipes/{recipe_id}/thresholds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipeId != null) localVarPathParams.Add("recipe_id", this.Configuration.ApiClient.ParameterToString(recipeId)); // path parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (thresholdType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "threshold_type", thresholdType)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecipeThresholds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdsResponse)));
        }

        /// <summary>
        /// Get an system threshold Get a single threshold of an system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>ThresholdResponse</returns>
        public ThresholdResponse GetSystemThreshold (long? systemId, long? id)
        {
             ApiResponse<ThresholdResponse> localVarResponse = GetSystemThresholdWithHttpInfo(systemId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an system threshold Get a single threshold of an system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        public ApiResponse< ThresholdResponse > GetSystemThresholdWithHttpInfo (long? systemId, long? id)
        {
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling ThresholdApi->GetSystemThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->GetSystemThreshold");

            var localVarPath = "/systems/{system_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemId != null) localVarPathParams.Add("system_id", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Get an system threshold Get a single threshold of an system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>Task of ThresholdResponse</returns>
        public async System.Threading.Tasks.Task<ThresholdResponse> GetSystemThresholdAsync (long? systemId, long? id)
        {
             ApiResponse<ThresholdResponse> localVarResponse = await GetSystemThresholdAsyncWithHttpInfo(systemId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an system threshold Get a single threshold of an system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> GetSystemThresholdAsyncWithHttpInfo (long? systemId, long? id)
        {
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling ThresholdApi->GetSystemThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->GetSystemThreshold");

            var localVarPath = "/systems/{system_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemId != null) localVarPathParams.Add("system_id", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Get system thresholds Get all thresholds of an system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ThresholdsResponse</returns>
        public ThresholdsResponse GetSystemThresholds (long? systemId, string key = null, string thresholdType = null, string orderBy = null)
        {
             ApiResponse<ThresholdsResponse> localVarResponse = GetSystemThresholdsWithHttpInfo(systemId, key, thresholdType, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get system thresholds Get all thresholds of an system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of ThresholdsResponse</returns>
        public ApiResponse< ThresholdsResponse > GetSystemThresholdsWithHttpInfo (long? systemId, string key = null, string thresholdType = null, string orderBy = null)
        {
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling ThresholdApi->GetSystemThresholds");

            var localVarPath = "/systems/{system_id}/thresholds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemId != null) localVarPathParams.Add("system_id", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (thresholdType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "threshold_type", thresholdType)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemThresholds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdsResponse)));
        }

        /// <summary>
        /// Get system thresholds Get all thresholds of an system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ThresholdsResponse</returns>
        public async System.Threading.Tasks.Task<ThresholdsResponse> GetSystemThresholdsAsync (long? systemId, string key = null, string thresholdType = null, string orderBy = null)
        {
             ApiResponse<ThresholdsResponse> localVarResponse = await GetSystemThresholdsAsyncWithHttpInfo(systemId, key, thresholdType, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get system thresholds Get all thresholds of an system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Id of the system</param>
        /// <param name="key">filter by key (optional)</param>
        /// <param name="thresholdType">filter by type (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;name&#x60;, &#x60;key&#x60;, &#x60;threshold_type&#x60;, &#x60;notification&#x60;, &#x60;created_at&#x60;, &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (ThresholdsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThresholdsResponse>> GetSystemThresholdsAsyncWithHttpInfo (long? systemId, string key = null, string thresholdType = null, string orderBy = null)
        {
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling ThresholdApi->GetSystemThresholds");

            var localVarPath = "/systems/{system_id}/thresholds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemId != null) localVarPathParams.Add("system_id", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (thresholdType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "threshold_type", thresholdType)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemThresholds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdsResponse)));
        }

        /// <summary>
        /// Update an instrumentation threshold Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>ThresholdResponse</returns>
        public ThresholdResponse UpdateInstrumentationThreshold (ThresholdRequest body, long? instrumentationId, long? id)
        {
             ApiResponse<ThresholdResponse> localVarResponse = UpdateInstrumentationThresholdWithHttpInfo(body, instrumentationId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an instrumentation threshold Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        public ApiResponse< ThresholdResponse > UpdateInstrumentationThresholdWithHttpInfo (ThresholdRequest body, long? instrumentationId, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThresholdApi->UpdateInstrumentationThreshold");
            // verify the required parameter 'instrumentationId' is set
            if (instrumentationId == null)
                throw new ApiException(400, "Missing required parameter 'instrumentationId' when calling ThresholdApi->UpdateInstrumentationThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->UpdateInstrumentationThreshold");

            var localVarPath = "/instrumentations/{instrumentation_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentationId != null) localVarPathParams.Add("instrumentation_id", this.Configuration.ApiClient.ParameterToString(instrumentationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInstrumentationThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Update an instrumentation threshold Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>Task of ThresholdResponse</returns>
        public async System.Threading.Tasks.Task<ThresholdResponse> UpdateInstrumentationThresholdAsync (ThresholdRequest body, long? instrumentationId, long? id)
        {
             ApiResponse<ThresholdResponse> localVarResponse = await UpdateInstrumentationThresholdAsyncWithHttpInfo(body, instrumentationId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an instrumentation threshold Replaces the threshold belonging to an instrumentation. This action requires &#x60;can_update&#x60; permission on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="instrumentationId">Id of the instrumentation</param>
        /// <param name="id">Id of the instrumentation threshold</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> UpdateInstrumentationThresholdAsyncWithHttpInfo (ThresholdRequest body, long? instrumentationId, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThresholdApi->UpdateInstrumentationThreshold");
            // verify the required parameter 'instrumentationId' is set
            if (instrumentationId == null)
                throw new ApiException(400, "Missing required parameter 'instrumentationId' when calling ThresholdApi->UpdateInstrumentationThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->UpdateInstrumentationThreshold");

            var localVarPath = "/instrumentations/{instrumentation_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instrumentationId != null) localVarPathParams.Add("instrumentation_id", this.Configuration.ApiClient.ParameterToString(instrumentationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInstrumentationThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Update an recipe threshold Replaces the threshold belonging to an recipe. This action requires &#x60;can_update&#x60; permission on the recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>ThresholdResponse</returns>
        public ThresholdResponse UpdateRecipeThreshold (ThresholdRequest body, long? recipeId, long? id)
        {
             ApiResponse<ThresholdResponse> localVarResponse = UpdateRecipeThresholdWithHttpInfo(body, recipeId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an recipe threshold Replaces the threshold belonging to an recipe. This action requires &#x60;can_update&#x60; permission on the recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        public ApiResponse< ThresholdResponse > UpdateRecipeThresholdWithHttpInfo (ThresholdRequest body, long? recipeId, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThresholdApi->UpdateRecipeThreshold");
            // verify the required parameter 'recipeId' is set
            if (recipeId == null)
                throw new ApiException(400, "Missing required parameter 'recipeId' when calling ThresholdApi->UpdateRecipeThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->UpdateRecipeThreshold");

            var localVarPath = "/recipes/{recipe_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipeId != null) localVarPathParams.Add("recipe_id", this.Configuration.ApiClient.ParameterToString(recipeId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRecipeThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Update an recipe threshold Replaces the threshold belonging to an recipe. This action requires &#x60;can_update&#x60; permission on the recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>Task of ThresholdResponse</returns>
        public async System.Threading.Tasks.Task<ThresholdResponse> UpdateRecipeThresholdAsync (ThresholdRequest body, long? recipeId, long? id)
        {
             ApiResponse<ThresholdResponse> localVarResponse = await UpdateRecipeThresholdAsyncWithHttpInfo(body, recipeId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an recipe threshold Replaces the threshold belonging to an recipe. This action requires &#x60;can_update&#x60; permission on the recipe.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="recipeId">Id of the recipe</param>
        /// <param name="id">Id of the recipe threshold</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> UpdateRecipeThresholdAsyncWithHttpInfo (ThresholdRequest body, long? recipeId, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThresholdApi->UpdateRecipeThreshold");
            // verify the required parameter 'recipeId' is set
            if (recipeId == null)
                throw new ApiException(400, "Missing required parameter 'recipeId' when calling ThresholdApi->UpdateRecipeThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->UpdateRecipeThreshold");

            var localVarPath = "/recipes/{recipe_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipeId != null) localVarPathParams.Add("recipe_id", this.Configuration.ApiClient.ParameterToString(recipeId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRecipeThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Update an system threshold Replaces the threshold belonging to an system. This action requires &#x60;can_update&#x60; permission on the system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>ThresholdResponse</returns>
        public ThresholdResponse UpdateSystemThreshold (ThresholdRequest body, long? systemId, long? id)
        {
             ApiResponse<ThresholdResponse> localVarResponse = UpdateSystemThresholdWithHttpInfo(body, systemId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an system threshold Replaces the threshold belonging to an system. This action requires &#x60;can_update&#x60; permission on the system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>ApiResponse of ThresholdResponse</returns>
        public ApiResponse< ThresholdResponse > UpdateSystemThresholdWithHttpInfo (ThresholdRequest body, long? systemId, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThresholdApi->UpdateSystemThreshold");
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling ThresholdApi->UpdateSystemThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->UpdateSystemThreshold");

            var localVarPath = "/systems/{system_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemId != null) localVarPathParams.Add("system_id", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSystemThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

        /// <summary>
        /// Update an system threshold Replaces the threshold belonging to an system. This action requires &#x60;can_update&#x60; permission on the system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>Task of ThresholdResponse</returns>
        public async System.Threading.Tasks.Task<ThresholdResponse> UpdateSystemThresholdAsync (ThresholdRequest body, long? systemId, long? id)
        {
             ApiResponse<ThresholdResponse> localVarResponse = await UpdateSystemThresholdAsyncWithHttpInfo(body, systemId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an system threshold Replaces the threshold belonging to an system. This action requires &#x60;can_update&#x60; permission on the system.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object body that will be updated.</param>
        /// <param name="systemId">Id of the system</param>
        /// <param name="id">Id of the system threshold</param>
        /// <returns>Task of ApiResponse (ThresholdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThresholdResponse>> UpdateSystemThresholdAsyncWithHttpInfo (ThresholdRequest body, long? systemId, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThresholdApi->UpdateSystemThreshold");
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new ApiException(400, "Missing required parameter 'systemId' when calling ThresholdApi->UpdateSystemThreshold");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ThresholdApi->UpdateSystemThreshold");

            var localVarPath = "/systems/{system_id}/thresholds/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (systemId != null) localVarPathParams.Add("system_id", this.Configuration.ApiClient.ParameterToString(systemId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSystemThreshold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThresholdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThresholdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThresholdResponse)));
        }

    }
}
