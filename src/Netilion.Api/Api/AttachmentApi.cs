/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Netilion.Api.Client;
using Netilion.Api.Model;

namespace Netilion.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAttachmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new link as attachment
        /// </summary>
        /// <remarks>
        /// Create an attachments that links to an external resource
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse CreateLinkAttachment (AttachmentLinkRequest body);

        /// <summary>
        /// Create a new link as attachment
        /// </summary>
        /// <remarks>
        /// Create an attachments that links to an external resource
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> CreateLinkAttachmentWithHttpInfo (AttachmentLinkRequest body);
        /// <summary>
        /// Delete an attachment and the file
        /// </summary>
        /// <remarks>
        /// Delete a specific attachment resource and file identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns></returns>
        void DeleteAttachment (long? id);

        /// <summary>
        /// Delete an attachment and the file
        /// </summary>
        /// <remarks>
        /// Delete a specific attachment resource and file identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAttachmentWithHttpInfo (long? id);
        /// <summary>
        /// Download the attachments file
        /// </summary>
        /// <remarks>
        /// Download the file of the attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns></returns>
        void DownloadAttachment (long? id, string disposition = null);

        /// <summary>
        /// Download the attachments file
        /// </summary>
        /// <remarks>
        /// Download the file of the attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadAttachmentWithHttpInfo (long? id, string disposition = null);
        /// <summary>
        /// Get a single attachment
        /// </summary>
        /// <remarks>
        /// specific attachment in your accessible scope, identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse GetAttachmentById (long? id);

        /// <summary>
        /// Get a single attachment
        /// </summary>
        /// <remarks>
        /// specific attachment in your accessible scope, identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> GetAttachmentByIdWithHttpInfo (long? id);
        /// <summary>
        /// Get a range of attachments
        /// </summary>
        /// <remarks>
        /// Returns a list of all attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentAuthor">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateFrom">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateTo">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        AttachmentsResponse GetAttachments (int? page = null, int? perPage = null, string contentAuthor = null, string contentVersion = null, string remarks = null, DateTime? contentDate = null, DateTime? contentDateFrom = null, DateTime? contentDateTo = null, string fileName = null, string orderBy = null);

        /// <summary>
        /// Get a range of attachments
        /// </summary>
        /// <remarks>
        /// Returns a list of all attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentAuthor">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateFrom">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateTo">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        ApiResponse<AttachmentsResponse> GetAttachmentsWithHttpInfo (int? page = null, int? perPage = null, string contentAuthor = null, string contentVersion = null, string remarks = null, DateTime? contentDate = null, DateTime? contentDateFrom = null, DateTime? contentDateTo = null, string fileName = null, string orderBy = null);
        /// <summary>
        /// Update an attachment and especially its file
        /// </summary>
        /// <remarks>
        /// The attachment object and also the file can be changed with a patch call. Checks the file-storage quota
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="contentAuthor"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns></returns>
        void UpdateAttachment (long? id, byte[] file = null, long? documentId = null, string contentAuthor = null, string contentDate = null, string remarks = null, string languages = null);

        /// <summary>
        /// Update an attachment and especially its file
        /// </summary>
        /// <remarks>
        /// The attachment object and also the file can be changed with a patch call. Checks the file-storage quota
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="contentAuthor"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAttachmentWithHttpInfo (long? id, byte[] file = null, long? documentId = null, string contentAuthor = null, string contentDate = null, string remarks = null, string languages = null);
        /// <summary>
        /// Update an attachment with a link
        /// </summary>
        /// <remarks>
        /// update an attachment that has a link
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <param name="id">Id of the attachment to update</param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse UpdateLinkAttachment (AttachmentLinkRequest body, long? id);

        /// <summary>
        /// Update an attachment with a link
        /// </summary>
        /// <remarks>
        /// update an attachment that has a link
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <param name="id">Id of the attachment to update</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> UpdateLinkAttachmentWithHttpInfo (AttachmentLinkRequest body, long? id);
        /// <summary>
        /// Create and upload a new attachment
        /// </summary>
        /// <remarks>
        /// the creation of an attachment works through a multipart/form-data upload of the file, its filename, content-author, content-date and languages of the file. Special characters (&amp;$+,/:;&#x3D;?@&lt;&gt;[]{}|^~%#) and white spaces in the file name will be replaced with underscores. Checks for the file-storage quota.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="documentId"></param>
        /// <param name="contentAuthor"></param>
        /// <param name="contentVersion"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <param name="languages"></param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse UploadAttachment (byte[] file, long? documentId, string contentAuthor, string contentVersion, string contentDate, string remarks, string languages);

        /// <summary>
        /// Create and upload a new attachment
        /// </summary>
        /// <remarks>
        /// the creation of an attachment works through a multipart/form-data upload of the file, its filename, content-author, content-date and languages of the file. Special characters (&amp;$+,/:;&#x3D;?@&lt;&gt;[]{}|^~%#) and white spaces in the file name will be replaced with underscores. Checks for the file-storage quota.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="documentId"></param>
        /// <param name="contentAuthor"></param>
        /// <param name="contentVersion"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <param name="languages"></param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> UploadAttachmentWithHttpInfo (byte[] file, long? documentId, string contentAuthor, string contentVersion, string contentDate, string remarks, string languages);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new link as attachment
        /// </summary>
        /// <remarks>
        /// Create an attachments that links to an external resource
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> CreateLinkAttachmentAsync (AttachmentLinkRequest body);

        /// <summary>
        /// Create a new link as attachment
        /// </summary>
        /// <remarks>
        /// Create an attachments that links to an external resource
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> CreateLinkAttachmentAsyncWithHttpInfo (AttachmentLinkRequest body);
        /// <summary>
        /// Delete an attachment and the file
        /// </summary>
        /// <remarks>
        /// Delete a specific attachment resource and file identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAttachmentAsync (long? id);

        /// <summary>
        /// Delete an attachment and the file
        /// </summary>
        /// <remarks>
        /// Delete a specific attachment resource and file identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAttachmentAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Download the attachments file
        /// </summary>
        /// <remarks>
        /// Download the file of the attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadAttachmentAsync (long? id, string disposition = null);

        /// <summary>
        /// Download the attachments file
        /// </summary>
        /// <remarks>
        /// Download the file of the attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadAttachmentAsyncWithHttpInfo (long? id, string disposition = null);
        /// <summary>
        /// Get a single attachment
        /// </summary>
        /// <remarks>
        /// specific attachment in your accessible scope, identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> GetAttachmentByIdAsync (long? id);

        /// <summary>
        /// Get a single attachment
        /// </summary>
        /// <remarks>
        /// specific attachment in your accessible scope, identified by the id in the URL.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> GetAttachmentByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get a range of attachments
        /// </summary>
        /// <remarks>
        /// Returns a list of all attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentAuthor">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateFrom">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateTo">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        System.Threading.Tasks.Task<AttachmentsResponse> GetAttachmentsAsync (int? page = null, int? perPage = null, string contentAuthor = null, string contentVersion = null, string remarks = null, DateTime? contentDate = null, DateTime? contentDateFrom = null, DateTime? contentDateTo = null, string fileName = null, string orderBy = null);

        /// <summary>
        /// Get a range of attachments
        /// </summary>
        /// <remarks>
        /// Returns a list of all attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentAuthor">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateFrom">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateTo">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> GetAttachmentsAsyncWithHttpInfo (int? page = null, int? perPage = null, string contentAuthor = null, string contentVersion = null, string remarks = null, DateTime? contentDate = null, DateTime? contentDateFrom = null, DateTime? contentDateTo = null, string fileName = null, string orderBy = null);
        /// <summary>
        /// Update an attachment and especially its file
        /// </summary>
        /// <remarks>
        /// The attachment object and also the file can be changed with a patch call. Checks the file-storage quota
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="contentAuthor"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAttachmentAsync (long? id, byte[] file = null, long? documentId = null, string contentAuthor = null, string contentDate = null, string remarks = null, string languages = null);

        /// <summary>
        /// Update an attachment and especially its file
        /// </summary>
        /// <remarks>
        /// The attachment object and also the file can be changed with a patch call. Checks the file-storage quota
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="contentAuthor"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAttachmentAsyncWithHttpInfo (long? id, byte[] file = null, long? documentId = null, string contentAuthor = null, string contentDate = null, string remarks = null, string languages = null);
        /// <summary>
        /// Update an attachment with a link
        /// </summary>
        /// <remarks>
        /// update an attachment that has a link
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <param name="id">Id of the attachment to update</param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> UpdateLinkAttachmentAsync (AttachmentLinkRequest body, long? id);

        /// <summary>
        /// Update an attachment with a link
        /// </summary>
        /// <remarks>
        /// update an attachment that has a link
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <param name="id">Id of the attachment to update</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> UpdateLinkAttachmentAsyncWithHttpInfo (AttachmentLinkRequest body, long? id);
        /// <summary>
        /// Create and upload a new attachment
        /// </summary>
        /// <remarks>
        /// the creation of an attachment works through a multipart/form-data upload of the file, its filename, content-author, content-date and languages of the file. Special characters (&amp;$+,/:;&#x3D;?@&lt;&gt;[]{}|^~%#) and white spaces in the file name will be replaced with underscores. Checks for the file-storage quota.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="documentId"></param>
        /// <param name="contentAuthor"></param>
        /// <param name="contentVersion"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <param name="languages"></param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> UploadAttachmentAsync (byte[] file, long? documentId, string contentAuthor, string contentVersion, string contentDate, string remarks, string languages);

        /// <summary>
        /// Create and upload a new attachment
        /// </summary>
        /// <remarks>
        /// the creation of an attachment works through a multipart/form-data upload of the file, its filename, content-author, content-date and languages of the file. Special characters (&amp;$+,/:;&#x3D;?@&lt;&gt;[]{}|^~%#) and white spaces in the file name will be replaced with underscores. Checks for the file-storage quota.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="documentId"></param>
        /// <param name="contentAuthor"></param>
        /// <param name="contentVersion"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <param name="languages"></param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> UploadAttachmentAsyncWithHttpInfo (byte[] file, long? documentId, string contentAuthor, string contentVersion, string contentDate, string remarks, string languages);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AttachmentApi : IAttachmentApi
    {
        private Netilion.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttachmentApi(String basePath)
        {
            this.Configuration = new Netilion.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class
        /// </summary>
        /// <returns></returns>
        public AttachmentApi()
        {
            this.Configuration = Netilion.Api.Client.Configuration.Default;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AttachmentApi(Netilion.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Netilion.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Netilion.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Netilion.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new link as attachment Create an attachments that links to an external resource
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse CreateLinkAttachment (AttachmentLinkRequest body)
        {
             ApiResponse<AttachmentResponse> localVarResponse = CreateLinkAttachmentWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new link as attachment Create an attachments that links to an external resource
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse< AttachmentResponse > CreateLinkAttachmentWithHttpInfo (AttachmentLinkRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttachmentApi->CreateLinkAttachment");

            var localVarPath = "/attachments/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLinkAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Create a new link as attachment Create an attachments that links to an external resource
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse> CreateLinkAttachmentAsync (AttachmentLinkRequest body)
        {
             ApiResponse<AttachmentResponse> localVarResponse = await CreateLinkAttachmentAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new link as attachment Create an attachments that links to an external resource
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> CreateLinkAttachmentAsyncWithHttpInfo (AttachmentLinkRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttachmentApi->CreateLinkAttachment");

            var localVarPath = "/attachments/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLinkAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Delete an attachment and the file Delete a specific attachment resource and file identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns></returns>
        public void DeleteAttachment (long? id)
        {
             DeleteAttachmentWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an attachment and the file Delete a specific attachment resource and file identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAttachmentWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentApi->DeleteAttachment");

            var localVarPath = "/attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an attachment and the file Delete a specific attachment resource and file identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAttachmentAsync (long? id)
        {
             await DeleteAttachmentAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an attachment and the file Delete a specific attachment resource and file identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAttachmentAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentApi->DeleteAttachment");

            var localVarPath = "/attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download the attachments file Download the file of the attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns></returns>
        public void DownloadAttachment (long? id, string disposition = null)
        {
             DownloadAttachmentWithHttpInfo(id, disposition);
        }

        /// <summary>
        /// Download the attachments file Download the file of the attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DownloadAttachmentWithHttpInfo (long? id, string disposition = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentApi->DownloadAttachment");

            var localVarPath = "/attachments/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disposition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disposition", disposition)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download the attachments file Download the file of the attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadAttachmentAsync (long? id, string disposition = null)
        {
             await DownloadAttachmentAsyncWithHttpInfo(id, disposition);

        }

        /// <summary>
        /// Download the attachments file Download the file of the attachment with the original filename. Content-Transfer-Encoding header is set to binary
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <param name="disposition">Disposition type the download should be returned with. Allowed values are \&quot;inline\&quot; and \&quot;attachment\&quot;. Default is \&quot;attachment\&quot;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadAttachmentAsyncWithHttpInfo (long? id, string disposition = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentApi->DownloadAttachment");

            var localVarPath = "/attachments/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disposition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disposition", disposition)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a single attachment specific attachment in your accessible scope, identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse GetAttachmentById (long? id)
        {
             ApiResponse<AttachmentResponse> localVarResponse = GetAttachmentByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single attachment specific attachment in your accessible scope, identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse< AttachmentResponse > GetAttachmentByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentApi->GetAttachmentById");

            var localVarPath = "/attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Get a single attachment specific attachment in your accessible scope, identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse> GetAttachmentByIdAsync (long? id)
        {
             ApiResponse<AttachmentResponse> localVarResponse = await GetAttachmentByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single attachment specific attachment in your accessible scope, identified by the id in the URL.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to fetch</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> GetAttachmentByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentApi->GetAttachmentById");

            var localVarPath = "/attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Get a range of attachments Returns a list of all attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentAuthor">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateFrom">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateTo">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        public AttachmentsResponse GetAttachments (int? page = null, int? perPage = null, string contentAuthor = null, string contentVersion = null, string remarks = null, DateTime? contentDate = null, DateTime? contentDateFrom = null, DateTime? contentDateTo = null, string fileName = null, string orderBy = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = GetAttachmentsWithHttpInfo(page, perPage, contentAuthor, contentVersion, remarks, contentDate, contentDateFrom, contentDateTo, fileName, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a range of attachments Returns a list of all attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentAuthor">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateFrom">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateTo">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        public ApiResponse< AttachmentsResponse > GetAttachmentsWithHttpInfo (int? page = null, int? perPage = null, string contentAuthor = null, string contentVersion = null, string remarks = null, DateTime? contentDate = null, DateTime? contentDateFrom = null, DateTime? contentDateTo = null, string fileName = null, string orderBy = null)
        {

            var localVarPath = "/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (contentAuthor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_author", contentAuthor)); // query parameter
            if (contentVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_version", contentVersion)); // query parameter
            if (remarks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "remarks", remarks)); // query parameter
            if (contentDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_date", contentDate)); // query parameter
            if (contentDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_date_from", contentDateFrom)); // query parameter
            if (contentDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_date_to", contentDateTo)); // query parameter
            if (fileName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "file_name", fileName)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Get a range of attachments Returns a list of all attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentAuthor">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateFrom">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateTo">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentsResponse> GetAttachmentsAsync (int? page = null, int? perPage = null, string contentAuthor = null, string contentVersion = null, string remarks = null, DateTime? contentDate = null, DateTime? contentDateFrom = null, DateTime? contentDateTo = null, string fileName = null, string orderBy = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = await GetAttachmentsAsyncWithHttpInfo(page, perPage, contentAuthor, contentVersion, remarks, contentDate, contentDateFrom, contentDateTo, fileName, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a range of attachments Returns a list of all attachments that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.&#x27;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="contentAuthor">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="remarks">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="contentDate">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateFrom">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="contentDateTo">Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="fileName">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> GetAttachmentsAsyncWithHttpInfo (int? page = null, int? perPage = null, string contentAuthor = null, string contentVersion = null, string remarks = null, DateTime? contentDate = null, DateTime? contentDateFrom = null, DateTime? contentDateTo = null, string fileName = null, string orderBy = null)
        {

            var localVarPath = "/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (contentAuthor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_author", contentAuthor)); // query parameter
            if (contentVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_version", contentVersion)); // query parameter
            if (remarks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "remarks", remarks)); // query parameter
            if (contentDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_date", contentDate)); // query parameter
            if (contentDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_date_from", contentDateFrom)); // query parameter
            if (contentDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content_date_to", contentDateTo)); // query parameter
            if (fileName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "file_name", fileName)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Update an attachment and especially its file The attachment object and also the file can be changed with a patch call. Checks the file-storage quota
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="contentAuthor"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns></returns>
        public void UpdateAttachment (long? id, byte[] file = null, long? documentId = null, string contentAuthor = null, string contentDate = null, string remarks = null, string languages = null)
        {
             UpdateAttachmentWithHttpInfo(id, file, documentId, contentAuthor, contentDate, remarks, languages);
        }

        /// <summary>
        /// Update an attachment and especially its file The attachment object and also the file can be changed with a patch call. Checks the file-storage quota
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="contentAuthor"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAttachmentWithHttpInfo (long? id, byte[] file = null, long? documentId = null, string contentAuthor = null, string contentDate = null, string remarks = null, string languages = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentApi->UpdateAttachment");

            var localVarPath = "/attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (documentId != null) localVarFormParams.Add("document_id", this.Configuration.ApiClient.ParameterToString(documentId)); // form parameter
            if (contentAuthor != null) localVarFormParams.Add("content_author", this.Configuration.ApiClient.ParameterToString(contentAuthor)); // form parameter
            if (contentDate != null) localVarFormParams.Add("content_date", this.Configuration.ApiClient.ParameterToString(contentDate)); // form parameter
            if (remarks != null) localVarFormParams.Add("remarks", this.Configuration.ApiClient.ParameterToString(remarks)); // form parameter
            if (languages != null) localVarFormParams.Add("languages", this.Configuration.ApiClient.ParameterToString(languages)); // form parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update an attachment and especially its file The attachment object and also the file can be changed with a patch call. Checks the file-storage quota
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="contentAuthor"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAttachmentAsync (long? id, byte[] file = null, long? documentId = null, string contentAuthor = null, string contentDate = null, string remarks = null, string languages = null)
        {
             await UpdateAttachmentAsyncWithHttpInfo(id, file, documentId, contentAuthor, contentDate, remarks, languages);

        }

        /// <summary>
        /// Update an attachment and especially its file The attachment object and also the file can be changed with a patch call. Checks the file-storage quota
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the attachment to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="documentId"> (optional)</param>
        /// <param name="contentAuthor"> (optional)</param>
        /// <param name="contentDate"> (optional)</param>
        /// <param name="remarks"> (optional)</param>
        /// <param name="languages"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAttachmentAsyncWithHttpInfo (long? id, byte[] file = null, long? documentId = null, string contentAuthor = null, string contentDate = null, string remarks = null, string languages = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentApi->UpdateAttachment");

            var localVarPath = "/attachments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (documentId != null) localVarFormParams.Add("document_id", this.Configuration.ApiClient.ParameterToString(documentId)); // form parameter
            if (contentAuthor != null) localVarFormParams.Add("content_author", this.Configuration.ApiClient.ParameterToString(contentAuthor)); // form parameter
            if (contentDate != null) localVarFormParams.Add("content_date", this.Configuration.ApiClient.ParameterToString(contentDate)); // form parameter
            if (remarks != null) localVarFormParams.Add("remarks", this.Configuration.ApiClient.ParameterToString(remarks)); // form parameter
            if (languages != null) localVarFormParams.Add("languages", this.Configuration.ApiClient.ParameterToString(languages)); // form parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update an attachment with a link update an attachment that has a link
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <param name="id">Id of the attachment to update</param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse UpdateLinkAttachment (AttachmentLinkRequest body, long? id)
        {
             ApiResponse<AttachmentResponse> localVarResponse = UpdateLinkAttachmentWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an attachment with a link update an attachment that has a link
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <param name="id">Id of the attachment to update</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse< AttachmentResponse > UpdateLinkAttachmentWithHttpInfo (AttachmentLinkRequest body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttachmentApi->UpdateLinkAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentApi->UpdateLinkAttachment");

            var localVarPath = "/attachments/links/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLinkAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Update an attachment with a link update an attachment that has a link
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <param name="id">Id of the attachment to update</param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse> UpdateLinkAttachmentAsync (AttachmentLinkRequest body, long? id)
        {
             ApiResponse<AttachmentResponse> localVarResponse = await UpdateLinkAttachmentAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an attachment with a link update an attachment that has a link
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Attachment object that needs to be created</param>
        /// <param name="id">Id of the attachment to update</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> UpdateLinkAttachmentAsyncWithHttpInfo (AttachmentLinkRequest body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttachmentApi->UpdateLinkAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AttachmentApi->UpdateLinkAttachment");

            var localVarPath = "/attachments/links/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLinkAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Create and upload a new attachment the creation of an attachment works through a multipart/form-data upload of the file, its filename, content-author, content-date and languages of the file. Special characters (&amp;$+,/:;&#x3D;?@&lt;&gt;[]{}|^~%#) and white spaces in the file name will be replaced with underscores. Checks for the file-storage quota.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="documentId"></param>
        /// <param name="contentAuthor"></param>
        /// <param name="contentVersion"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <param name="languages"></param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse UploadAttachment (byte[] file, long? documentId, string contentAuthor, string contentVersion, string contentDate, string remarks, string languages)
        {
             ApiResponse<AttachmentResponse> localVarResponse = UploadAttachmentWithHttpInfo(file, documentId, contentAuthor, contentVersion, contentDate, remarks, languages);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create and upload a new attachment the creation of an attachment works through a multipart/form-data upload of the file, its filename, content-author, content-date and languages of the file. Special characters (&amp;$+,/:;&#x3D;?@&lt;&gt;[]{}|^~%#) and white spaces in the file name will be replaced with underscores. Checks for the file-storage quota.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="documentId"></param>
        /// <param name="contentAuthor"></param>
        /// <param name="contentVersion"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <param name="languages"></param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse< AttachmentResponse > UploadAttachmentWithHttpInfo (byte[] file, long? documentId, string contentAuthor, string contentVersion, string contentDate, string remarks, string languages)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AttachmentApi->UploadAttachment");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling AttachmentApi->UploadAttachment");
            // verify the required parameter 'contentAuthor' is set
            if (contentAuthor == null)
                throw new ApiException(400, "Missing required parameter 'contentAuthor' when calling AttachmentApi->UploadAttachment");
            // verify the required parameter 'contentVersion' is set
            if (contentVersion == null)
                throw new ApiException(400, "Missing required parameter 'contentVersion' when calling AttachmentApi->UploadAttachment");
            // verify the required parameter 'contentDate' is set
            if (contentDate == null)
                throw new ApiException(400, "Missing required parameter 'contentDate' when calling AttachmentApi->UploadAttachment");
            // verify the required parameter 'remarks' is set
            if (remarks == null)
                throw new ApiException(400, "Missing required parameter 'remarks' when calling AttachmentApi->UploadAttachment");
            // verify the required parameter 'languages' is set
            if (languages == null)
                throw new ApiException(400, "Missing required parameter 'languages' when calling AttachmentApi->UploadAttachment");

            var localVarPath = "/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (documentId != null) localVarFormParams.Add("document_id", this.Configuration.ApiClient.ParameterToString(documentId)); // form parameter
            if (contentAuthor != null) localVarFormParams.Add("content_author", this.Configuration.ApiClient.ParameterToString(contentAuthor)); // form parameter
            if (contentVersion != null) localVarFormParams.Add("content_version", this.Configuration.ApiClient.ParameterToString(contentVersion)); // form parameter
            if (contentDate != null) localVarFormParams.Add("content_date", this.Configuration.ApiClient.ParameterToString(contentDate)); // form parameter
            if (remarks != null) localVarFormParams.Add("remarks", this.Configuration.ApiClient.ParameterToString(remarks)); // form parameter
            if (languages != null) localVarFormParams.Add("languages", this.Configuration.ApiClient.ParameterToString(languages)); // form parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Create and upload a new attachment the creation of an attachment works through a multipart/form-data upload of the file, its filename, content-author, content-date and languages of the file. Special characters (&amp;$+,/:;&#x3D;?@&lt;&gt;[]{}|^~%#) and white spaces in the file name will be replaced with underscores. Checks for the file-storage quota.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="documentId"></param>
        /// <param name="contentAuthor"></param>
        /// <param name="contentVersion"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <param name="languages"></param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse> UploadAttachmentAsync (byte[] file, long? documentId, string contentAuthor, string contentVersion, string contentDate, string remarks, string languages)
        {
             ApiResponse<AttachmentResponse> localVarResponse = await UploadAttachmentAsyncWithHttpInfo(file, documentId, contentAuthor, contentVersion, contentDate, remarks, languages);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create and upload a new attachment the creation of an attachment works through a multipart/form-data upload of the file, its filename, content-author, content-date and languages of the file. Special characters (&amp;$+,/:;&#x3D;?@&lt;&gt;[]{}|^~%#) and white spaces in the file name will be replaced with underscores. Checks for the file-storage quota.  Forbidden content-types are  - application/xhtml+xml - text/html - application/javascript - text/javascript - application/x-shockwave-flash - application/vnd.adobe.flash.movie - video/x-flv - text/php - application/php - application/x-php - application/x-httpd-php
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="documentId"></param>
        /// <param name="contentAuthor"></param>
        /// <param name="contentVersion"></param>
        /// <param name="contentDate"></param>
        /// <param name="remarks"></param>
        /// <param name="languages"></param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> UploadAttachmentAsyncWithHttpInfo (byte[] file, long? documentId, string contentAuthor, string contentVersion, string contentDate, string remarks, string languages)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AttachmentApi->UploadAttachment");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling AttachmentApi->UploadAttachment");
            // verify the required parameter 'contentAuthor' is set
            if (contentAuthor == null)
                throw new ApiException(400, "Missing required parameter 'contentAuthor' when calling AttachmentApi->UploadAttachment");
            // verify the required parameter 'contentVersion' is set
            if (contentVersion == null)
                throw new ApiException(400, "Missing required parameter 'contentVersion' when calling AttachmentApi->UploadAttachment");
            // verify the required parameter 'contentDate' is set
            if (contentDate == null)
                throw new ApiException(400, "Missing required parameter 'contentDate' when calling AttachmentApi->UploadAttachment");
            // verify the required parameter 'remarks' is set
            if (remarks == null)
                throw new ApiException(400, "Missing required parameter 'remarks' when calling AttachmentApi->UploadAttachment");
            // verify the required parameter 'languages' is set
            if (languages == null)
                throw new ApiException(400, "Missing required parameter 'languages' when calling AttachmentApi->UploadAttachment");

            var localVarPath = "/attachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (documentId != null) localVarFormParams.Add("document_id", this.Configuration.ApiClient.ParameterToString(documentId)); // form parameter
            if (contentAuthor != null) localVarFormParams.Add("content_author", this.Configuration.ApiClient.ParameterToString(contentAuthor)); // form parameter
            if (contentVersion != null) localVarFormParams.Add("content_version", this.Configuration.ApiClient.ParameterToString(contentVersion)); // form parameter
            if (contentDate != null) localVarFormParams.Add("content_date", this.Configuration.ApiClient.ParameterToString(contentDate)); // form parameter
            if (remarks != null) localVarFormParams.Add("remarks", this.Configuration.ApiClient.ParameterToString(remarks)); // form parameter
            if (languages != null) localVarFormParams.Add("languages", this.Configuration.ApiClient.ParameterToString(languages)); // form parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

    }
}
