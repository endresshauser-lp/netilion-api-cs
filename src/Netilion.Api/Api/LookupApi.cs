/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Netilion.Api.Client;
using Netilion.Api.Model;

namespace Netilion.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILookupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// lookup for the extended order code for Endress+Hauser products
        /// </summary>
        /// <remarks>
        /// Returns an extended order code for Endress+Hauser products when the given order code is existing
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCode">any Endress+Hauser order code</param>
        /// <returns>ExtendedOrderCode</returns>
        ExtendedOrderCode EhExtendedOrderCodeLookup (string orderCode);

        /// <summary>
        /// lookup for the extended order code for Endress+Hauser products
        /// </summary>
        /// <remarks>
        /// Returns an extended order code for Endress+Hauser products when the given order code is existing
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCode">any Endress+Hauser order code</param>
        /// <returns>ApiResponse of ExtendedOrderCode</returns>
        ApiResponse<ExtendedOrderCode> EhExtendedOrderCodeLookupWithHttpInfo (string orderCode);
        /// <summary>
        /// lookup for Endress+Hauser products with asset specific search criterias
        /// </summary>
        /// <remarks>
        /// Returns an Endress+Hauser product, matching the serial number. The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Any Endress+Hauser serial number</param>
        /// <returns>ProductResponse</returns>
        ProductResponse EhProductLookup (string serialNumber);

        /// <summary>
        /// lookup for Endress+Hauser products with asset specific search criterias
        /// </summary>
        /// <remarks>
        /// Returns an Endress+Hauser product, matching the serial number. The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Any Endress+Hauser serial number</param>
        /// <returns>ApiResponse of ProductResponse</returns>
        ApiResponse<ProductResponse> EhProductLookupWithHttpInfo (string serialNumber);
        /// <summary>
        /// lookup for Endress+Hauser successor products
        /// </summary>
        /// <remarks>
        /// Returns successor information, if a serial_number or order code was provided, the order code transformer is used, for product_code the successor comes from the Product Status List r Possible include values: &#x60;&#x60;&#x60;product, product.pictures,product.status, product.parent&#x60;&#x60;&#x60; The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Any Endress+Hauser serial number (optional)</param>
        /// <param name="orderCode">an Endress+Hauser order code (optional)</param>
        /// <param name="productCode">an Endress+Hauser product_code (optional)</param>
        /// <returns>SuccessorsResponse</returns>
        SuccessorsResponse EhSuccessorLookup (string include = null, string serialNumber = null, string orderCode = null, string productCode = null);

        /// <summary>
        /// lookup for Endress+Hauser successor products
        /// </summary>
        /// <remarks>
        /// Returns successor information, if a serial_number or order code was provided, the order code transformer is used, for product_code the successor comes from the Product Status List r Possible include values: &#x60;&#x60;&#x60;product, product.pictures,product.status, product.parent&#x60;&#x60;&#x60; The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Any Endress+Hauser serial number (optional)</param>
        /// <param name="orderCode">an Endress+Hauser order code (optional)</param>
        /// <param name="productCode">an Endress+Hauser product_code (optional)</param>
        /// <returns>ApiResponse of SuccessorsResponse</returns>
        ApiResponse<SuccessorsResponse> EhSuccessorLookupWithHttpInfo (string include = null, string serialNumber = null, string orderCode = null, string productCode = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// lookup for the extended order code for Endress+Hauser products
        /// </summary>
        /// <remarks>
        /// Returns an extended order code for Endress+Hauser products when the given order code is existing
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCode">any Endress+Hauser order code</param>
        /// <returns>Task of ExtendedOrderCode</returns>
        System.Threading.Tasks.Task<ExtendedOrderCode> EhExtendedOrderCodeLookupAsync (string orderCode);

        /// <summary>
        /// lookup for the extended order code for Endress+Hauser products
        /// </summary>
        /// <remarks>
        /// Returns an extended order code for Endress+Hauser products when the given order code is existing
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCode">any Endress+Hauser order code</param>
        /// <returns>Task of ApiResponse (ExtendedOrderCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtendedOrderCode>> EhExtendedOrderCodeLookupAsyncWithHttpInfo (string orderCode);
        /// <summary>
        /// lookup for Endress+Hauser products with asset specific search criterias
        /// </summary>
        /// <remarks>
        /// Returns an Endress+Hauser product, matching the serial number. The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Any Endress+Hauser serial number</param>
        /// <returns>Task of ProductResponse</returns>
        System.Threading.Tasks.Task<ProductResponse> EhProductLookupAsync (string serialNumber);

        /// <summary>
        /// lookup for Endress+Hauser products with asset specific search criterias
        /// </summary>
        /// <remarks>
        /// Returns an Endress+Hauser product, matching the serial number. The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Any Endress+Hauser serial number</param>
        /// <returns>Task of ApiResponse (ProductResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductResponse>> EhProductLookupAsyncWithHttpInfo (string serialNumber);
        /// <summary>
        /// lookup for Endress+Hauser successor products
        /// </summary>
        /// <remarks>
        /// Returns successor information, if a serial_number or order code was provided, the order code transformer is used, for product_code the successor comes from the Product Status List r Possible include values: &#x60;&#x60;&#x60;product, product.pictures,product.status, product.parent&#x60;&#x60;&#x60; The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Any Endress+Hauser serial number (optional)</param>
        /// <param name="orderCode">an Endress+Hauser order code (optional)</param>
        /// <param name="productCode">an Endress+Hauser product_code (optional)</param>
        /// <returns>Task of SuccessorsResponse</returns>
        System.Threading.Tasks.Task<SuccessorsResponse> EhSuccessorLookupAsync (string include = null, string serialNumber = null, string orderCode = null, string productCode = null);

        /// <summary>
        /// lookup for Endress+Hauser successor products
        /// </summary>
        /// <remarks>
        /// Returns successor information, if a serial_number or order code was provided, the order code transformer is used, for product_code the successor comes from the Product Status List r Possible include values: &#x60;&#x60;&#x60;product, product.pictures,product.status, product.parent&#x60;&#x60;&#x60; The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Any Endress+Hauser serial number (optional)</param>
        /// <param name="orderCode">an Endress+Hauser order code (optional)</param>
        /// <param name="productCode">an Endress+Hauser product_code (optional)</param>
        /// <returns>Task of ApiResponse (SuccessorsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessorsResponse>> EhSuccessorLookupAsyncWithHttpInfo (string include = null, string serialNumber = null, string orderCode = null, string productCode = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LookupApi : ILookupApi
    {
        private Netilion.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LookupApi(String basePath)
        {
            this.Configuration = new Netilion.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupApi"/> class
        /// </summary>
        /// <returns></returns>
        public LookupApi()
        {
            this.Configuration = Netilion.Api.Client.Configuration.Default;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LookupApi(Netilion.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Netilion.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Netilion.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Netilion.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// lookup for the extended order code for Endress+Hauser products Returns an extended order code for Endress+Hauser products when the given order code is existing
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCode">any Endress+Hauser order code</param>
        /// <returns>ExtendedOrderCode</returns>
        public ExtendedOrderCode EhExtendedOrderCodeLookup (string orderCode)
        {
             ApiResponse<ExtendedOrderCode> localVarResponse = EhExtendedOrderCodeLookupWithHttpInfo(orderCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// lookup for the extended order code for Endress+Hauser products Returns an extended order code for Endress+Hauser products when the given order code is existing
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCode">any Endress+Hauser order code</param>
        /// <returns>ApiResponse of ExtendedOrderCode</returns>
        public ApiResponse< ExtendedOrderCode > EhExtendedOrderCodeLookupWithHttpInfo (string orderCode)
        {
            // verify the required parameter 'orderCode' is set
            if (orderCode == null)
                throw new ApiException(400, "Missing required parameter 'orderCode' when calling LookupApi->EhExtendedOrderCodeLookup");

            var localVarPath = "/endress/extended_order_code_lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_code", orderCode)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EhExtendedOrderCodeLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtendedOrderCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtendedOrderCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtendedOrderCode)));
        }

        /// <summary>
        /// lookup for the extended order code for Endress+Hauser products Returns an extended order code for Endress+Hauser products when the given order code is existing
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCode">any Endress+Hauser order code</param>
        /// <returns>Task of ExtendedOrderCode</returns>
        public async System.Threading.Tasks.Task<ExtendedOrderCode> EhExtendedOrderCodeLookupAsync (string orderCode)
        {
             ApiResponse<ExtendedOrderCode> localVarResponse = await EhExtendedOrderCodeLookupAsyncWithHttpInfo(orderCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// lookup for the extended order code for Endress+Hauser products Returns an extended order code for Endress+Hauser products when the given order code is existing
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCode">any Endress+Hauser order code</param>
        /// <returns>Task of ApiResponse (ExtendedOrderCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtendedOrderCode>> EhExtendedOrderCodeLookupAsyncWithHttpInfo (string orderCode)
        {
            // verify the required parameter 'orderCode' is set
            if (orderCode == null)
                throw new ApiException(400, "Missing required parameter 'orderCode' when calling LookupApi->EhExtendedOrderCodeLookup");

            var localVarPath = "/endress/extended_order_code_lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_code", orderCode)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EhExtendedOrderCodeLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtendedOrderCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtendedOrderCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtendedOrderCode)));
        }

        /// <summary>
        /// lookup for Endress+Hauser products with asset specific search criterias Returns an Endress+Hauser product, matching the serial number. The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Any Endress+Hauser serial number</param>
        /// <returns>ProductResponse</returns>
        public ProductResponse EhProductLookup (string serialNumber)
        {
             ApiResponse<ProductResponse> localVarResponse = EhProductLookupWithHttpInfo(serialNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// lookup for Endress+Hauser products with asset specific search criterias Returns an Endress+Hauser product, matching the serial number. The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Any Endress+Hauser serial number</param>
        /// <returns>ApiResponse of ProductResponse</returns>
        public ApiResponse< ProductResponse > EhProductLookupWithHttpInfo (string serialNumber)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling LookupApi->EhProductLookup");

            var localVarPath = "/endress/product_lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serialNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serial_number", serialNumber)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EhProductLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductResponse)));
        }

        /// <summary>
        /// lookup for Endress+Hauser products with asset specific search criterias Returns an Endress+Hauser product, matching the serial number. The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Any Endress+Hauser serial number</param>
        /// <returns>Task of ProductResponse</returns>
        public async System.Threading.Tasks.Task<ProductResponse> EhProductLookupAsync (string serialNumber)
        {
             ApiResponse<ProductResponse> localVarResponse = await EhProductLookupAsyncWithHttpInfo(serialNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// lookup for Endress+Hauser products with asset specific search criterias Returns an Endress+Hauser product, matching the serial number. The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumber">Any Endress+Hauser serial number</param>
        /// <returns>Task of ApiResponse (ProductResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductResponse>> EhProductLookupAsyncWithHttpInfo (string serialNumber)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling LookupApi->EhProductLookup");

            var localVarPath = "/endress/product_lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serialNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serial_number", serialNumber)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EhProductLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductResponse)));
        }

        /// <summary>
        /// lookup for Endress+Hauser successor products Returns successor information, if a serial_number or order code was provided, the order code transformer is used, for product_code the successor comes from the Product Status List r Possible include values: &#x60;&#x60;&#x60;product, product.pictures,product.status, product.parent&#x60;&#x60;&#x60; The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Any Endress+Hauser serial number (optional)</param>
        /// <param name="orderCode">an Endress+Hauser order code (optional)</param>
        /// <param name="productCode">an Endress+Hauser product_code (optional)</param>
        /// <returns>SuccessorsResponse</returns>
        public SuccessorsResponse EhSuccessorLookup (string include = null, string serialNumber = null, string orderCode = null, string productCode = null)
        {
             ApiResponse<SuccessorsResponse> localVarResponse = EhSuccessorLookupWithHttpInfo(include, serialNumber, orderCode, productCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// lookup for Endress+Hauser successor products Returns successor information, if a serial_number or order code was provided, the order code transformer is used, for product_code the successor comes from the Product Status List r Possible include values: &#x60;&#x60;&#x60;product, product.pictures,product.status, product.parent&#x60;&#x60;&#x60; The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Any Endress+Hauser serial number (optional)</param>
        /// <param name="orderCode">an Endress+Hauser order code (optional)</param>
        /// <param name="productCode">an Endress+Hauser product_code (optional)</param>
        /// <returns>ApiResponse of SuccessorsResponse</returns>
        public ApiResponse< SuccessorsResponse > EhSuccessorLookupWithHttpInfo (string include = null, string serialNumber = null, string orderCode = null, string productCode = null)
        {

            var localVarPath = "/endress/successor_lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (serialNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serial_number", serialNumber)); // query parameter
            if (orderCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_code", orderCode)); // query parameter
            if (productCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_code", productCode)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EhSuccessorLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessorsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessorsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessorsResponse)));
        }

        /// <summary>
        /// lookup for Endress+Hauser successor products Returns successor information, if a serial_number or order code was provided, the order code transformer is used, for product_code the successor comes from the Product Status List r Possible include values: &#x60;&#x60;&#x60;product, product.pictures,product.status, product.parent&#x60;&#x60;&#x60; The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Any Endress+Hauser serial number (optional)</param>
        /// <param name="orderCode">an Endress+Hauser order code (optional)</param>
        /// <param name="productCode">an Endress+Hauser product_code (optional)</param>
        /// <returns>Task of SuccessorsResponse</returns>
        public async System.Threading.Tasks.Task<SuccessorsResponse> EhSuccessorLookupAsync (string include = null, string serialNumber = null, string orderCode = null, string productCode = null)
        {
             ApiResponse<SuccessorsResponse> localVarResponse = await EhSuccessorLookupAsyncWithHttpInfo(include, serialNumber, orderCode, productCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// lookup for Endress+Hauser successor products Returns successor information, if a serial_number or order code was provided, the order code transformer is used, for product_code the successor comes from the Product Status List r Possible include values: &#x60;&#x60;&#x60;product, product.pictures,product.status, product.parent&#x60;&#x60;&#x60; The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\\\).
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Any Endress+Hauser serial number (optional)</param>
        /// <param name="orderCode">an Endress+Hauser order code (optional)</param>
        /// <param name="productCode">an Endress+Hauser product_code (optional)</param>
        /// <returns>Task of ApiResponse (SuccessorsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessorsResponse>> EhSuccessorLookupAsyncWithHttpInfo (string include = null, string serialNumber = null, string orderCode = null, string productCode = null)
        {

            var localVarPath = "/endress/successor_lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (serialNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serial_number", serialNumber)); // query parameter
            if (orderCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_code", orderCode)); // query parameter
            if (productCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_code", productCode)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EhSuccessorLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessorsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessorsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessorsResponse)));
        }

    }
}
