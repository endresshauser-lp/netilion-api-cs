/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Netilion.Api.Client;
using Netilion.Api.Model;

namespace Netilion.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAssetApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add add_ons to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more add_ons to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the add_ons will be added</param>
        /// <returns></returns>
        void AddAddOnsToAsset (AddOnIDs body, long? assetId);

        /// <summary>
        /// Add add_ons to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more add_ons to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the add_ons will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddAddOnsToAssetWithHttpInfo (AddOnIDs body, long? assetId);
        /// <summary>
        /// Add a link as asset picture
        /// </summary>
        /// <remarks>
        /// Add an external resource as asset picture.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be created</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>PictureResponse</returns>
        PictureResponse AddAssetPictureLink (PictureLinkRequest body, long? id);

        /// <summary>
        /// Add a link as asset picture
        /// </summary>
        /// <remarks>
        /// Add an external resource as asset picture.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be created</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>ApiResponse of PictureResponse</returns>
        ApiResponse<PictureResponse> AddAssetPictureLinkWithHttpInfo (PictureLinkRequest body, long? id);
        /// <summary>
        /// Add deliveries to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more deliveries to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the deliveries will be added</param>
        /// <returns></returns>
        void AddDeliveriesToAsset (DeliveryIDs body, long? assetId);

        /// <summary>
        /// Add deliveries to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more deliveries to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the deliveries will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddDeliveriesToAssetWithHttpInfo (DeliveryIDs body, long? assetId);
        /// <summary>
        /// Add documents to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more documents to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the documents will be added</param>
        /// <returns></returns>
        void AddDocumentsToAsset (DocumentIDs body, long? assetId);

        /// <summary>
        /// Add documents to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more documents to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the documents will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddDocumentsToAssetWithHttpInfo (DocumentIDs body, long? assetId);
        /// <summary>
        /// Add instrumentations to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more instrumentations to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the instrumentations will be added</param>
        /// <returns></returns>
        void AddInstrumentationsToAsset (InstrumentationIDs body, long? assetId);

        /// <summary>
        /// Add instrumentations to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more instrumentations to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the instrumentations will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddInstrumentationsToAssetWithHttpInfo (InstrumentationIDs body, long? assetId);
        /// <summary>
        /// Add nodes to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more nodes to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the nodes will be added</param>
        /// <returns></returns>
        void AddNodesToAsset (NodeIDs body, long? assetId);

        /// <summary>
        /// Add nodes to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more nodes to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the nodes will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddNodesToAssetWithHttpInfo (NodeIDs body, long? assetId);
        /// <summary>
        /// Add software to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more software to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the software will be added</param>
        /// <returns></returns>
        void AddSoftwaresToAsset (SoftwareIDs body, long? assetId);

        /// <summary>
        /// Add software to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more software to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the software will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddSoftwaresToAssetWithHttpInfo (SoftwareIDs body, long? assetId);
        /// <summary>
        /// Create a new asset
        /// </summary>
        /// <remarks>
        /// Create a new asset. An asset is an instance of a product and therefore needs to refer to one when creating it. The serialnumber of the given asset needs to be unique within the products manufacturer scope. The asset will not be created when this constraint is violated. The user gains &#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60;, &#x60;can_permit&#x60; per default on the newly created asset. To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset object that needs to be created. serial_number, product are required</param>
        /// <returns>AssetResponse</returns>
        AssetResponse CreateAsset (AssetRequest body);

        /// <summary>
        /// Create a new asset
        /// </summary>
        /// <remarks>
        /// Create a new asset. An asset is an instance of a product and therefore needs to refer to one when creating it. The serialnumber of the given asset needs to be unique within the products manufacturer scope. The asset will not be created when this constraint is violated. The user gains &#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60;, &#x60;can_permit&#x60; per default on the newly created asset. To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset object that needs to be created. serial_number, product are required</param>
        /// <returns>ApiResponse of AssetResponse</returns>
        ApiResponse<AssetResponse> CreateAssetWithHttpInfo (AssetRequest body);
        /// <summary>
        /// Create an export for a standard container
        /// </summary>
        /// <remarks>
        /// Creates a data export for asset container, currenty only the VDI 2770 standard is supported
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Container that should be created.</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>DataExportsResponse</returns>
        DataExportsResponse CreateAssetContainer (ContainerExportRequest body, long? id);

        /// <summary>
        /// Create an export for a standard container
        /// </summary>
        /// <remarks>
        /// Creates a data export for asset container, currenty only the VDI 2770 standard is supported
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Container that should be created.</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>ApiResponse of DataExportsResponse</returns>
        ApiResponse<DataExportsResponse> CreateAssetContainerWithHttpInfo (ContainerExportRequest body, long? id);
        /// <summary>
        /// Create asset value objects
        /// </summary>
        /// <remarks>
        /// Store value objects measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys will be converted to lower case strings.   * Keys must be between 1 and 128 characters long.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the value objects get transfered one at a time, if you send multiple value objects without timestamp at once, all value objects will get the same timestamp and there for only the last one will be stored)  Difference to path /assets/{asset_id}/values is that the values given here are json objects and not numeric values, the json objects can have any structure.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns></returns>
        void CreateAssetValueObjects (AssetValueObjectsRequest body, long? assetId);

        /// <summary>
        /// Create asset value objects
        /// </summary>
        /// <remarks>
        /// Store value objects measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys will be converted to lower case strings.   * Keys must be between 1 and 128 characters long.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the value objects get transfered one at a time, if you send multiple value objects without timestamp at once, all value objects will get the same timestamp and there for only the last one will be stored)  Difference to path /assets/{asset_id}/values is that the values given here are json objects and not numeric values, the json objects can have any structure.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateAssetValueObjectsWithHttpInfo (AssetValueObjectsRequest body, long? assetId);
        /// <summary>
        /// Create asset values
        /// </summary>
        /// <remarks>
        /// Store values measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys and groups can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys and groups will be converted to lower case strings.   * Keys and groups must be between 1 and 128 characters long.   * Units can be passed as id or code. See the units endpoint for all available units.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the values get transfered one at a time, if you send multiple values without timestamp at once, all values will get the same timestamp and there for only the last one will be stored)
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns></returns>
        void CreateAssetValues (AssetValuesRequest body, long? assetId);

        /// <summary>
        /// Create asset values
        /// </summary>
        /// <remarks>
        /// Store values measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys and groups can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys and groups will be converted to lower case strings.   * Keys and groups must be between 1 and 128 characters long.   * Units can be passed as id or code. See the units endpoint for all available units.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the values get transfered one at a time, if you send multiple values without timestamp at once, all values will get the same timestamp and there for only the last one will be stored)
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateAssetValuesWithHttpInfo (AssetValuesRequest body, long? assetId);
        /// <summary>
        /// Create a new event for an asset
        /// </summary>
        /// <remarks>
        /// Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="assetId">Id of the asset</param>
        /// <returns>EventResponse</returns>
        EventResponse CreateEventForAsset (EventRequestNoAssets body, long? assetId);

        /// <summary>
        /// Create a new event for an asset
        /// </summary>
        /// <remarks>
        /// Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="assetId">Id of the asset</param>
        /// <returns>ApiResponse of EventResponse</returns>
        ApiResponse<EventResponse> CreateEventForAssetWithHttpInfo (EventRequestNoAssets body, long? assetId);
        /// <summary>
        /// Delete an asset
        /// </summary>
        /// <remarks>
        /// Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to delete</param>
        /// <returns></returns>
        void DeleteAsset (long? id);

        /// <summary>
        /// Delete an asset
        /// </summary>
        /// <remarks>
        /// Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAssetWithHttpInfo (long? id);
        /// <summary>
        /// Delete an asset picture
        /// </summary>
        /// <remarks>
        /// Delete an asset picture.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns></returns>
        void DeleteAssetPicture (long? assetId, long? id);

        /// <summary>
        /// Delete an asset picture
        /// </summary>
        /// <remarks>
        /// Delete an asset picture.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAssetPictureWithHttpInfo (long? assetId, long? id);
        /// <summary>
        /// Delete specifications of an asset
        /// </summary>
        /// <remarks>
        /// The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of keys to delete from specifications</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns></returns>
        void DeleteSpecificationsOfAsset (List<string> body, long? assetId);

        /// <summary>
        /// Delete specifications of an asset
        /// </summary>
        /// <remarks>
        /// The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of keys to delete from specifications</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSpecificationsOfAssetWithHttpInfo (List<string> body, long? assetId);
        /// <summary>
        /// Download an asset picture
        /// </summary>
        /// <remarks>
        /// Download an asset picture.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns></returns>
        void DownloadAssetPicture (long? assetId, long? id);

        /// <summary>
        /// Download an asset picture
        /// </summary>
        /// <remarks>
        /// Download an asset picture.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadAssetPictureWithHttpInfo (long? assetId, long? id);
        /// <summary>
        /// Get all add_ons of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all add_ons that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="materialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="addOnType">Filter accepts addon or connectivity (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>AddOnsResponse</returns>
        AddOnsResponse GetAddOnsOfAsset (long? assetId, int? page = null, int? perPage = null, string name = null, string productCode = null, string materialNumber = null, string addOnType = null, string orderBy = null);

        /// <summary>
        /// Get all add_ons of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all add_ons that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="materialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="addOnType">Filter accepts addon or connectivity (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of AddOnsResponse</returns>
        ApiResponse<AddOnsResponse> GetAddOnsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string name = null, string productCode = null, string materialNumber = null, string addOnType = null, string orderBy = null);
        /// <summary>
        /// Get all API subscriptions of the asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all API subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>APISubscriptionResponse</returns>
        APISubscriptionResponse GetApiSubscriptionsOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null);

        /// <summary>
        /// Get all API subscriptions of the asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all API subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of APISubscriptionResponse</returns>
        ApiResponse<APISubscriptionResponse> GetApiSubscriptionsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null);
        /// <summary>
        /// Get a single asset
        /// </summary>
        /// <remarks>
        /// Get a specific asset identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>AssetResponse</returns>
        AssetResponse GetAssetById (long? id, string include = null);

        /// <summary>
        /// Get a single asset
        /// </summary>
        /// <remarks>
        /// Get a specific asset identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ApiResponse of AssetResponse</returns>
        ApiResponse<AssetResponse> GetAssetByIdWithHttpInfo (long? id, string include = null);
        /// <summary>
        /// Get all possible companies of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Companies</returns>
        Companies GetAssetCompanyOptions (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string orderBy = null);

        /// <summary>
        /// Get all possible companies of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of Companies</returns>
        ApiResponse<Companies> GetAssetCompanyOptionsWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string orderBy = null);
        /// <summary>
        /// Get the history of an asset
        /// </summary>
        /// <remarks>
        /// Returns a collection of historical values of the asset identified by the id in the URL. Specifications are not included.   With the filter parameters from and to, it is possible to receive the history of a defined time period   Define the from with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; in front of the date the previous values is part of the collection (+2018-06-21T14:45:23).   Define the to with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; at the end of the date the next values is part of the collection (2018-06-21T14:45:23+).
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="attribute">limit history to changes of a specific attribute e.g status or serial_number (optional)</param>
        /// <param name="from">Start date filter for history values. Starting with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Ending with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>AssetHistoryResponse</returns>
        AssetHistoryResponse GetAssetHistory (long? assetId, string attribute = null, DateTime? from = null, DateTime? to = null, string orderBy = null);

        /// <summary>
        /// Get the history of an asset
        /// </summary>
        /// <remarks>
        /// Returns a collection of historical values of the asset identified by the id in the URL. Specifications are not included.   With the filter parameters from and to, it is possible to receive the history of a defined time period   Define the from with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; in front of the date the previous values is part of the collection (+2018-06-21T14:45:23).   Define the to with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; at the end of the date the next values is part of the collection (2018-06-21T14:45:23+).
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="attribute">limit history to changes of a specific attribute e.g status or serial_number (optional)</param>
        /// <param name="from">Start date filter for history values. Starting with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Ending with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>ApiResponse of AssetHistoryResponse</returns>
        ApiResponse<AssetHistoryResponse> GetAssetHistoryWithHttpInfo (long? assetId, string attribute = null, DateTime? from = null, DateTime? to = null, string orderBy = null);
        /// <summary>
        /// Get the status of the specific asset
        /// </summary>
        /// <remarks>
        /// Returns the status of the asset. Needed if only permission on asset but not on tenant. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>AssetStatusResponse</returns>
        AssetStatusResponse GetAssetIdStatus (long? assetId, string include = null, string acceptLanguage = null);

        /// <summary>
        /// Get the status of the specific asset
        /// </summary>
        /// <remarks>
        /// Returns the status of the asset. Needed if only permission on asset but not on tenant. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of AssetStatusResponse</returns>
        ApiResponse<AssetStatusResponse> GetAssetIdStatusWithHttpInfo (long? assetId, string include = null, string acceptLanguage = null);
        /// <summary>
        /// Get an asset picture
        /// </summary>
        /// <remarks>
        /// Get a single picture of an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>PictureResponse</returns>
        PictureResponse GetAssetPicture (long? assetId, long? id);

        /// <summary>
        /// Get an asset picture
        /// </summary>
        /// <remarks>
        /// Get a single picture of an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>ApiResponse of PictureResponse</returns>
        ApiResponse<PictureResponse> GetAssetPictureWithHttpInfo (long? assetId, long? id);
        /// <summary>
        /// Get asset pictures
        /// </summary>
        /// <remarks>
        /// Get all pictures of an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset</param>
        /// <param name="width">filter by width (optional)</param>
        /// <param name="widthFrom">filter by width_from (optional)</param>
        /// <param name="widthTo">filter by width_to (optional)</param>
        /// <param name="height">filter by height (optional)</param>
        /// <param name="heightFrom">filter by height_from (optional)</param>
        /// <param name="heightTo">filter by height_to (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>PicturesResponse</returns>
        PicturesResponse GetAssetPictures (long? id, int? width = null, int? widthFrom = null, int? widthTo = null, int? height = null, int? heightFrom = null, int? heightTo = null, string orderBy = null);

        /// <summary>
        /// Get asset pictures
        /// </summary>
        /// <remarks>
        /// Get all pictures of an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset</param>
        /// <param name="width">filter by width (optional)</param>
        /// <param name="widthFrom">filter by width_from (optional)</param>
        /// <param name="widthTo">filter by width_to (optional)</param>
        /// <param name="height">filter by height (optional)</param>
        /// <param name="heightFrom">filter by height_from (optional)</param>
        /// <param name="heightTo">filter by height_to (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of PicturesResponse</returns>
        ApiResponse<PicturesResponse> GetAssetPicturesWithHttpInfo (long? id, int? width = null, int? widthFrom = null, int? widthTo = null, int? height = null, int? heightFrom = null, int? heightTo = null, string orderBy = null);
        /// <summary>
        /// Get all possible products of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible products for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Products</returns>
        Products GetAssetProductOptions (long? assetId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string orderBy = null);

        /// <summary>
        /// Get all possible products of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible products for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of Products</returns>
        ApiResponse<Products> GetAssetProductOptionsWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string orderBy = null);
        /// <summary>
        /// Get all possible statuses of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible asset statuses for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>AssetStatuses</returns>
        AssetStatuses GetAssetStatusesOptions (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string code = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get all possible statuses of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible asset statuses for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of AssetStatuses</returns>
        ApiResponse<AssetStatuses> GetAssetStatusesOptionsWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string code = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Get all possible tenants of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible tenants for the specified asset. That is all public tenants and the assets tenant. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Tenants</returns>
        Tenants GetAssetTenantOptions (long? assetId, int? page = null, int? perPage = null, string name = null, string orderBy = null);

        /// <summary>
        /// Get all possible tenants of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible tenants for the specified asset. That is all public tenants and the assets tenant. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of Tenants</returns>
        ApiResponse<Tenants> GetAssetTenantOptionsWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string name = null, string orderBy = null);
        /// <summary>
        /// Get asset value objects for a specific key.
        /// </summary>
        /// <remarks>
        /// Returns a collection of the history value objects of the value objects for the specified key. For a selected result of the value objects the filter parameters selector and interval are mandatory. With the filter parameters from, to or datetime, it is possible to receive the history of a defined time period.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="datetime">exact date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="selector">Supported selector methods are &#x60;first, last&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the selector. The value is mandatory if selector is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>AssetKeyValueObjectsResponse</returns>
        AssetKeyValueObjectsResponse GetAssetValueObjectsForKey (long? assetId, string key, int? page = null, int? perPage = null, string include = null, DateTime? from = null, DateTime? to = null, DateTime? datetime = null, string selector = null, string interval = null, string orderBy = null);

        /// <summary>
        /// Get asset value objects for a specific key.
        /// </summary>
        /// <remarks>
        /// Returns a collection of the history value objects of the value objects for the specified key. For a selected result of the value objects the filter parameters selector and interval are mandatory. With the filter parameters from, to or datetime, it is possible to receive the history of a defined time period.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="datetime">exact date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="selector">Supported selector methods are &#x60;first, last&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the selector. The value is mandatory if selector is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>ApiResponse of AssetKeyValueObjectsResponse</returns>
        ApiResponse<AssetKeyValueObjectsResponse> GetAssetValueObjectsForKeyWithHttpInfo (long? assetId, string key, int? page = null, int? perPage = null, string include = null, DateTime? from = null, DateTime? to = null, DateTime? datetime = null, string selector = null, string interval = null, string orderBy = null);
        /// <summary>
        /// Get latest values for the asset.
        /// </summary>
        /// <remarks>
        /// Returns a collection of the latest value for every key of the asset. Possible include values: &#x60;&#x60;&#x60;unit, unit.base_unit&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter key_unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="key">only the values of the specified keys will be returned. If no key is specified all keys of the asset with its latest values will be received. Multiple values can be specified in a comma seperated list. (optional)</param>
        /// <param name="keyUnitId">value of the provided key will be returned in the specified unit. If no key_unit is defined the last written unit will be returned. Accepted format is &#x60;key[unit_id]&#x60;. Multiple values can be provided in a comma seperated list. (optional)</param>
        /// <param name="group">Group of the asset value. (optional)</param>
        /// <returns>AssetValuesResponse</returns>
        AssetValuesResponse GetAssetValues (long? assetId, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, string key = null, string keyUnitId = null, string group = null);

        /// <summary>
        /// Get latest values for the asset.
        /// </summary>
        /// <remarks>
        /// Returns a collection of the latest value for every key of the asset. Possible include values: &#x60;&#x60;&#x60;unit, unit.base_unit&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter key_unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="key">only the values of the specified keys will be returned. If no key is specified all keys of the asset with its latest values will be received. Multiple values can be specified in a comma seperated list. (optional)</param>
        /// <param name="keyUnitId">value of the provided key will be returned in the specified unit. If no key_unit is defined the last written unit will be returned. Accepted format is &#x60;key[unit_id]&#x60;. Multiple values can be provided in a comma seperated list. (optional)</param>
        /// <param name="group">Group of the asset value. (optional)</param>
        /// <returns>ApiResponse of AssetValuesResponse</returns>
        ApiResponse<AssetValuesResponse> GetAssetValuesWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, string key = null, string keyUnitId = null, string group = null);
        /// <summary>
        /// Get asset values for a specific key.
        /// </summary>
        /// <remarks>
        /// Returns a collection of the history values of an values for the specified key. For a aggregated result of the values the filter parameters aggregation and interval are mandatory. Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section. With the filter parameters from to it is possible to receive the history of a defined time period. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page, default value is 500, maximum is 1000 (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="unitId">Id of the unit in which the values are to be returned. (optional)</param>
        /// <param name="aggregation">Supported aggregation methods are &#x60;mean, min, max, sum, stddev&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the aggregation. The value is mandatory if aggregation is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>AssetKeyValuesResponse</returns>
        AssetKeyValuesResponse GetAssetValuesForKey (long? assetId, string key, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, DateTime? from = null, DateTime? to = null, int? unitId = null, string aggregation = null, string interval = null, string orderBy = null);

        /// <summary>
        /// Get asset values for a specific key.
        /// </summary>
        /// <remarks>
        /// Returns a collection of the history values of an values for the specified key. For a aggregated result of the values the filter parameters aggregation and interval are mandatory. Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section. With the filter parameters from to it is possible to receive the history of a defined time period. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page, default value is 500, maximum is 1000 (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="unitId">Id of the unit in which the values are to be returned. (optional)</param>
        /// <param name="aggregation">Supported aggregation methods are &#x60;mean, min, max, sum, stddev&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the aggregation. The value is mandatory if aggregation is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>ApiResponse of AssetKeyValuesResponse</returns>
        ApiResponse<AssetKeyValuesResponse> GetAssetValuesForKeyWithHttpInfo (long? assetId, string key, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, DateTime? from = null, DateTime? to = null, int? unitId = null, string aggregation = null, string interval = null, string orderBy = null);
        /// <summary>
        /// Get a range of assets
        /// </summary>
        /// <remarks>
        /// Returns a list of assets in your accessible scope. You can apply the query parameters listed below to get a filtered list. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.status, instrumentations.type, instrumentations.worst_asset_status,  instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productCategoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="lastSeenAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="lastSeenAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="productionDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all assets with no nodes assigned or \&quot;!null\&quot; for any assigned node.  By adding &#x60;+&#x60; after the id, the filter considers the given node and all its sub components (nodes, instrumentations and systems), but this is not usable in combination with a comma list. (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no instrumentations assigned or \&quot;!null\&quot; for any assigned instrumentation (optional)</param>
        /// <param name="systemId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no systems assigned or \&quot;!null\&quot; for any assigned system (optional)</param>
        /// <param name="createdAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="createdAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="createdAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="updatedAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="ownershipClaimed">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>AssetsResponse</returns>
        AssetsResponse GetAssets (int? page = null, int? perPage = null, string include = null, string serialNumber = null, string productId = null, string productStatusId = null, string productCategoryId = null, string parentId = null, string manufacturerId = null, string statusId = null, string statusCode = null, string tenantId = null, string lastSeenAtFrom = null, string lastSeenAtTo = null, DateTime? productionDate = null, DateTime? productionDateFrom = null, DateTime? productionDateTo = null, string specificationsKey = null, string specificationsValue = null, string nodeId = null, string instrumentationId = null, string systemId = null, DateTime? createdAt = null, string createdAtFrom = null, string createdAtTo = null, DateTime? updatedAt = null, string updatedAtFrom = null, string updatedAtTo = null, bool? ownershipClaimed = null, string permission = null, string orderBy = null);

        /// <summary>
        /// Get a range of assets
        /// </summary>
        /// <remarks>
        /// Returns a list of assets in your accessible scope. You can apply the query parameters listed below to get a filtered list. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.status, instrumentations.type, instrumentations.worst_asset_status,  instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productCategoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="lastSeenAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="lastSeenAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="productionDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all assets with no nodes assigned or \&quot;!null\&quot; for any assigned node.  By adding &#x60;+&#x60; after the id, the filter considers the given node and all its sub components (nodes, instrumentations and systems), but this is not usable in combination with a comma list. (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no instrumentations assigned or \&quot;!null\&quot; for any assigned instrumentation (optional)</param>
        /// <param name="systemId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no systems assigned or \&quot;!null\&quot; for any assigned system (optional)</param>
        /// <param name="createdAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="createdAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="createdAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="updatedAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="ownershipClaimed">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of AssetsResponse</returns>
        ApiResponse<AssetsResponse> GetAssetsWithHttpInfo (int? page = null, int? perPage = null, string include = null, string serialNumber = null, string productId = null, string productStatusId = null, string productCategoryId = null, string parentId = null, string manufacturerId = null, string statusId = null, string statusCode = null, string tenantId = null, string lastSeenAtFrom = null, string lastSeenAtTo = null, DateTime? productionDate = null, DateTime? productionDateFrom = null, DateTime? productionDateTo = null, string specificationsKey = null, string specificationsValue = null, string nodeId = null, string instrumentationId = null, string systemId = null, DateTime? createdAt = null, string createdAtFrom = null, string createdAtTo = null, DateTime? updatedAt = null, string updatedAtFrom = null, string updatedAtTo = null, bool? ownershipClaimed = null, string permission = null, string orderBy = null);
        /// <summary>
        /// Get all deliveries of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="dateOfShipment">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="senderId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="receiverId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="customerNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>DeliveriesResponse</returns>
        DeliveriesResponse GetDeliveriesOfAsset (long? assetId, int? page = null, int? perPage = null, string number = null, string name = null, string statusId = null, DateTime? dateOfShipment = null, DateTime? dateOfShipmentFrom = null, DateTime? dateOfShipmentTo = null, string senderId = null, string receiverId = null, string customerNumber = null, string orderBy = null);

        /// <summary>
        /// Get all deliveries of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="dateOfShipment">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="senderId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="receiverId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="customerNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of DeliveriesResponse</returns>
        ApiResponse<DeliveriesResponse> GetDeliveriesOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string number = null, string name = null, string statusId = null, DateTime? dateOfShipment = null, DateTime? dateOfShipmentFrom = null, DateTime? dateOfShipmentTo = null, string senderId = null, string receiverId = null, string customerNumber = null, string orderBy = null);
        /// <summary>
        /// Get all documents of an asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all documents that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments, categories.standards, eventdocuments&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="documentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="classificationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validAt">Expected date format is YYYY-MM-DD or YYYY-MM or YYYY (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>DocumentsResponse</returns>
        DocumentsResponse GetDocumentsOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string documentVersion = null, string number = null, string statusId = null, string classificationId = null, string tenantId = null, string categoryId = null, DateTime? validFrom = null, DateTime? validUntil = null, DateTime? validAt = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get all documents of an asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all documents that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments, categories.standards, eventdocuments&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="documentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="classificationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validAt">Expected date format is YYYY-MM-DD or YYYY-MM or YYYY (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of DocumentsResponse</returns>
        ApiResponse<DocumentsResponse> GetDocumentsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string documentVersion = null, string number = null, string statusId = null, string classificationId = null, string tenantId = null, string categoryId = null, DateTime? validFrom = null, DateTime? validUntil = null, DateTime? validAt = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Get all events of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all events belonging to an asset in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;start_datetime&#x60;, &#x60;end_datetime&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>EventsResponse</returns>
        EventsResponse GetEventsOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string statusId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string tenantId = null, string orderBy = null);

        /// <summary>
        /// Get all events of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all events belonging to an asset in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;start_datetime&#x60;, &#x60;end_datetime&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of EventsResponse</returns>
        ApiResponse<EventsResponse> GetEventsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string statusId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string tenantId = null, string orderBy = null);
        /// <summary>
        /// Get all instrumentations of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="tag">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="criticality">Filter accepts undefined, low, medium or high (optional)</param>
        /// <param name="accessibility">Filter accepts undefined, easy, moderate or difficult (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;tag&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>InstrumentationsResponse</returns>
        InstrumentationsResponse GetInstrumentationsOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, string tag = null, string statusId = null, string typeId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string criticality = null, string accessibility = null, string nodeId = null, string permission = null, string orderBy = null);

        /// <summary>
        /// Get all instrumentations of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="tag">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="criticality">Filter accepts undefined, low, medium or high (optional)</param>
        /// <param name="accessibility">Filter accepts undefined, easy, moderate or difficult (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;tag&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of InstrumentationsResponse</returns>
        ApiResponse<InstrumentationsResponse> GetInstrumentationsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string tag = null, string statusId = null, string typeId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string criticality = null, string accessibility = null, string nodeId = null, string permission = null, string orderBy = null);
        /// <summary>
        /// Get all instrumentations an asset was assigned to
        /// </summary>
        /// <remarks>
        /// Returns a list of all instrumentations history available in your scope which have been assigned to the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="_event">Filter accepts &#x60;create&#x60; or &#x60;destroy&#x60; (optional)</param>
        /// <param name="eventDatetimeFrom">Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="eventDatetimeTo">Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;event&#x60; or &#x60;event_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>AssetInstrumentationsHistoryResponse</returns>
        AssetInstrumentationsHistoryResponse GetInstrumentationsOfAssetHistory (long? assetId, int? page = null, int? perPage = null, string instrumentationId = null, string _event = null, DateTime? eventDatetimeFrom = null, DateTime? eventDatetimeTo = null, string orderBy = null);

        /// <summary>
        /// Get all instrumentations an asset was assigned to
        /// </summary>
        /// <remarks>
        /// Returns a list of all instrumentations history available in your scope which have been assigned to the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="_event">Filter accepts &#x60;create&#x60; or &#x60;destroy&#x60; (optional)</param>
        /// <param name="eventDatetimeFrom">Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="eventDatetimeTo">Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;event&#x60; or &#x60;event_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>ApiResponse of AssetInstrumentationsHistoryResponse</returns>
        ApiResponse<AssetInstrumentationsHistoryResponse> GetInstrumentationsOfAssetHistoryWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string instrumentationId = null, string _event = null, DateTime? eventDatetimeFrom = null, DateTime? eventDatetimeTo = null, string orderBy = null);
        /// <summary>
        /// Get all nodes of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="hidden">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>NodesResponse</returns>
        NodesResponse GetNodesOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, bool? hidden = null, string permission = null, string orderBy = null);

        /// <summary>
        /// Get all nodes of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="hidden">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of NodesResponse</returns>
        ApiResponse<NodesResponse> GetNodesOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, bool? hidden = null, string permission = null, string orderBy = null);
        /// <summary>
        /// Get a range of software of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of software. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;software_attachments&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="softwareTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;version_number&#x60;, &#x60;name&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>SoftwaresResponse</returns>
        SoftwaresResponse GetSoftwaresOfSoftware (long? assetId, int? page = null, int? perPage = null, string include = null, string softwareTypeId = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get a range of software of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of software. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;software_attachments&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="softwareTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;version_number&#x60;, &#x60;name&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of SoftwaresResponse</returns>
        ApiResponse<SoftwaresResponse> GetSoftwaresOfSoftwareWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string softwareTypeId = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Get the history of one specification attribute of an asset.
        /// </summary>
        /// <remarks>
        /// This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">the exact key</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="sourceTimestampFrom">source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="sourceTimestampTo">source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtFrom">updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>SpecificationHistoryResponse</returns>
        SpecificationHistoryResponse GetSpecificationHistoryOfAsset (long? assetId, string key, int? page = null, int? perPage = null, DateTime? sourceTimestampFrom = null, DateTime? sourceTimestampTo = null, DateTime? updatedAtFrom = null, DateTime? updatedAtTo = null, string orderBy = null);

        /// <summary>
        /// Get the history of one specification attribute of an asset.
        /// </summary>
        /// <remarks>
        /// This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">the exact key</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="sourceTimestampFrom">source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="sourceTimestampTo">source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtFrom">updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>ApiResponse of SpecificationHistoryResponse</returns>
        ApiResponse<SpecificationHistoryResponse> GetSpecificationHistoryOfAssetWithHttpInfo (long? assetId, string key, int? page = null, int? perPage = null, DateTime? sourceTimestampFrom = null, DateTime? sourceTimestampTo = null, DateTime? updatedAtFrom = null, DateTime? updatedAtTo = null, string orderBy = null);
        /// <summary>
        /// Get existing asset specification keys
        /// </summary>
        /// <remarks>
        /// Returns the existing specification keys in all readable assets.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>SpecificationKeys</returns>
        SpecificationKeys GetSpecificationKeysOfAssets (string key = null, bool? uiVisible = null);

        /// <summary>
        /// Get existing asset specification keys
        /// </summary>
        /// <remarks>
        /// Returns the existing specification keys in all readable assets.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>ApiResponse of SpecificationKeys</returns>
        ApiResponse<SpecificationKeys> GetSpecificationKeysOfAssetsWithHttpInfo (string key = null, bool? uiVisible = null);
        /// <summary>
        /// Get specifications of an asset
        /// </summary>
        /// <remarks>
        /// Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>SpecificationsUIVisibleResponse</returns>
        SpecificationsUIVisibleResponse GetSpecificationsOfAsset (long? assetId, string key = null, bool? uiVisible = null);

        /// <summary>
        /// Get specifications of an asset
        /// </summary>
        /// <remarks>
        /// Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>ApiResponse of SpecificationsUIVisibleResponse</returns>
        ApiResponse<SpecificationsUIVisibleResponse> GetSpecificationsOfAssetWithHttpInfo (long? assetId, string key = null, bool? uiVisible = null);
        /// <summary>
        /// Get all subscriptions of asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>SubscriptionsResponse</returns>
        SubscriptionsResponse GetSubscriptionsOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null);

        /// <summary>
        /// Get all subscriptions of asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of SubscriptionsResponse</returns>
        ApiResponse<SubscriptionsResponse> GetSubscriptionsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null);
        /// <summary>
        /// Get all systems of one Asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all systems that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;pictures, specifications, specifications[key1,key2], tenant, parent, status, type, type.tenant, type.parent &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>SystemsResponse</returns>
        SystemsResponse GetSystemsOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, string permission = null, string orderBy = null);

        /// <summary>
        /// Get all systems of one Asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all systems that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;pictures, specifications, specifications[key1,key2], tenant, parent, status, type, type.tenant, type.parent &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of SystemsResponse</returns>
        ApiResponse<SystemsResponse> GetSystemsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, string permission = null, string orderBy = null);
        /// <summary>
        /// Remove add_ons from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more add_ons from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the add_ons will be removed</param>
        /// <returns></returns>
        void RemoveAddOnsFromAsset (AddOnIDs body, long? assetId);

        /// <summary>
        /// Remove add_ons from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more add_ons from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the add_ons will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAddOnsFromAssetWithHttpInfo (AddOnIDs body, long? assetId);
        /// <summary>
        /// Remove deliveries from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more deliveries from an asset in your accessible scope.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the deliveries will be removed</param>
        /// <returns></returns>
        void RemoveDeliveriesFromAsset (DeliveryIDs body, long? assetId);

        /// <summary>
        /// Remove deliveries from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more deliveries from an asset in your accessible scope.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the deliveries will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveDeliveriesFromAssetWithHttpInfo (DeliveryIDs body, long? assetId);
        /// <summary>
        /// Remove documents from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more documents from an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the documents will be removed</param>
        /// <returns></returns>
        void RemoveDocumentsFromAsset (DocumentIDs body, long? assetId);

        /// <summary>
        /// Remove documents from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more documents from an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the documents will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveDocumentsFromAssetWithHttpInfo (DocumentIDs body, long? assetId);
        /// <summary>
        /// Remove events from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more events from an asset in your accessible scope. If the event has no more related assets, the event will be deleted
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the events will removed.</param>
        /// <returns></returns>
        void RemoveEventFromAsset (Events body, long? assetId);

        /// <summary>
        /// Remove events from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more events from an asset in your accessible scope. If the event has no more related assets, the event will be deleted
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the events will removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveEventFromAssetWithHttpInfo (Events body, long? assetId);
        /// <summary>
        /// Remove instrumentations from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more instrumentations from an asset in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the instrumentations will be removed</param>
        /// <returns></returns>
        void RemoveInstrumentationsOfAsset (InstrumentationIDs body, long? assetId);

        /// <summary>
        /// Remove instrumentations from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more instrumentations from an asset in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the instrumentations will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveInstrumentationsOfAssetWithHttpInfo (InstrumentationIDs body, long? assetId);
        /// <summary>
        /// Remove nodes from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more nodes from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the nodes will be removed</param>
        /// <returns></returns>
        void RemoveNodesFromAsset (NodeIDs body, long? assetId);

        /// <summary>
        /// Remove nodes from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more nodes from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the nodes will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveNodesFromAssetWithHttpInfo (NodeIDs body, long? assetId);
        /// <summary>
        /// Remove software from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more software from an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the product from which the software will be removed</param>
        /// <returns></returns>
        void RemoveSoftwaresOfAsset (SoftwareIDs body, long? assetId);

        /// <summary>
        /// Remove software from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more software from an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the product from which the software will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveSoftwaresOfAssetWithHttpInfo (SoftwareIDs body, long? assetId);
        /// <summary>
        /// Rename a specification key
        /// </summary>
        /// <remarks>
        /// Rename one specification key of an asset in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted to lower-case.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications object to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns></returns>
        void RenameSpecificationsOfAsset (SpecificationsRename body, long? assetId);

        /// <summary>
        /// Rename a specification key
        /// </summary>
        /// <remarks>
        /// Rename one specification key of an asset in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted to lower-case.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications object to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RenameSpecificationsOfAssetWithHttpInfo (SpecificationsRename body, long? assetId);
        /// <summary>
        /// Replace the add_ons of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all add_ons belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the add_ons will be replaced</param>
        /// <returns></returns>
        void ReplaceAddOnsOfAsset (AddOnIDs body, long? assetId);

        /// <summary>
        /// Replace the add_ons of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all add_ons belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the add_ons will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceAddOnsOfAssetWithHttpInfo (AddOnIDs body, long? assetId);
        /// <summary>
        /// Replace the deliveries of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all deliveries belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the deliveries will be replaced</param>
        /// <returns></returns>
        void ReplaceDeliveriesOfAsset (DeliveryIDs body, long? assetId);

        /// <summary>
        /// Replace the deliveries of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all deliveries belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the deliveries will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceDeliveriesOfAssetWithHttpInfo (DeliveryIDs body, long? assetId);
        /// <summary>
        /// Replace the documents of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all documents belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the documents will be replaced</param>
        /// <returns></returns>
        void ReplaceDocumentsOfAsset (DocumentIDs body, long? assetId);

        /// <summary>
        /// Replace the documents of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all documents belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the documents will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceDocumentsOfAssetWithHttpInfo (DocumentIDs body, long? assetId);
        /// <summary>
        /// Replace the instrumentations of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all instrumentations belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the instrumentations will be replaced</param>
        /// <returns></returns>
        void ReplaceInstrumentationsOfAsset (InstrumentationIDs body, long? assetId);

        /// <summary>
        /// Replace the instrumentations of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all instrumentations belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the instrumentations will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceInstrumentationsOfAssetWithHttpInfo (InstrumentationIDs body, long? assetId);
        /// <summary>
        /// Replace the nodes of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all nodes belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the nodes will be replaced</param>
        /// <returns></returns>
        void ReplaceNodesOfAsset (NodeIDs body, long? assetId);

        /// <summary>
        /// Replace the nodes of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all nodes belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the nodes will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceNodesOfAssetWithHttpInfo (NodeIDs body, long? assetId);
        /// <summary>
        /// Replace the software of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all software belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the software will be replaced</param>
        /// <returns></returns>
        void ReplaceSoftwaresOfAsset (SoftwareIDs body, long? assetId);

        /// <summary>
        /// Replace the software of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all software belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the software will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceSoftwaresOfAssetWithHttpInfo (SoftwareIDs body, long? assetId);
        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource in your accessible scope.  To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent and on the current asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated. To remove an associative object use &quot;object_name&quot;: null</param>
        /// <param name="id">Id of the asset to update</param>
        /// <returns></returns>
        void UpdateAsset (AssetRequest body, long? id);

        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource in your accessible scope.  To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent and on the current asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated. To remove an associative object use &quot;object_name&quot;: null</param>
        /// <param name="id">Id of the asset to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAssetWithHttpInfo (AssetRequest body, long? id);
        /// <summary>
        /// Update an asset picture
        /// </summary>
        /// <remarks>
        /// Upload a new asset picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>PictureResponse</returns>
        PictureResponse UpdateAssetPicture (byte[] image, long? assetId, long? id);

        /// <summary>
        /// Update an asset picture
        /// </summary>
        /// <remarks>
        /// Upload a new asset picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>ApiResponse of PictureResponse</returns>
        ApiResponse<PictureResponse> UpdateAssetPictureWithHttpInfo (byte[] image, long? assetId, long? id);
        /// <summary>
        /// Update an asset picture link
        /// </summary>
        /// <remarks>
        /// Update an asset picture link.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be updated</param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>PictureResponse</returns>
        PictureResponse UpdateAssetPictureLink (PictureLinkRequest body, long? assetId, long? id);

        /// <summary>
        /// Update an asset picture link
        /// </summary>
        /// <remarks>
        /// Update an asset picture link.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be updated</param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>ApiResponse of PictureResponse</returns>
        ApiResponse<PictureResponse> UpdateAssetPictureLinkWithHttpInfo (PictureLinkRequest body, long? assetId, long? id);
        /// <summary>
        /// Update specifications of an asset
        /// </summary>
        /// <remarks>
        /// Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.  It is possible to save complex objects in the value as vector. In this case the unit must be &#x27;vector&#x27; and the value a valid object in the following format: &#x60;&#x60;&#x60;       [           {             \&quot;key\&quot;: {              \&quot;value\&quot;: \&quot;string\&quot;,              \&quot;unit\&quot;: \&quot;string\&quot;            }           },           {             \&quot;second_key\&quot;: {               \&quot;value\&quot;: \&quot;string\&quot;             }           }        ]   &#x60;&#x60;&#x60;  - key can only consist of [a-z A-Z 0-9 . - _ ]. - value is mandatory, max length 6000 chars - unit is optional, max length 50 chars - its impossible to filter for vector values
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications objects to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns></returns>
        void UpdateSpecificationsOfAsset (Dictionary<string, SpecificationUIVisibleRequest> body, long? assetId);

        /// <summary>
        /// Update specifications of an asset
        /// </summary>
        /// <remarks>
        /// Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.  It is possible to save complex objects in the value as vector. In this case the unit must be &#x27;vector&#x27; and the value a valid object in the following format: &#x60;&#x60;&#x60;       [           {             \&quot;key\&quot;: {              \&quot;value\&quot;: \&quot;string\&quot;,              \&quot;unit\&quot;: \&quot;string\&quot;            }           },           {             \&quot;second_key\&quot;: {               \&quot;value\&quot;: \&quot;string\&quot;             }           }        ]   &#x60;&#x60;&#x60;  - key can only consist of [a-z A-Z 0-9 . - _ ]. - value is mandatory, max length 6000 chars - unit is optional, max length 50 chars - its impossible to filter for vector values
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications objects to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSpecificationsOfAssetWithHttpInfo (Dictionary<string, SpecificationUIVisibleRequest> body, long? assetId);
        /// <summary>
        /// Upload an asset picture
        /// </summary>
        /// <remarks>
        /// Upload a new asset picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="id">Id of the asset</param>
        /// <returns>PictureResponse</returns>
        PictureResponse UploadAssetPicture (byte[] image, long? id);

        /// <summary>
        /// Upload an asset picture
        /// </summary>
        /// <remarks>
        /// Upload a new asset picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="id">Id of the asset</param>
        /// <returns>ApiResponse of PictureResponse</returns>
        ApiResponse<PictureResponse> UploadAssetPictureWithHttpInfo (byte[] image, long? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add add_ons to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more add_ons to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the add_ons will be added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddAddOnsToAssetAsync (AddOnIDs body, long? assetId);

        /// <summary>
        /// Add add_ons to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more add_ons to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the add_ons will be added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddAddOnsToAssetAsyncWithHttpInfo (AddOnIDs body, long? assetId);
        /// <summary>
        /// Add a link as asset picture
        /// </summary>
        /// <remarks>
        /// Add an external resource as asset picture.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be created</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>Task of PictureResponse</returns>
        System.Threading.Tasks.Task<PictureResponse> AddAssetPictureLinkAsync (PictureLinkRequest body, long? id);

        /// <summary>
        /// Add a link as asset picture
        /// </summary>
        /// <remarks>
        /// Add an external resource as asset picture.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be created</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>Task of ApiResponse (PictureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PictureResponse>> AddAssetPictureLinkAsyncWithHttpInfo (PictureLinkRequest body, long? id);
        /// <summary>
        /// Add deliveries to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more deliveries to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the deliveries will be added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddDeliveriesToAssetAsync (DeliveryIDs body, long? assetId);

        /// <summary>
        /// Add deliveries to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more deliveries to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the deliveries will be added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddDeliveriesToAssetAsyncWithHttpInfo (DeliveryIDs body, long? assetId);
        /// <summary>
        /// Add documents to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more documents to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the documents will be added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddDocumentsToAssetAsync (DocumentIDs body, long? assetId);

        /// <summary>
        /// Add documents to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more documents to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the documents will be added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddDocumentsToAssetAsyncWithHttpInfo (DocumentIDs body, long? assetId);
        /// <summary>
        /// Add instrumentations to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more instrumentations to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the instrumentations will be added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddInstrumentationsToAssetAsync (InstrumentationIDs body, long? assetId);

        /// <summary>
        /// Add instrumentations to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more instrumentations to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the instrumentations will be added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddInstrumentationsToAssetAsyncWithHttpInfo (InstrumentationIDs body, long? assetId);
        /// <summary>
        /// Add nodes to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more nodes to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the nodes will be added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddNodesToAssetAsync (NodeIDs body, long? assetId);

        /// <summary>
        /// Add nodes to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more nodes to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the nodes will be added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddNodesToAssetAsyncWithHttpInfo (NodeIDs body, long? assetId);
        /// <summary>
        /// Add software to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more software to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the software will be added</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddSoftwaresToAssetAsync (SoftwareIDs body, long? assetId);

        /// <summary>
        /// Add software to an asset
        /// </summary>
        /// <remarks>
        /// Add one or more software to an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the software will be added</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddSoftwaresToAssetAsyncWithHttpInfo (SoftwareIDs body, long? assetId);
        /// <summary>
        /// Create a new asset
        /// </summary>
        /// <remarks>
        /// Create a new asset. An asset is an instance of a product and therefore needs to refer to one when creating it. The serialnumber of the given asset needs to be unique within the products manufacturer scope. The asset will not be created when this constraint is violated. The user gains &#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60;, &#x60;can_permit&#x60; per default on the newly created asset. To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset object that needs to be created. serial_number, product are required</param>
        /// <returns>Task of AssetResponse</returns>
        System.Threading.Tasks.Task<AssetResponse> CreateAssetAsync (AssetRequest body);

        /// <summary>
        /// Create a new asset
        /// </summary>
        /// <remarks>
        /// Create a new asset. An asset is an instance of a product and therefore needs to refer to one when creating it. The serialnumber of the given asset needs to be unique within the products manufacturer scope. The asset will not be created when this constraint is violated. The user gains &#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60;, &#x60;can_permit&#x60; per default on the newly created asset. To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset object that needs to be created. serial_number, product are required</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetResponse>> CreateAssetAsyncWithHttpInfo (AssetRequest body);
        /// <summary>
        /// Create an export for a standard container
        /// </summary>
        /// <remarks>
        /// Creates a data export for asset container, currenty only the VDI 2770 standard is supported
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Container that should be created.</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>Task of DataExportsResponse</returns>
        System.Threading.Tasks.Task<DataExportsResponse> CreateAssetContainerAsync (ContainerExportRequest body, long? id);

        /// <summary>
        /// Create an export for a standard container
        /// </summary>
        /// <remarks>
        /// Creates a data export for asset container, currenty only the VDI 2770 standard is supported
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Container that should be created.</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>Task of ApiResponse (DataExportsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataExportsResponse>> CreateAssetContainerAsyncWithHttpInfo (ContainerExportRequest body, long? id);
        /// <summary>
        /// Create asset value objects
        /// </summary>
        /// <remarks>
        /// Store value objects measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys will be converted to lower case strings.   * Keys must be between 1 and 128 characters long.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the value objects get transfered one at a time, if you send multiple value objects without timestamp at once, all value objects will get the same timestamp and there for only the last one will be stored)  Difference to path /assets/{asset_id}/values is that the values given here are json objects and not numeric values, the json objects can have any structure.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateAssetValueObjectsAsync (AssetValueObjectsRequest body, long? assetId);

        /// <summary>
        /// Create asset value objects
        /// </summary>
        /// <remarks>
        /// Store value objects measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys will be converted to lower case strings.   * Keys must be between 1 and 128 characters long.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the value objects get transfered one at a time, if you send multiple value objects without timestamp at once, all value objects will get the same timestamp and there for only the last one will be stored)  Difference to path /assets/{asset_id}/values is that the values given here are json objects and not numeric values, the json objects can have any structure.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAssetValueObjectsAsyncWithHttpInfo (AssetValueObjectsRequest body, long? assetId);
        /// <summary>
        /// Create asset values
        /// </summary>
        /// <remarks>
        /// Store values measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys and groups can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys and groups will be converted to lower case strings.   * Keys and groups must be between 1 and 128 characters long.   * Units can be passed as id or code. See the units endpoint for all available units.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the values get transfered one at a time, if you send multiple values without timestamp at once, all values will get the same timestamp and there for only the last one will be stored)
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateAssetValuesAsync (AssetValuesRequest body, long? assetId);

        /// <summary>
        /// Create asset values
        /// </summary>
        /// <remarks>
        /// Store values measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys and groups can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys and groups will be converted to lower case strings.   * Keys and groups must be between 1 and 128 characters long.   * Units can be passed as id or code. See the units endpoint for all available units.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the values get transfered one at a time, if you send multiple values without timestamp at once, all values will get the same timestamp and there for only the last one will be stored)
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAssetValuesAsyncWithHttpInfo (AssetValuesRequest body, long? assetId);
        /// <summary>
        /// Create a new event for an asset
        /// </summary>
        /// <remarks>
        /// Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="assetId">Id of the asset</param>
        /// <returns>Task of EventResponse</returns>
        System.Threading.Tasks.Task<EventResponse> CreateEventForAssetAsync (EventRequestNoAssets body, long? assetId);

        /// <summary>
        /// Create a new event for an asset
        /// </summary>
        /// <remarks>
        /// Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="assetId">Id of the asset</param>
        /// <returns>Task of ApiResponse (EventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventResponse>> CreateEventForAssetAsyncWithHttpInfo (EventRequestNoAssets body, long? assetId);
        /// <summary>
        /// Delete an asset
        /// </summary>
        /// <remarks>
        /// Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAssetAsync (long? id);

        /// <summary>
        /// Delete an asset
        /// </summary>
        /// <remarks>
        /// Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Delete an asset picture
        /// </summary>
        /// <remarks>
        /// Delete an asset picture.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAssetPictureAsync (long? assetId, long? id);

        /// <summary>
        /// Delete an asset picture
        /// </summary>
        /// <remarks>
        /// Delete an asset picture.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetPictureAsyncWithHttpInfo (long? assetId, long? id);
        /// <summary>
        /// Delete specifications of an asset
        /// </summary>
        /// <remarks>
        /// The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of keys to delete from specifications</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSpecificationsOfAssetAsync (List<string> body, long? assetId);

        /// <summary>
        /// Delete specifications of an asset
        /// </summary>
        /// <remarks>
        /// The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of keys to delete from specifications</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSpecificationsOfAssetAsyncWithHttpInfo (List<string> body, long? assetId);
        /// <summary>
        /// Download an asset picture
        /// </summary>
        /// <remarks>
        /// Download an asset picture.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadAssetPictureAsync (long? assetId, long? id);

        /// <summary>
        /// Download an asset picture
        /// </summary>
        /// <remarks>
        /// Download an asset picture.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadAssetPictureAsyncWithHttpInfo (long? assetId, long? id);
        /// <summary>
        /// Get all add_ons of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all add_ons that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="materialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="addOnType">Filter accepts addon or connectivity (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of AddOnsResponse</returns>
        System.Threading.Tasks.Task<AddOnsResponse> GetAddOnsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string name = null, string productCode = null, string materialNumber = null, string addOnType = null, string orderBy = null);

        /// <summary>
        /// Get all add_ons of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all add_ons that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="materialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="addOnType">Filter accepts addon or connectivity (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddOnsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddOnsResponse>> GetAddOnsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string name = null, string productCode = null, string materialNumber = null, string addOnType = null, string orderBy = null);
        /// <summary>
        /// Get all API subscriptions of the asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all API subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of APISubscriptionResponse</returns>
        System.Threading.Tasks.Task<APISubscriptionResponse> GetApiSubscriptionsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null);

        /// <summary>
        /// Get all API subscriptions of the asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all API subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (APISubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APISubscriptionResponse>> GetApiSubscriptionsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null);
        /// <summary>
        /// Get a single asset
        /// </summary>
        /// <remarks>
        /// Get a specific asset identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of AssetResponse</returns>
        System.Threading.Tasks.Task<AssetResponse> GetAssetByIdAsync (long? id, string include = null);

        /// <summary>
        /// Get a single asset
        /// </summary>
        /// <remarks>
        /// Get a specific asset identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetResponse>> GetAssetByIdAsyncWithHttpInfo (long? id, string include = null);
        /// <summary>
        /// Get all possible companies of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of Companies</returns>
        System.Threading.Tasks.Task<Companies> GetAssetCompanyOptionsAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string orderBy = null);

        /// <summary>
        /// Get all possible companies of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (Companies)</returns>
        System.Threading.Tasks.Task<ApiResponse<Companies>> GetAssetCompanyOptionsAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string orderBy = null);
        /// <summary>
        /// Get the history of an asset
        /// </summary>
        /// <remarks>
        /// Returns a collection of historical values of the asset identified by the id in the URL. Specifications are not included.   With the filter parameters from and to, it is possible to receive the history of a defined time period   Define the from with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; in front of the date the previous values is part of the collection (+2018-06-21T14:45:23).   Define the to with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; at the end of the date the next values is part of the collection (2018-06-21T14:45:23+).
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="attribute">limit history to changes of a specific attribute e.g status or serial_number (optional)</param>
        /// <param name="from">Start date filter for history values. Starting with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Ending with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of AssetHistoryResponse</returns>
        System.Threading.Tasks.Task<AssetHistoryResponse> GetAssetHistoryAsync (long? assetId, string attribute = null, DateTime? from = null, DateTime? to = null, string orderBy = null);

        /// <summary>
        /// Get the history of an asset
        /// </summary>
        /// <remarks>
        /// Returns a collection of historical values of the asset identified by the id in the URL. Specifications are not included.   With the filter parameters from and to, it is possible to receive the history of a defined time period   Define the from with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; in front of the date the previous values is part of the collection (+2018-06-21T14:45:23).   Define the to with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; at the end of the date the next values is part of the collection (2018-06-21T14:45:23+).
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="attribute">limit history to changes of a specific attribute e.g status or serial_number (optional)</param>
        /// <param name="from">Start date filter for history values. Starting with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Ending with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of ApiResponse (AssetHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetHistoryResponse>> GetAssetHistoryAsyncWithHttpInfo (long? assetId, string attribute = null, DateTime? from = null, DateTime? to = null, string orderBy = null);
        /// <summary>
        /// Get the status of the specific asset
        /// </summary>
        /// <remarks>
        /// Returns the status of the asset. Needed if only permission on asset but not on tenant. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of AssetStatusResponse</returns>
        System.Threading.Tasks.Task<AssetStatusResponse> GetAssetIdStatusAsync (long? assetId, string include = null, string acceptLanguage = null);

        /// <summary>
        /// Get the status of the specific asset
        /// </summary>
        /// <remarks>
        /// Returns the status of the asset. Needed if only permission on asset but not on tenant. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (AssetStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetStatusResponse>> GetAssetIdStatusAsyncWithHttpInfo (long? assetId, string include = null, string acceptLanguage = null);
        /// <summary>
        /// Get an asset picture
        /// </summary>
        /// <remarks>
        /// Get a single picture of an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of PictureResponse</returns>
        System.Threading.Tasks.Task<PictureResponse> GetAssetPictureAsync (long? assetId, long? id);

        /// <summary>
        /// Get an asset picture
        /// </summary>
        /// <remarks>
        /// Get a single picture of an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of ApiResponse (PictureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PictureResponse>> GetAssetPictureAsyncWithHttpInfo (long? assetId, long? id);
        /// <summary>
        /// Get asset pictures
        /// </summary>
        /// <remarks>
        /// Get all pictures of an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset</param>
        /// <param name="width">filter by width (optional)</param>
        /// <param name="widthFrom">filter by width_from (optional)</param>
        /// <param name="widthTo">filter by width_to (optional)</param>
        /// <param name="height">filter by height (optional)</param>
        /// <param name="heightFrom">filter by height_from (optional)</param>
        /// <param name="heightTo">filter by height_to (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of PicturesResponse</returns>
        System.Threading.Tasks.Task<PicturesResponse> GetAssetPicturesAsync (long? id, int? width = null, int? widthFrom = null, int? widthTo = null, int? height = null, int? heightFrom = null, int? heightTo = null, string orderBy = null);

        /// <summary>
        /// Get asset pictures
        /// </summary>
        /// <remarks>
        /// Get all pictures of an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset</param>
        /// <param name="width">filter by width (optional)</param>
        /// <param name="widthFrom">filter by width_from (optional)</param>
        /// <param name="widthTo">filter by width_to (optional)</param>
        /// <param name="height">filter by height (optional)</param>
        /// <param name="heightFrom">filter by height_from (optional)</param>
        /// <param name="heightTo">filter by height_to (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (PicturesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PicturesResponse>> GetAssetPicturesAsyncWithHttpInfo (long? id, int? width = null, int? widthFrom = null, int? widthTo = null, int? height = null, int? heightFrom = null, int? heightTo = null, string orderBy = null);
        /// <summary>
        /// Get all possible products of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible products for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of Products</returns>
        System.Threading.Tasks.Task<Products> GetAssetProductOptionsAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string orderBy = null);

        /// <summary>
        /// Get all possible products of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible products for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (Products)</returns>
        System.Threading.Tasks.Task<ApiResponse<Products>> GetAssetProductOptionsAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string orderBy = null);
        /// <summary>
        /// Get all possible statuses of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible asset statuses for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of AssetStatuses</returns>
        System.Threading.Tasks.Task<AssetStatuses> GetAssetStatusesOptionsAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string code = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get all possible statuses of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible asset statuses for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (AssetStatuses)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetStatuses>> GetAssetStatusesOptionsAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string code = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Get all possible tenants of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible tenants for the specified asset. That is all public tenants and the assets tenant. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of Tenants</returns>
        System.Threading.Tasks.Task<Tenants> GetAssetTenantOptionsAsync (long? assetId, int? page = null, int? perPage = null, string name = null, string orderBy = null);

        /// <summary>
        /// Get all possible tenants of the specified assets
        /// </summary>
        /// <remarks>
        /// Returns a list of all possible tenants for the specified asset. That is all public tenants and the assets tenant. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (Tenants)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tenants>> GetAssetTenantOptionsAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string name = null, string orderBy = null);
        /// <summary>
        /// Get asset value objects for a specific key.
        /// </summary>
        /// <remarks>
        /// Returns a collection of the history value objects of the value objects for the specified key. For a selected result of the value objects the filter parameters selector and interval are mandatory. With the filter parameters from, to or datetime, it is possible to receive the history of a defined time period.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="datetime">exact date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="selector">Supported selector methods are &#x60;first, last&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the selector. The value is mandatory if selector is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>Task of AssetKeyValueObjectsResponse</returns>
        System.Threading.Tasks.Task<AssetKeyValueObjectsResponse> GetAssetValueObjectsForKeyAsync (long? assetId, string key, int? page = null, int? perPage = null, string include = null, DateTime? from = null, DateTime? to = null, DateTime? datetime = null, string selector = null, string interval = null, string orderBy = null);

        /// <summary>
        /// Get asset value objects for a specific key.
        /// </summary>
        /// <remarks>
        /// Returns a collection of the history value objects of the value objects for the specified key. For a selected result of the value objects the filter parameters selector and interval are mandatory. With the filter parameters from, to or datetime, it is possible to receive the history of a defined time period.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="datetime">exact date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="selector">Supported selector methods are &#x60;first, last&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the selector. The value is mandatory if selector is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>Task of ApiResponse (AssetKeyValueObjectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetKeyValueObjectsResponse>> GetAssetValueObjectsForKeyAsyncWithHttpInfo (long? assetId, string key, int? page = null, int? perPage = null, string include = null, DateTime? from = null, DateTime? to = null, DateTime? datetime = null, string selector = null, string interval = null, string orderBy = null);
        /// <summary>
        /// Get latest values for the asset.
        /// </summary>
        /// <remarks>
        /// Returns a collection of the latest value for every key of the asset. Possible include values: &#x60;&#x60;&#x60;unit, unit.base_unit&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter key_unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="key">only the values of the specified keys will be returned. If no key is specified all keys of the asset with its latest values will be received. Multiple values can be specified in a comma seperated list. (optional)</param>
        /// <param name="keyUnitId">value of the provided key will be returned in the specified unit. If no key_unit is defined the last written unit will be returned. Accepted format is &#x60;key[unit_id]&#x60;. Multiple values can be provided in a comma seperated list. (optional)</param>
        /// <param name="group">Group of the asset value. (optional)</param>
        /// <returns>Task of AssetValuesResponse</returns>
        System.Threading.Tasks.Task<AssetValuesResponse> GetAssetValuesAsync (long? assetId, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, string key = null, string keyUnitId = null, string group = null);

        /// <summary>
        /// Get latest values for the asset.
        /// </summary>
        /// <remarks>
        /// Returns a collection of the latest value for every key of the asset. Possible include values: &#x60;&#x60;&#x60;unit, unit.base_unit&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter key_unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="key">only the values of the specified keys will be returned. If no key is specified all keys of the asset with its latest values will be received. Multiple values can be specified in a comma seperated list. (optional)</param>
        /// <param name="keyUnitId">value of the provided key will be returned in the specified unit. If no key_unit is defined the last written unit will be returned. Accepted format is &#x60;key[unit_id]&#x60;. Multiple values can be provided in a comma seperated list. (optional)</param>
        /// <param name="group">Group of the asset value. (optional)</param>
        /// <returns>Task of ApiResponse (AssetValuesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetValuesResponse>> GetAssetValuesAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, string key = null, string keyUnitId = null, string group = null);
        /// <summary>
        /// Get asset values for a specific key.
        /// </summary>
        /// <remarks>
        /// Returns a collection of the history values of an values for the specified key. For a aggregated result of the values the filter parameters aggregation and interval are mandatory. Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section. With the filter parameters from to it is possible to receive the history of a defined time period. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page, default value is 500, maximum is 1000 (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="unitId">Id of the unit in which the values are to be returned. (optional)</param>
        /// <param name="aggregation">Supported aggregation methods are &#x60;mean, min, max, sum, stddev&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the aggregation. The value is mandatory if aggregation is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>Task of AssetKeyValuesResponse</returns>
        System.Threading.Tasks.Task<AssetKeyValuesResponse> GetAssetValuesForKeyAsync (long? assetId, string key, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, DateTime? from = null, DateTime? to = null, int? unitId = null, string aggregation = null, string interval = null, string orderBy = null);

        /// <summary>
        /// Get asset values for a specific key.
        /// </summary>
        /// <remarks>
        /// Returns a collection of the history values of an values for the specified key. For a aggregated result of the values the filter parameters aggregation and interval are mandatory. Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section. With the filter parameters from to it is possible to receive the history of a defined time period. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page, default value is 500, maximum is 1000 (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="unitId">Id of the unit in which the values are to be returned. (optional)</param>
        /// <param name="aggregation">Supported aggregation methods are &#x60;mean, min, max, sum, stddev&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the aggregation. The value is mandatory if aggregation is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>Task of ApiResponse (AssetKeyValuesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetKeyValuesResponse>> GetAssetValuesForKeyAsyncWithHttpInfo (long? assetId, string key, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, DateTime? from = null, DateTime? to = null, int? unitId = null, string aggregation = null, string interval = null, string orderBy = null);
        /// <summary>
        /// Get a range of assets
        /// </summary>
        /// <remarks>
        /// Returns a list of assets in your accessible scope. You can apply the query parameters listed below to get a filtered list. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.status, instrumentations.type, instrumentations.worst_asset_status,  instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productCategoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="lastSeenAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="lastSeenAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="productionDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all assets with no nodes assigned or \&quot;!null\&quot; for any assigned node.  By adding &#x60;+&#x60; after the id, the filter considers the given node and all its sub components (nodes, instrumentations and systems), but this is not usable in combination with a comma list. (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no instrumentations assigned or \&quot;!null\&quot; for any assigned instrumentation (optional)</param>
        /// <param name="systemId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no systems assigned or \&quot;!null\&quot; for any assigned system (optional)</param>
        /// <param name="createdAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="createdAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="createdAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="updatedAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="ownershipClaimed">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of AssetsResponse</returns>
        System.Threading.Tasks.Task<AssetsResponse> GetAssetsAsync (int? page = null, int? perPage = null, string include = null, string serialNumber = null, string productId = null, string productStatusId = null, string productCategoryId = null, string parentId = null, string manufacturerId = null, string statusId = null, string statusCode = null, string tenantId = null, string lastSeenAtFrom = null, string lastSeenAtTo = null, DateTime? productionDate = null, DateTime? productionDateFrom = null, DateTime? productionDateTo = null, string specificationsKey = null, string specificationsValue = null, string nodeId = null, string instrumentationId = null, string systemId = null, DateTime? createdAt = null, string createdAtFrom = null, string createdAtTo = null, DateTime? updatedAt = null, string updatedAtFrom = null, string updatedAtTo = null, bool? ownershipClaimed = null, string permission = null, string orderBy = null);

        /// <summary>
        /// Get a range of assets
        /// </summary>
        /// <remarks>
        /// Returns a list of assets in your accessible scope. You can apply the query parameters listed below to get a filtered list. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.status, instrumentations.type, instrumentations.worst_asset_status,  instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productCategoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="lastSeenAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="lastSeenAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="productionDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all assets with no nodes assigned or \&quot;!null\&quot; for any assigned node.  By adding &#x60;+&#x60; after the id, the filter considers the given node and all its sub components (nodes, instrumentations and systems), but this is not usable in combination with a comma list. (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no instrumentations assigned or \&quot;!null\&quot; for any assigned instrumentation (optional)</param>
        /// <param name="systemId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no systems assigned or \&quot;!null\&quot; for any assigned system (optional)</param>
        /// <param name="createdAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="createdAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="createdAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="updatedAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="ownershipClaimed">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AssetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetsResponse>> GetAssetsAsyncWithHttpInfo (int? page = null, int? perPage = null, string include = null, string serialNumber = null, string productId = null, string productStatusId = null, string productCategoryId = null, string parentId = null, string manufacturerId = null, string statusId = null, string statusCode = null, string tenantId = null, string lastSeenAtFrom = null, string lastSeenAtTo = null, DateTime? productionDate = null, DateTime? productionDateFrom = null, DateTime? productionDateTo = null, string specificationsKey = null, string specificationsValue = null, string nodeId = null, string instrumentationId = null, string systemId = null, DateTime? createdAt = null, string createdAtFrom = null, string createdAtTo = null, DateTime? updatedAt = null, string updatedAtFrom = null, string updatedAtTo = null, bool? ownershipClaimed = null, string permission = null, string orderBy = null);
        /// <summary>
        /// Get all deliveries of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="dateOfShipment">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="senderId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="receiverId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="customerNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of DeliveriesResponse</returns>
        System.Threading.Tasks.Task<DeliveriesResponse> GetDeliveriesOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string number = null, string name = null, string statusId = null, DateTime? dateOfShipment = null, DateTime? dateOfShipmentFrom = null, DateTime? dateOfShipmentTo = null, string senderId = null, string receiverId = null, string customerNumber = null, string orderBy = null);

        /// <summary>
        /// Get all deliveries of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="dateOfShipment">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="senderId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="receiverId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="customerNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (DeliveriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeliveriesResponse>> GetDeliveriesOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string number = null, string name = null, string statusId = null, DateTime? dateOfShipment = null, DateTime? dateOfShipmentFrom = null, DateTime? dateOfShipmentTo = null, string senderId = null, string receiverId = null, string customerNumber = null, string orderBy = null);
        /// <summary>
        /// Get all documents of an asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all documents that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments, categories.standards, eventdocuments&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="documentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="classificationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validAt">Expected date format is YYYY-MM-DD or YYYY-MM or YYYY (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of DocumentsResponse</returns>
        System.Threading.Tasks.Task<DocumentsResponse> GetDocumentsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string documentVersion = null, string number = null, string statusId = null, string classificationId = null, string tenantId = null, string categoryId = null, DateTime? validFrom = null, DateTime? validUntil = null, DateTime? validAt = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get all documents of an asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all documents that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments, categories.standards, eventdocuments&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="documentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="classificationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validAt">Expected date format is YYYY-MM-DD or YYYY-MM or YYYY (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (DocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentsResponse>> GetDocumentsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string documentVersion = null, string number = null, string statusId = null, string classificationId = null, string tenantId = null, string categoryId = null, DateTime? validFrom = null, DateTime? validUntil = null, DateTime? validAt = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Get all events of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all events belonging to an asset in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;start_datetime&#x60;, &#x60;end_datetime&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of EventsResponse</returns>
        System.Threading.Tasks.Task<EventsResponse> GetEventsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string statusId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string tenantId = null, string orderBy = null);

        /// <summary>
        /// Get all events of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all events belonging to an asset in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;start_datetime&#x60;, &#x60;end_datetime&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (EventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventsResponse>> GetEventsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string statusId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string tenantId = null, string orderBy = null);
        /// <summary>
        /// Get all instrumentations of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="tag">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="criticality">Filter accepts undefined, low, medium or high (optional)</param>
        /// <param name="accessibility">Filter accepts undefined, easy, moderate or difficult (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;tag&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of InstrumentationsResponse</returns>
        System.Threading.Tasks.Task<InstrumentationsResponse> GetInstrumentationsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string tag = null, string statusId = null, string typeId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string criticality = null, string accessibility = null, string nodeId = null, string permission = null, string orderBy = null);

        /// <summary>
        /// Get all instrumentations of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="tag">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="criticality">Filter accepts undefined, low, medium or high (optional)</param>
        /// <param name="accessibility">Filter accepts undefined, easy, moderate or difficult (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;tag&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (InstrumentationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstrumentationsResponse>> GetInstrumentationsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string tag = null, string statusId = null, string typeId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string criticality = null, string accessibility = null, string nodeId = null, string permission = null, string orderBy = null);
        /// <summary>
        /// Get all instrumentations an asset was assigned to
        /// </summary>
        /// <remarks>
        /// Returns a list of all instrumentations history available in your scope which have been assigned to the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="_event">Filter accepts &#x60;create&#x60; or &#x60;destroy&#x60; (optional)</param>
        /// <param name="eventDatetimeFrom">Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="eventDatetimeTo">Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;event&#x60; or &#x60;event_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of AssetInstrumentationsHistoryResponse</returns>
        System.Threading.Tasks.Task<AssetInstrumentationsHistoryResponse> GetInstrumentationsOfAssetHistoryAsync (long? assetId, int? page = null, int? perPage = null, string instrumentationId = null, string _event = null, DateTime? eventDatetimeFrom = null, DateTime? eventDatetimeTo = null, string orderBy = null);

        /// <summary>
        /// Get all instrumentations an asset was assigned to
        /// </summary>
        /// <remarks>
        /// Returns a list of all instrumentations history available in your scope which have been assigned to the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="_event">Filter accepts &#x60;create&#x60; or &#x60;destroy&#x60; (optional)</param>
        /// <param name="eventDatetimeFrom">Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="eventDatetimeTo">Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;event&#x60; or &#x60;event_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of ApiResponse (AssetInstrumentationsHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetInstrumentationsHistoryResponse>> GetInstrumentationsOfAssetHistoryAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string instrumentationId = null, string _event = null, DateTime? eventDatetimeFrom = null, DateTime? eventDatetimeTo = null, string orderBy = null);
        /// <summary>
        /// Get all nodes of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="hidden">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of NodesResponse</returns>
        System.Threading.Tasks.Task<NodesResponse> GetNodesOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, bool? hidden = null, string permission = null, string orderBy = null);

        /// <summary>
        /// Get all nodes of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="hidden">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (NodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodesResponse>> GetNodesOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, bool? hidden = null, string permission = null, string orderBy = null);
        /// <summary>
        /// Get a range of software of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of software. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;software_attachments&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="softwareTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;version_number&#x60;, &#x60;name&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of SoftwaresResponse</returns>
        System.Threading.Tasks.Task<SoftwaresResponse> GetSoftwaresOfSoftwareAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string softwareTypeId = null, string orderBy = null, string acceptLanguage = null);

        /// <summary>
        /// Get a range of software of one asset
        /// </summary>
        /// <remarks>
        /// Returns a list of software. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;software_attachments&#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="softwareTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;version_number&#x60;, &#x60;name&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (SoftwaresResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoftwaresResponse>> GetSoftwaresOfSoftwareAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string softwareTypeId = null, string orderBy = null, string acceptLanguage = null);
        /// <summary>
        /// Get the history of one specification attribute of an asset.
        /// </summary>
        /// <remarks>
        /// This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">the exact key</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="sourceTimestampFrom">source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="sourceTimestampTo">source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtFrom">updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of SpecificationHistoryResponse</returns>
        System.Threading.Tasks.Task<SpecificationHistoryResponse> GetSpecificationHistoryOfAssetAsync (long? assetId, string key, int? page = null, int? perPage = null, DateTime? sourceTimestampFrom = null, DateTime? sourceTimestampTo = null, DateTime? updatedAtFrom = null, DateTime? updatedAtTo = null, string orderBy = null);

        /// <summary>
        /// Get the history of one specification attribute of an asset.
        /// </summary>
        /// <remarks>
        /// This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">the exact key</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="sourceTimestampFrom">source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="sourceTimestampTo">source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtFrom">updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of ApiResponse (SpecificationHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpecificationHistoryResponse>> GetSpecificationHistoryOfAssetAsyncWithHttpInfo (long? assetId, string key, int? page = null, int? perPage = null, DateTime? sourceTimestampFrom = null, DateTime? sourceTimestampTo = null, DateTime? updatedAtFrom = null, DateTime? updatedAtTo = null, string orderBy = null);
        /// <summary>
        /// Get existing asset specification keys
        /// </summary>
        /// <remarks>
        /// Returns the existing specification keys in all readable assets.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>Task of SpecificationKeys</returns>
        System.Threading.Tasks.Task<SpecificationKeys> GetSpecificationKeysOfAssetsAsync (string key = null, bool? uiVisible = null);

        /// <summary>
        /// Get existing asset specification keys
        /// </summary>
        /// <remarks>
        /// Returns the existing specification keys in all readable assets.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>Task of ApiResponse (SpecificationKeys)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpecificationKeys>> GetSpecificationKeysOfAssetsAsyncWithHttpInfo (string key = null, bool? uiVisible = null);
        /// <summary>
        /// Get specifications of an asset
        /// </summary>
        /// <remarks>
        /// Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>Task of SpecificationsUIVisibleResponse</returns>
        System.Threading.Tasks.Task<SpecificationsUIVisibleResponse> GetSpecificationsOfAssetAsync (long? assetId, string key = null, bool? uiVisible = null);

        /// <summary>
        /// Get specifications of an asset
        /// </summary>
        /// <remarks>
        /// Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>Task of ApiResponse (SpecificationsUIVisibleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpecificationsUIVisibleResponse>> GetSpecificationsOfAssetAsyncWithHttpInfo (long? assetId, string key = null, bool? uiVisible = null);
        /// <summary>
        /// Get all subscriptions of asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of SubscriptionsResponse</returns>
        System.Threading.Tasks.Task<SubscriptionsResponse> GetSubscriptionsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null);

        /// <summary>
        /// Get all subscriptions of asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (SubscriptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionsResponse>> GetSubscriptionsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null);
        /// <summary>
        /// Get all systems of one Asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all systems that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;pictures, specifications, specifications[key1,key2], tenant, parent, status, type, type.tenant, type.parent &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of SystemsResponse</returns>
        System.Threading.Tasks.Task<SystemsResponse> GetSystemsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, string permission = null, string orderBy = null);

        /// <summary>
        /// Get all systems of one Asset
        /// </summary>
        /// <remarks>
        /// Returns a list of all systems that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;pictures, specifications, specifications[key1,key2], tenant, parent, status, type, type.tenant, type.parent &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (SystemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemsResponse>> GetSystemsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, string permission = null, string orderBy = null);
        /// <summary>
        /// Remove add_ons from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more add_ons from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the add_ons will be removed</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAddOnsFromAssetAsync (AddOnIDs body, long? assetId);

        /// <summary>
        /// Remove add_ons from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more add_ons from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the add_ons will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAddOnsFromAssetAsyncWithHttpInfo (AddOnIDs body, long? assetId);
        /// <summary>
        /// Remove deliveries from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more deliveries from an asset in your accessible scope.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the deliveries will be removed</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveDeliveriesFromAssetAsync (DeliveryIDs body, long? assetId);

        /// <summary>
        /// Remove deliveries from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more deliveries from an asset in your accessible scope.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the deliveries will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDeliveriesFromAssetAsyncWithHttpInfo (DeliveryIDs body, long? assetId);
        /// <summary>
        /// Remove documents from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more documents from an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the documents will be removed</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveDocumentsFromAssetAsync (DocumentIDs body, long? assetId);

        /// <summary>
        /// Remove documents from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more documents from an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the documents will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDocumentsFromAssetAsyncWithHttpInfo (DocumentIDs body, long? assetId);
        /// <summary>
        /// Remove events from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more events from an asset in your accessible scope. If the event has no more related assets, the event will be deleted
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the events will removed.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveEventFromAssetAsync (Events body, long? assetId);

        /// <summary>
        /// Remove events from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more events from an asset in your accessible scope. If the event has no more related assets, the event will be deleted
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the events will removed.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveEventFromAssetAsyncWithHttpInfo (Events body, long? assetId);
        /// <summary>
        /// Remove instrumentations from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more instrumentations from an asset in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the instrumentations will be removed</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveInstrumentationsOfAssetAsync (InstrumentationIDs body, long? assetId);

        /// <summary>
        /// Remove instrumentations from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more instrumentations from an asset in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the instrumentations will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveInstrumentationsOfAssetAsyncWithHttpInfo (InstrumentationIDs body, long? assetId);
        /// <summary>
        /// Remove nodes from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more nodes from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the nodes will be removed</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveNodesFromAssetAsync (NodeIDs body, long? assetId);

        /// <summary>
        /// Remove nodes from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more nodes from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the nodes will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveNodesFromAssetAsyncWithHttpInfo (NodeIDs body, long? assetId);
        /// <summary>
        /// Remove software from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more software from an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the product from which the software will be removed</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveSoftwaresOfAssetAsync (SoftwareIDs body, long? assetId);

        /// <summary>
        /// Remove software from an asset
        /// </summary>
        /// <remarks>
        /// Remove one or more software from an asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the product from which the software will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveSoftwaresOfAssetAsyncWithHttpInfo (SoftwareIDs body, long? assetId);
        /// <summary>
        /// Rename a specification key
        /// </summary>
        /// <remarks>
        /// Rename one specification key of an asset in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted to lower-case.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications object to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RenameSpecificationsOfAssetAsync (SpecificationsRename body, long? assetId);

        /// <summary>
        /// Rename a specification key
        /// </summary>
        /// <remarks>
        /// Rename one specification key of an asset in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted to lower-case.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications object to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RenameSpecificationsOfAssetAsyncWithHttpInfo (SpecificationsRename body, long? assetId);
        /// <summary>
        /// Replace the add_ons of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all add_ons belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the add_ons will be replaced</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceAddOnsOfAssetAsync (AddOnIDs body, long? assetId);

        /// <summary>
        /// Replace the add_ons of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all add_ons belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the add_ons will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceAddOnsOfAssetAsyncWithHttpInfo (AddOnIDs body, long? assetId);
        /// <summary>
        /// Replace the deliveries of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all deliveries belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the deliveries will be replaced</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceDeliveriesOfAssetAsync (DeliveryIDs body, long? assetId);

        /// <summary>
        /// Replace the deliveries of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all deliveries belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the deliveries will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceDeliveriesOfAssetAsyncWithHttpInfo (DeliveryIDs body, long? assetId);
        /// <summary>
        /// Replace the documents of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all documents belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the documents will be replaced</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceDocumentsOfAssetAsync (DocumentIDs body, long? assetId);

        /// <summary>
        /// Replace the documents of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all documents belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the documents will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceDocumentsOfAssetAsyncWithHttpInfo (DocumentIDs body, long? assetId);
        /// <summary>
        /// Replace the instrumentations of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all instrumentations belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the instrumentations will be replaced</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceInstrumentationsOfAssetAsync (InstrumentationIDs body, long? assetId);

        /// <summary>
        /// Replace the instrumentations of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all instrumentations belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the instrumentations will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceInstrumentationsOfAssetAsyncWithHttpInfo (InstrumentationIDs body, long? assetId);
        /// <summary>
        /// Replace the nodes of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all nodes belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the nodes will be replaced</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceNodesOfAssetAsync (NodeIDs body, long? assetId);

        /// <summary>
        /// Replace the nodes of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all nodes belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the nodes will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceNodesOfAssetAsyncWithHttpInfo (NodeIDs body, long? assetId);
        /// <summary>
        /// Replace the software of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all software belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the software will be replaced</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceSoftwaresOfAssetAsync (SoftwareIDs body, long? assetId);

        /// <summary>
        /// Replace the software of an asset
        /// </summary>
        /// <remarks>
        /// Replaces all software belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the software will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceSoftwaresOfAssetAsyncWithHttpInfo (SoftwareIDs body, long? assetId);
        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource in your accessible scope.  To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent and on the current asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated. To remove an associative object use &quot;object_name&quot;: null</param>
        /// <param name="id">Id of the asset to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAssetAsync (AssetRequest body, long? id);

        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>
        /// Update accessible parameters of the requested resource in your accessible scope.  To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent and on the current asset.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated. To remove an associative object use &quot;object_name&quot;: null</param>
        /// <param name="id">Id of the asset to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAssetAsyncWithHttpInfo (AssetRequest body, long? id);
        /// <summary>
        /// Update an asset picture
        /// </summary>
        /// <remarks>
        /// Upload a new asset picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of PictureResponse</returns>
        System.Threading.Tasks.Task<PictureResponse> UpdateAssetPictureAsync (byte[] image, long? assetId, long? id);

        /// <summary>
        /// Update an asset picture
        /// </summary>
        /// <remarks>
        /// Upload a new asset picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of ApiResponse (PictureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PictureResponse>> UpdateAssetPictureAsyncWithHttpInfo (byte[] image, long? assetId, long? id);
        /// <summary>
        /// Update an asset picture link
        /// </summary>
        /// <remarks>
        /// Update an asset picture link.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be updated</param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of PictureResponse</returns>
        System.Threading.Tasks.Task<PictureResponse> UpdateAssetPictureLinkAsync (PictureLinkRequest body, long? assetId, long? id);

        /// <summary>
        /// Update an asset picture link
        /// </summary>
        /// <remarks>
        /// Update an asset picture link.
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be updated</param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of ApiResponse (PictureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PictureResponse>> UpdateAssetPictureLinkAsyncWithHttpInfo (PictureLinkRequest body, long? assetId, long? id);
        /// <summary>
        /// Update specifications of an asset
        /// </summary>
        /// <remarks>
        /// Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.  It is possible to save complex objects in the value as vector. In this case the unit must be &#x27;vector&#x27; and the value a valid object in the following format: &#x60;&#x60;&#x60;       [           {             \&quot;key\&quot;: {              \&quot;value\&quot;: \&quot;string\&quot;,              \&quot;unit\&quot;: \&quot;string\&quot;            }           },           {             \&quot;second_key\&quot;: {               \&quot;value\&quot;: \&quot;string\&quot;             }           }        ]   &#x60;&#x60;&#x60;  - key can only consist of [a-z A-Z 0-9 . - _ ]. - value is mandatory, max length 6000 chars - unit is optional, max length 50 chars - its impossible to filter for vector values
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications objects to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSpecificationsOfAssetAsync (Dictionary<string, SpecificationUIVisibleRequest> body, long? assetId);

        /// <summary>
        /// Update specifications of an asset
        /// </summary>
        /// <remarks>
        /// Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.  It is possible to save complex objects in the value as vector. In this case the unit must be &#x27;vector&#x27; and the value a valid object in the following format: &#x60;&#x60;&#x60;       [           {             \&quot;key\&quot;: {              \&quot;value\&quot;: \&quot;string\&quot;,              \&quot;unit\&quot;: \&quot;string\&quot;            }           },           {             \&quot;second_key\&quot;: {               \&quot;value\&quot;: \&quot;string\&quot;             }           }        ]   &#x60;&#x60;&#x60;  - key can only consist of [a-z A-Z 0-9 . - _ ]. - value is mandatory, max length 6000 chars - unit is optional, max length 50 chars - its impossible to filter for vector values
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications objects to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSpecificationsOfAssetAsyncWithHttpInfo (Dictionary<string, SpecificationUIVisibleRequest> body, long? assetId);
        /// <summary>
        /// Upload an asset picture
        /// </summary>
        /// <remarks>
        /// Upload a new asset picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="id">Id of the asset</param>
        /// <returns>Task of PictureResponse</returns>
        System.Threading.Tasks.Task<PictureResponse> UploadAssetPictureAsync (byte[] image, long? id);

        /// <summary>
        /// Upload an asset picture
        /// </summary>
        /// <remarks>
        /// Upload a new asset picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </remarks>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="id">Id of the asset</param>
        /// <returns>Task of ApiResponse (PictureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PictureResponse>> UploadAssetPictureAsyncWithHttpInfo (byte[] image, long? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AssetApi : IAssetApi
    {
        private Netilion.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetApi(String basePath)
        {
            this.Configuration = new Netilion.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class
        /// </summary>
        /// <returns></returns>
        public AssetApi()
        {
            this.Configuration = Netilion.Api.Client.Configuration.Default;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetApi(Netilion.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Netilion.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Netilion.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Netilion.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Netilion.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add add_ons to an asset Add one or more add_ons to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the add_ons will be added</param>
        /// <returns></returns>
        public void AddAddOnsToAsset (AddOnIDs body, long? assetId)
        {
             AddAddOnsToAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Add add_ons to an asset Add one or more add_ons to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the add_ons will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddAddOnsToAssetWithHttpInfo (AddOnIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddAddOnsToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AddAddOnsToAsset");

            var localVarPath = "/assets/{asset_id}/add_ons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAddOnsToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add add_ons to an asset Add one or more add_ons to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the add_ons will be added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddAddOnsToAssetAsync (AddOnIDs body, long? assetId)
        {
             await AddAddOnsToAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Add add_ons to an asset Add one or more add_ons to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the add_ons will be added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddAddOnsToAssetAsyncWithHttpInfo (AddOnIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddAddOnsToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AddAddOnsToAsset");

            var localVarPath = "/assets/{asset_id}/add_ons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAddOnsToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a link as asset picture Add an external resource as asset picture.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be created</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>PictureResponse</returns>
        public PictureResponse AddAssetPictureLink (PictureLinkRequest body, long? id)
        {
             ApiResponse<PictureResponse> localVarResponse = AddAssetPictureLinkWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a link as asset picture Add an external resource as asset picture.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be created</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>ApiResponse of PictureResponse</returns>
        public ApiResponse< PictureResponse > AddAssetPictureLinkWithHttpInfo (PictureLinkRequest body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddAssetPictureLink");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->AddAssetPictureLink");

            var localVarPath = "/assets/{id}/pictures/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAssetPictureLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PictureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PictureResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PictureResponse)));
        }

        /// <summary>
        /// Add a link as asset picture Add an external resource as asset picture.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be created</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>Task of PictureResponse</returns>
        public async System.Threading.Tasks.Task<PictureResponse> AddAssetPictureLinkAsync (PictureLinkRequest body, long? id)
        {
             ApiResponse<PictureResponse> localVarResponse = await AddAssetPictureLinkAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a link as asset picture Add an external resource as asset picture.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be created</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>Task of ApiResponse (PictureResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PictureResponse>> AddAssetPictureLinkAsyncWithHttpInfo (PictureLinkRequest body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddAssetPictureLink");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->AddAssetPictureLink");

            var localVarPath = "/assets/{id}/pictures/links";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAssetPictureLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PictureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PictureResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PictureResponse)));
        }

        /// <summary>
        /// Add deliveries to an asset Add one or more deliveries to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the deliveries will be added</param>
        /// <returns></returns>
        public void AddDeliveriesToAsset (DeliveryIDs body, long? assetId)
        {
             AddDeliveriesToAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Add deliveries to an asset Add one or more deliveries to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the deliveries will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddDeliveriesToAssetWithHttpInfo (DeliveryIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddDeliveriesToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AddDeliveriesToAsset");

            var localVarPath = "/assets/{asset_id}/deliveries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDeliveriesToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add deliveries to an asset Add one or more deliveries to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the deliveries will be added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddDeliveriesToAssetAsync (DeliveryIDs body, long? assetId)
        {
             await AddDeliveriesToAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Add deliveries to an asset Add one or more deliveries to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the deliveries will be added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddDeliveriesToAssetAsyncWithHttpInfo (DeliveryIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddDeliveriesToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AddDeliveriesToAsset");

            var localVarPath = "/assets/{asset_id}/deliveries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDeliveriesToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add documents to an asset Add one or more documents to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the documents will be added</param>
        /// <returns></returns>
        public void AddDocumentsToAsset (DocumentIDs body, long? assetId)
        {
             AddDocumentsToAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Add documents to an asset Add one or more documents to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the documents will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddDocumentsToAssetWithHttpInfo (DocumentIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddDocumentsToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AddDocumentsToAsset");

            var localVarPath = "/assets/{asset_id}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDocumentsToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add documents to an asset Add one or more documents to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the documents will be added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddDocumentsToAssetAsync (DocumentIDs body, long? assetId)
        {
             await AddDocumentsToAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Add documents to an asset Add one or more documents to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the documents will be added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddDocumentsToAssetAsyncWithHttpInfo (DocumentIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddDocumentsToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AddDocumentsToAsset");

            var localVarPath = "/assets/{asset_id}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDocumentsToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add instrumentations to an asset Add one or more instrumentations to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the instrumentations will be added</param>
        /// <returns></returns>
        public void AddInstrumentationsToAsset (InstrumentationIDs body, long? assetId)
        {
             AddInstrumentationsToAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Add instrumentations to an asset Add one or more instrumentations to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the instrumentations will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddInstrumentationsToAssetWithHttpInfo (InstrumentationIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddInstrumentationsToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AddInstrumentationsToAsset");

            var localVarPath = "/assets/{asset_id}/instrumentations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInstrumentationsToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add instrumentations to an asset Add one or more instrumentations to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the instrumentations will be added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddInstrumentationsToAssetAsync (InstrumentationIDs body, long? assetId)
        {
             await AddInstrumentationsToAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Add instrumentations to an asset Add one or more instrumentations to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the instrumentations will be added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddInstrumentationsToAssetAsyncWithHttpInfo (InstrumentationIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddInstrumentationsToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AddInstrumentationsToAsset");

            var localVarPath = "/assets/{asset_id}/instrumentations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInstrumentationsToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add nodes to an asset Add one or more nodes to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the nodes will be added</param>
        /// <returns></returns>
        public void AddNodesToAsset (NodeIDs body, long? assetId)
        {
             AddNodesToAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Add nodes to an asset Add one or more nodes to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the nodes will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddNodesToAssetWithHttpInfo (NodeIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddNodesToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AddNodesToAsset");

            var localVarPath = "/assets/{asset_id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNodesToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add nodes to an asset Add one or more nodes to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the nodes will be added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddNodesToAssetAsync (NodeIDs body, long? assetId)
        {
             await AddNodesToAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Add nodes to an asset Add one or more nodes to an asset. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the nodes will be added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddNodesToAssetAsyncWithHttpInfo (NodeIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddNodesToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AddNodesToAsset");

            var localVarPath = "/assets/{asset_id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNodesToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add software to an asset Add one or more software to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the software will be added</param>
        /// <returns></returns>
        public void AddSoftwaresToAsset (SoftwareIDs body, long? assetId)
        {
             AddSoftwaresToAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Add software to an asset Add one or more software to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the software will be added</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddSoftwaresToAssetWithHttpInfo (SoftwareIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddSoftwaresToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AddSoftwaresToAsset");

            var localVarPath = "/assets/{asset_id}/softwares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSoftwaresToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add software to an asset Add one or more software to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the software will be added</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddSoftwaresToAssetAsync (SoftwareIDs body, long? assetId)
        {
             await AddSoftwaresToAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Add software to an asset Add one or more software to an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be added.</param>
        /// <param name="assetId">Id of the asset to which the software will be added</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddSoftwaresToAssetAsyncWithHttpInfo (SoftwareIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->AddSoftwaresToAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->AddSoftwaresToAsset");

            var localVarPath = "/assets/{asset_id}/softwares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSoftwaresToAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new asset Create a new asset. An asset is an instance of a product and therefore needs to refer to one when creating it. The serialnumber of the given asset needs to be unique within the products manufacturer scope. The asset will not be created when this constraint is violated. The user gains &#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60;, &#x60;can_permit&#x60; per default on the newly created asset. To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset object that needs to be created. serial_number, product are required</param>
        /// <returns>AssetResponse</returns>
        public AssetResponse CreateAsset (AssetRequest body)
        {
             ApiResponse<AssetResponse> localVarResponse = CreateAssetWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new asset Create a new asset. An asset is an instance of a product and therefore needs to refer to one when creating it. The serialnumber of the given asset needs to be unique within the products manufacturer scope. The asset will not be created when this constraint is violated. The user gains &#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60;, &#x60;can_permit&#x60; per default on the newly created asset. To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset object that needs to be created. serial_number, product are required</param>
        /// <returns>ApiResponse of AssetResponse</returns>
        public ApiResponse< AssetResponse > CreateAssetWithHttpInfo (AssetRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->CreateAsset");

            var localVarPath = "/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetResponse)));
        }

        /// <summary>
        /// Create a new asset Create a new asset. An asset is an instance of a product and therefore needs to refer to one when creating it. The serialnumber of the given asset needs to be unique within the products manufacturer scope. The asset will not be created when this constraint is violated. The user gains &#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60;, &#x60;can_permit&#x60; per default on the newly created asset. To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset object that needs to be created. serial_number, product are required</param>
        /// <returns>Task of AssetResponse</returns>
        public async System.Threading.Tasks.Task<AssetResponse> CreateAssetAsync (AssetRequest body)
        {
             ApiResponse<AssetResponse> localVarResponse = await CreateAssetAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new asset Create a new asset. An asset is an instance of a product and therefore needs to refer to one when creating it. The serialnumber of the given asset needs to be unique within the products manufacturer scope. The asset will not be created when this constraint is violated. The user gains &#x60;can_read&#x60;, &#x60;can_update&#x60;, &#x60;can_delete&#x60;, &#x60;can_permit&#x60; per default on the newly created asset. To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset object that needs to be created. serial_number, product are required</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetResponse>> CreateAssetAsyncWithHttpInfo (AssetRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->CreateAsset");

            var localVarPath = "/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetResponse)));
        }

        /// <summary>
        /// Create an export for a standard container Creates a data export for asset container, currenty only the VDI 2770 standard is supported
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Container that should be created.</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>DataExportsResponse</returns>
        public DataExportsResponse CreateAssetContainer (ContainerExportRequest body, long? id)
        {
             ApiResponse<DataExportsResponse> localVarResponse = CreateAssetContainerWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an export for a standard container Creates a data export for asset container, currenty only the VDI 2770 standard is supported
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Container that should be created.</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>ApiResponse of DataExportsResponse</returns>
        public ApiResponse< DataExportsResponse > CreateAssetContainerWithHttpInfo (ContainerExportRequest body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->CreateAssetContainer");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->CreateAssetContainer");

            var localVarPath = "/assets/{id}/containers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssetContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataExportsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataExportsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataExportsResponse)));
        }

        /// <summary>
        /// Create an export for a standard container Creates a data export for asset container, currenty only the VDI 2770 standard is supported
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Container that should be created.</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>Task of DataExportsResponse</returns>
        public async System.Threading.Tasks.Task<DataExportsResponse> CreateAssetContainerAsync (ContainerExportRequest body, long? id)
        {
             ApiResponse<DataExportsResponse> localVarResponse = await CreateAssetContainerAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an export for a standard container Creates a data export for asset container, currenty only the VDI 2770 standard is supported
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Container that should be created.</param>
        /// <param name="id">Id of the asset</param>
        /// <returns>Task of ApiResponse (DataExportsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataExportsResponse>> CreateAssetContainerAsyncWithHttpInfo (ContainerExportRequest body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->CreateAssetContainer");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->CreateAssetContainer");

            var localVarPath = "/assets/{id}/containers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssetContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataExportsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DataExportsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataExportsResponse)));
        }

        /// <summary>
        /// Create asset value objects Store value objects measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys will be converted to lower case strings.   * Keys must be between 1 and 128 characters long.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the value objects get transfered one at a time, if you send multiple value objects without timestamp at once, all value objects will get the same timestamp and there for only the last one will be stored)  Difference to path /assets/{asset_id}/values is that the values given here are json objects and not numeric values, the json objects can have any structure.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns></returns>
        public void CreateAssetValueObjects (AssetValueObjectsRequest body, long? assetId)
        {
             CreateAssetValueObjectsWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Create asset value objects Store value objects measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys will be converted to lower case strings.   * Keys must be between 1 and 128 characters long.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the value objects get transfered one at a time, if you send multiple value objects without timestamp at once, all value objects will get the same timestamp and there for only the last one will be stored)  Difference to path /assets/{asset_id}/values is that the values given here are json objects and not numeric values, the json objects can have any structure.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateAssetValueObjectsWithHttpInfo (AssetValueObjectsRequest body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->CreateAssetValueObjects");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->CreateAssetValueObjects");

            var localVarPath = "/assets/{asset_id}/value_objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssetValueObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create asset value objects Store value objects measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys will be converted to lower case strings.   * Keys must be between 1 and 128 characters long.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the value objects get transfered one at a time, if you send multiple value objects without timestamp at once, all value objects will get the same timestamp and there for only the last one will be stored)  Difference to path /assets/{asset_id}/values is that the values given here are json objects and not numeric values, the json objects can have any structure.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAssetValueObjectsAsync (AssetValueObjectsRequest body, long? assetId)
        {
             await CreateAssetValueObjectsAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Create asset value objects Store value objects measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys will be converted to lower case strings.   * Keys must be between 1 and 128 characters long.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the value objects get transfered one at a time, if you send multiple value objects without timestamp at once, all value objects will get the same timestamp and there for only the last one will be stored)  Difference to path /assets/{asset_id}/values is that the values given here are json objects and not numeric values, the json objects can have any structure.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAssetValueObjectsAsyncWithHttpInfo (AssetValueObjectsRequest body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->CreateAssetValueObjects");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->CreateAssetValueObjects");

            var localVarPath = "/assets/{asset_id}/value_objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssetValueObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create asset values Store values measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys and groups can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys and groups will be converted to lower case strings.   * Keys and groups must be between 1 and 128 characters long.   * Units can be passed as id or code. See the units endpoint for all available units.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the values get transfered one at a time, if you send multiple values without timestamp at once, all values will get the same timestamp and there for only the last one will be stored)
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns></returns>
        public void CreateAssetValues (AssetValuesRequest body, long? assetId)
        {
             CreateAssetValuesWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Create asset values Store values measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys and groups can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys and groups will be converted to lower case strings.   * Keys and groups must be between 1 and 128 characters long.   * Units can be passed as id or code. See the units endpoint for all available units.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the values get transfered one at a time, if you send multiple values without timestamp at once, all values will get the same timestamp and there for only the last one will be stored)
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateAssetValuesWithHttpInfo (AssetValuesRequest body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->CreateAssetValues");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->CreateAssetValues");

            var localVarPath = "/assets/{asset_id}/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssetValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create asset values Store values measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys and groups can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys and groups will be converted to lower case strings.   * Keys and groups must be between 1 and 128 characters long.   * Units can be passed as id or code. See the units endpoint for all available units.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the values get transfered one at a time, if you send multiple values without timestamp at once, all values will get the same timestamp and there for only the last one will be stored)
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAssetValuesAsync (AssetValuesRequest body, long? assetId)
        {
             await CreateAssetValuesAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Create asset values Store values measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:  * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an \&quot;413 Payload Too Large\&quot; error.  Data validations and manipultation:    * Keys and groups can only consist of the charaters [a-z A-Z 0-9 . - _ ].   * Keys and groups will be converted to lower case strings.   * Keys and groups must be between 1 and 128 characters long.   * Units can be passed as id or code. See the units endpoint for all available units.   * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the values get transfered one at a time, if you send multiple values without timestamp at once, all values will get the same timestamp and there for only the last one will be stored)
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Values to store to an asset.</param>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAssetValuesAsyncWithHttpInfo (AssetValuesRequest body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->CreateAssetValues");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->CreateAssetValues");

            var localVarPath = "/assets/{asset_id}/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssetValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new event for an asset Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="assetId">Id of the asset</param>
        /// <returns>EventResponse</returns>
        public EventResponse CreateEventForAsset (EventRequestNoAssets body, long? assetId)
        {
             ApiResponse<EventResponse> localVarResponse = CreateEventForAssetWithHttpInfo(body, assetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new event for an asset Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="assetId">Id of the asset</param>
        /// <returns>ApiResponse of EventResponse</returns>
        public ApiResponse< EventResponse > CreateEventForAssetWithHttpInfo (EventRequestNoAssets body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->CreateEventForAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->CreateEventForAsset");

            var localVarPath = "/assets/{asset_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEventForAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventResponse)));
        }

        /// <summary>
        /// Create a new event for an asset Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="assetId">Id of the asset</param>
        /// <returns>Task of EventResponse</returns>
        public async System.Threading.Tasks.Task<EventResponse> CreateEventForAssetAsync (EventRequestNoAssets body, long? assetId)
        {
             ApiResponse<EventResponse> localVarResponse = await CreateEventForAssetAsyncWithHttpInfo(body, assetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new event for an asset Events must have a name, and can have a start_datetime (if not provided, the date of creation will be used as default value), end_datetime, event_type, event_status, description and responsible
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Object to be created.</param>
        /// <param name="assetId">Id of the asset</param>
        /// <returns>Task of ApiResponse (EventResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventResponse>> CreateEventForAssetAsyncWithHttpInfo (EventRequestNoAssets body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->CreateEventForAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->CreateEventForAsset");

            var localVarPath = "/assets/{asset_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEventForAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventResponse)));
        }

        /// <summary>
        /// Delete an asset Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to delete</param>
        /// <returns></returns>
        public void DeleteAsset (long? id)
        {
             DeleteAssetWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an asset Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAssetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->DeleteAsset");

            var localVarPath = "/assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an asset Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAssetAsync (long? id)
        {
             await DeleteAssetAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an asset Delete a specific resource identified by the id in the URL. Required Permissions: &#x60;&#x60;&#x60;can_delete&#x60;&#x60;&#x60;.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->DeleteAsset");

            var localVarPath = "/assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an asset picture Delete an asset picture.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns></returns>
        public void DeleteAssetPicture (long? assetId, long? id)
        {
             DeleteAssetPictureWithHttpInfo(assetId, id);
        }

        /// <summary>
        /// Delete an asset picture Delete an asset picture.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAssetPictureWithHttpInfo (long? assetId, long? id)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->DeleteAssetPicture");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->DeleteAssetPicture");

            var localVarPath = "/assets/{asset_id}/pictures/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an asset picture Delete an asset picture.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAssetPictureAsync (long? assetId, long? id)
        {
             await DeleteAssetPictureAsyncWithHttpInfo(assetId, id);

        }

        /// <summary>
        /// Delete an asset picture Delete an asset picture.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetPictureAsyncWithHttpInfo (long? assetId, long? id)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->DeleteAssetPicture");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->DeleteAssetPicture");

            var localVarPath = "/assets/{asset_id}/pictures/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete specifications of an asset The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of keys to delete from specifications</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns></returns>
        public void DeleteSpecificationsOfAsset (List<string> body, long? assetId)
        {
             DeleteSpecificationsOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Delete specifications of an asset The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of keys to delete from specifications</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSpecificationsOfAssetWithHttpInfo (List<string> body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->DeleteSpecificationsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->DeleteSpecificationsOfAsset");

            var localVarPath = "/assets/{asset_id}/specifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSpecificationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete specifications of an asset The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of keys to delete from specifications</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSpecificationsOfAssetAsync (List<string> body, long? assetId)
        {
             await DeleteSpecificationsOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Delete specifications of an asset The specification keys in the body will be removed of the object in your accessible scope. Multiple specification keys can be sent in the same request. If a key does not exist it will be ignored.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of keys to delete from specifications</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSpecificationsOfAssetAsyncWithHttpInfo (List<string> body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->DeleteSpecificationsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->DeleteSpecificationsOfAsset");

            var localVarPath = "/assets/{asset_id}/specifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSpecificationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download an asset picture Download an asset picture.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns></returns>
        public void DownloadAssetPicture (long? assetId, long? id)
        {
             DownloadAssetPictureWithHttpInfo(assetId, id);
        }

        /// <summary>
        /// Download an asset picture Download an asset picture.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DownloadAssetPictureWithHttpInfo (long? assetId, long? id)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->DownloadAssetPicture");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->DownloadAssetPicture");

            var localVarPath = "/assets/{asset_id}/pictures/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAssetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download an asset picture Download an asset picture.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadAssetPictureAsync (long? assetId, long? id)
        {
             await DownloadAssetPictureAsyncWithHttpInfo(assetId, id);

        }

        /// <summary>
        /// Download an asset picture Download an asset picture.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadAssetPictureAsyncWithHttpInfo (long? assetId, long? id)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->DownloadAssetPicture");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->DownloadAssetPicture");

            var localVarPath = "/assets/{asset_id}/pictures/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAssetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get all add_ons of one asset Returns a list of all add_ons that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="materialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="addOnType">Filter accepts addon or connectivity (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>AddOnsResponse</returns>
        public AddOnsResponse GetAddOnsOfAsset (long? assetId, int? page = null, int? perPage = null, string name = null, string productCode = null, string materialNumber = null, string addOnType = null, string orderBy = null)
        {
             ApiResponse<AddOnsResponse> localVarResponse = GetAddOnsOfAssetWithHttpInfo(assetId, page, perPage, name, productCode, materialNumber, addOnType, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all add_ons of one asset Returns a list of all add_ons that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="materialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="addOnType">Filter accepts addon or connectivity (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of AddOnsResponse</returns>
        public ApiResponse< AddOnsResponse > GetAddOnsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string name = null, string productCode = null, string materialNumber = null, string addOnType = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAddOnsOfAsset");

            var localVarPath = "/assets/{asset_id}/add_ons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (productCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_code", productCode)); // query parameter
            if (materialNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "material_number", materialNumber)); // query parameter
            if (addOnType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "add_on_type", addOnType)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddOnsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOnsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddOnsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOnsResponse)));
        }

        /// <summary>
        /// Get all add_ons of one asset Returns a list of all add_ons that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="materialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="addOnType">Filter accepts addon or connectivity (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of AddOnsResponse</returns>
        public async System.Threading.Tasks.Task<AddOnsResponse> GetAddOnsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string name = null, string productCode = null, string materialNumber = null, string addOnType = null, string orderBy = null)
        {
             ApiResponse<AddOnsResponse> localVarResponse = await GetAddOnsOfAssetAsyncWithHttpInfo(assetId, page, perPage, name, productCode, materialNumber, addOnType, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all add_ons of one asset Returns a list of all add_ons that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="materialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="addOnType">Filter accepts addon or connectivity (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddOnsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddOnsResponse>> GetAddOnsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string name = null, string productCode = null, string materialNumber = null, string addOnType = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAddOnsOfAsset");

            var localVarPath = "/assets/{asset_id}/add_ons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (productCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_code", productCode)); // query parameter
            if (materialNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "material_number", materialNumber)); // query parameter
            if (addOnType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "add_on_type", addOnType)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddOnsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOnsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddOnsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOnsResponse)));
        }

        /// <summary>
        /// Get all API subscriptions of the asset Returns a list of all API subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>APISubscriptionResponse</returns>
        public APISubscriptionResponse GetApiSubscriptionsOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null)
        {
             ApiResponse<APISubscriptionResponse> localVarResponse = GetApiSubscriptionsOfAssetWithHttpInfo(assetId, page, perPage, include, userId, clientApplicationId, externalReference, status, notificationStatus, specificationsKey, specificationsValue, startDate, endDate, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all API subscriptions of the asset Returns a list of all API subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of APISubscriptionResponse</returns>
        public ApiResponse< APISubscriptionResponse > GetApiSubscriptionsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetApiSubscriptionsOfAsset");

            var localVarPath = "/assets/{asset_id}/api_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (clientApplicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_application_id", clientApplicationId)); // query parameter
            if (externalReference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_reference", externalReference)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (notificationStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notification_status", notificationStatus)); // query parameter
            if (specificationsKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_key", specificationsKey)); // query parameter
            if (specificationsValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_value", specificationsValue)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiSubscriptionsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APISubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APISubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APISubscriptionResponse)));
        }

        /// <summary>
        /// Get all API subscriptions of the asset Returns a list of all API subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of APISubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<APISubscriptionResponse> GetApiSubscriptionsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null)
        {
             ApiResponse<APISubscriptionResponse> localVarResponse = await GetApiSubscriptionsOfAssetAsyncWithHttpInfo(assetId, page, perPage, include, userId, clientApplicationId, externalReference, status, notificationStatus, specificationsKey, specificationsValue, startDate, endDate, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all API subscriptions of the asset Returns a list of all API subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (APISubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APISubscriptionResponse>> GetApiSubscriptionsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetApiSubscriptionsOfAsset");

            var localVarPath = "/assets/{asset_id}/api_subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (clientApplicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_application_id", clientApplicationId)); // query parameter
            if (externalReference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_reference", externalReference)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (notificationStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notification_status", notificationStatus)); // query parameter
            if (specificationsKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_key", specificationsKey)); // query parameter
            if (specificationsValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_value", specificationsValue)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiSubscriptionsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APISubscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APISubscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APISubscriptionResponse)));
        }

        /// <summary>
        /// Get a single asset Get a specific asset identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>AssetResponse</returns>
        public AssetResponse GetAssetById (long? id, string include = null)
        {
             ApiResponse<AssetResponse> localVarResponse = GetAssetByIdWithHttpInfo(id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single asset Get a specific asset identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>ApiResponse of AssetResponse</returns>
        public ApiResponse< AssetResponse > GetAssetByIdWithHttpInfo (long? id, string include = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->GetAssetById");

            var localVarPath = "/assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetResponse)));
        }

        /// <summary>
        /// Get a single asset Get a specific asset identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of AssetResponse</returns>
        public async System.Threading.Tasks.Task<AssetResponse> GetAssetByIdAsync (long? id, string include = null)
        {
             ApiResponse<AssetResponse> localVarResponse = await GetAssetByIdAsyncWithHttpInfo(id, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single asset Get a specific asset identified by the id in the URL. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset to fetch</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetResponse>> GetAssetByIdAsyncWithHttpInfo (long? id, string include = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->GetAssetById");

            var localVarPath = "/assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetResponse)));
        }

        /// <summary>
        /// Get all possible companies of the specified assets Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Companies</returns>
        public Companies GetAssetCompanyOptions (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string orderBy = null)
        {
             ApiResponse<Companies> localVarResponse = GetAssetCompanyOptionsWithHttpInfo(assetId, page, perPage, include, name, tenantId, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all possible companies of the specified assets Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of Companies</returns>
        public ApiResponse< Companies > GetAssetCompanyOptionsWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetCompanyOptions");

            var localVarPath = "/assets/{asset_id}/company-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetCompanyOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Companies>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Companies) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Companies)));
        }

        /// <summary>
        /// Get all possible companies of the specified assets Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of Companies</returns>
        public async System.Threading.Tasks.Task<Companies> GetAssetCompanyOptionsAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string orderBy = null)
        {
             ApiResponse<Companies> localVarResponse = await GetAssetCompanyOptionsAsyncWithHttpInfo(assetId, page, perPage, include, name, tenantId, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all possible companies of the specified assets Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;tenant, parent&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (Companies)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Companies>> GetAssetCompanyOptionsAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetCompanyOptions");

            var localVarPath = "/assets/{asset_id}/company-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetCompanyOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Companies>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Companies) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Companies)));
        }

        /// <summary>
        /// Get the history of an asset Returns a collection of historical values of the asset identified by the id in the URL. Specifications are not included.   With the filter parameters from and to, it is possible to receive the history of a defined time period   Define the from with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; in front of the date the previous values is part of the collection (+2018-06-21T14:45:23).   Define the to with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; at the end of the date the next values is part of the collection (2018-06-21T14:45:23+).
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="attribute">limit history to changes of a specific attribute e.g status or serial_number (optional)</param>
        /// <param name="from">Start date filter for history values. Starting with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Ending with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>AssetHistoryResponse</returns>
        public AssetHistoryResponse GetAssetHistory (long? assetId, string attribute = null, DateTime? from = null, DateTime? to = null, string orderBy = null)
        {
             ApiResponse<AssetHistoryResponse> localVarResponse = GetAssetHistoryWithHttpInfo(assetId, attribute, from, to, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the history of an asset Returns a collection of historical values of the asset identified by the id in the URL. Specifications are not included.   With the filter parameters from and to, it is possible to receive the history of a defined time period   Define the from with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; in front of the date the previous values is part of the collection (+2018-06-21T14:45:23).   Define the to with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; at the end of the date the next values is part of the collection (2018-06-21T14:45:23+).
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="attribute">limit history to changes of a specific attribute e.g status or serial_number (optional)</param>
        /// <param name="from">Start date filter for history values. Starting with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Ending with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>ApiResponse of AssetHistoryResponse</returns>
        public ApiResponse< AssetHistoryResponse > GetAssetHistoryWithHttpInfo (long? assetId, string attribute = null, DateTime? from = null, DateTime? to = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetHistory");

            var localVarPath = "/assets/{asset_id}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (attribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attribute", attribute)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetHistoryResponse)));
        }

        /// <summary>
        /// Get the history of an asset Returns a collection of historical values of the asset identified by the id in the URL. Specifications are not included.   With the filter parameters from and to, it is possible to receive the history of a defined time period   Define the from with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; in front of the date the previous values is part of the collection (+2018-06-21T14:45:23).   Define the to with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; at the end of the date the next values is part of the collection (2018-06-21T14:45:23+).
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="attribute">limit history to changes of a specific attribute e.g status or serial_number (optional)</param>
        /// <param name="from">Start date filter for history values. Starting with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Ending with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of AssetHistoryResponse</returns>
        public async System.Threading.Tasks.Task<AssetHistoryResponse> GetAssetHistoryAsync (long? assetId, string attribute = null, DateTime? from = null, DateTime? to = null, string orderBy = null)
        {
             ApiResponse<AssetHistoryResponse> localVarResponse = await GetAssetHistoryAsyncWithHttpInfo(assetId, attribute, from, to, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the history of an asset Returns a collection of historical values of the asset identified by the id in the URL. Specifications are not included.   With the filter parameters from and to, it is possible to receive the history of a defined time period   Define the from with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; in front of the date the previous values is part of the collection (+2018-06-21T14:45:23).   Define the to with a &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; at the end of the date the next values is part of the collection (2018-06-21T14:45:23+).
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="attribute">limit history to changes of a specific attribute e.g status or serial_number (optional)</param>
        /// <param name="from">Start date filter for history values. Starting with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Ending with &#x60;&#x60;&#x60;+&#x60;&#x60;&#x60; will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of ApiResponse (AssetHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetHistoryResponse>> GetAssetHistoryAsyncWithHttpInfo (long? assetId, string attribute = null, DateTime? from = null, DateTime? to = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetHistory");

            var localVarPath = "/assets/{asset_id}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (attribute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attribute", attribute)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetHistoryResponse)));
        }

        /// <summary>
        /// Get the status of the specific asset Returns the status of the asset. Needed if only permission on asset but not on tenant. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>AssetStatusResponse</returns>
        public AssetStatusResponse GetAssetIdStatus (long? assetId, string include = null, string acceptLanguage = null)
        {
             ApiResponse<AssetStatusResponse> localVarResponse = GetAssetIdStatusWithHttpInfo(assetId, include, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of the specific asset Returns the status of the asset. Needed if only permission on asset but not on tenant. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of AssetStatusResponse</returns>
        public ApiResponse< AssetStatusResponse > GetAssetIdStatusWithHttpInfo (long? assetId, string include = null, string acceptLanguage = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetIdStatus");

            var localVarPath = "/assets/{asset_id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetIdStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetStatusResponse)));
        }

        /// <summary>
        /// Get the status of the specific asset Returns the status of the asset. Needed if only permission on asset but not on tenant. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of AssetStatusResponse</returns>
        public async System.Threading.Tasks.Task<AssetStatusResponse> GetAssetIdStatusAsync (long? assetId, string include = null, string acceptLanguage = null)
        {
             ApiResponse<AssetStatusResponse> localVarResponse = await GetAssetIdStatusAsyncWithHttpInfo(assetId, include, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of the specific asset Returns the status of the asset. Needed if only permission on asset but not on tenant. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (AssetStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetStatusResponse>> GetAssetIdStatusAsyncWithHttpInfo (long? assetId, string include = null, string acceptLanguage = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetIdStatus");

            var localVarPath = "/assets/{asset_id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetIdStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetStatusResponse)));
        }

        /// <summary>
        /// Get an asset picture Get a single picture of an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>PictureResponse</returns>
        public PictureResponse GetAssetPicture (long? assetId, long? id)
        {
             ApiResponse<PictureResponse> localVarResponse = GetAssetPictureWithHttpInfo(assetId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an asset picture Get a single picture of an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>ApiResponse of PictureResponse</returns>
        public ApiResponse< PictureResponse > GetAssetPictureWithHttpInfo (long? assetId, long? id)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetPicture");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->GetAssetPicture");

            var localVarPath = "/assets/{asset_id}/pictures/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PictureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PictureResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PictureResponse)));
        }

        /// <summary>
        /// Get an asset picture Get a single picture of an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of PictureResponse</returns>
        public async System.Threading.Tasks.Task<PictureResponse> GetAssetPictureAsync (long? assetId, long? id)
        {
             ApiResponse<PictureResponse> localVarResponse = await GetAssetPictureAsyncWithHttpInfo(assetId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an asset picture Get a single picture of an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of ApiResponse (PictureResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PictureResponse>> GetAssetPictureAsyncWithHttpInfo (long? assetId, long? id)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetPicture");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->GetAssetPicture");

            var localVarPath = "/assets/{asset_id}/pictures/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PictureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PictureResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PictureResponse)));
        }

        /// <summary>
        /// Get asset pictures Get all pictures of an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset</param>
        /// <param name="width">filter by width (optional)</param>
        /// <param name="widthFrom">filter by width_from (optional)</param>
        /// <param name="widthTo">filter by width_to (optional)</param>
        /// <param name="height">filter by height (optional)</param>
        /// <param name="heightFrom">filter by height_from (optional)</param>
        /// <param name="heightTo">filter by height_to (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>PicturesResponse</returns>
        public PicturesResponse GetAssetPictures (long? id, int? width = null, int? widthFrom = null, int? widthTo = null, int? height = null, int? heightFrom = null, int? heightTo = null, string orderBy = null)
        {
             ApiResponse<PicturesResponse> localVarResponse = GetAssetPicturesWithHttpInfo(id, width, widthFrom, widthTo, height, heightFrom, heightTo, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset pictures Get all pictures of an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset</param>
        /// <param name="width">filter by width (optional)</param>
        /// <param name="widthFrom">filter by width_from (optional)</param>
        /// <param name="widthTo">filter by width_to (optional)</param>
        /// <param name="height">filter by height (optional)</param>
        /// <param name="heightFrom">filter by height_from (optional)</param>
        /// <param name="heightTo">filter by height_to (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of PicturesResponse</returns>
        public ApiResponse< PicturesResponse > GetAssetPicturesWithHttpInfo (long? id, int? width = null, int? widthFrom = null, int? widthTo = null, int? height = null, int? heightFrom = null, int? heightTo = null, string orderBy = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->GetAssetPictures");

            var localVarPath = "/assets/{id}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (widthFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width_from", widthFrom)); // query parameter
            if (widthTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width_to", widthTo)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (heightFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height_from", heightFrom)); // query parameter
            if (heightTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height_to", heightTo)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetPictures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PicturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PicturesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PicturesResponse)));
        }

        /// <summary>
        /// Get asset pictures Get all pictures of an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset</param>
        /// <param name="width">filter by width (optional)</param>
        /// <param name="widthFrom">filter by width_from (optional)</param>
        /// <param name="widthTo">filter by width_to (optional)</param>
        /// <param name="height">filter by height (optional)</param>
        /// <param name="heightFrom">filter by height_from (optional)</param>
        /// <param name="heightTo">filter by height_to (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of PicturesResponse</returns>
        public async System.Threading.Tasks.Task<PicturesResponse> GetAssetPicturesAsync (long? id, int? width = null, int? widthFrom = null, int? widthTo = null, int? height = null, int? heightFrom = null, int? heightTo = null, string orderBy = null)
        {
             ApiResponse<PicturesResponse> localVarResponse = await GetAssetPicturesAsyncWithHttpInfo(id, width, widthFrom, widthTo, height, heightFrom, heightTo, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get asset pictures Get all pictures of an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the asset</param>
        /// <param name="width">filter by width (optional)</param>
        /// <param name="widthFrom">filter by width_from (optional)</param>
        /// <param name="widthTo">filter by width_to (optional)</param>
        /// <param name="height">filter by height (optional)</param>
        /// <param name="heightFrom">filter by height_from (optional)</param>
        /// <param name="heightTo">filter by height_to (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (PicturesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PicturesResponse>> GetAssetPicturesAsyncWithHttpInfo (long? id, int? width = null, int? widthFrom = null, int? widthTo = null, int? height = null, int? heightFrom = null, int? heightTo = null, string orderBy = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->GetAssetPictures");

            var localVarPath = "/assets/{id}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (widthFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width_from", widthFrom)); // query parameter
            if (widthTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width_to", widthTo)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (heightFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height_from", heightFrom)); // query parameter
            if (heightTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height_to", heightTo)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetPictures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PicturesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PicturesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PicturesResponse)));
        }

        /// <summary>
        /// Get all possible products of the specified assets Returns a list of all possible products for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Products</returns>
        public Products GetAssetProductOptions (long? assetId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string orderBy = null)
        {
             ApiResponse<Products> localVarResponse = GetAssetProductOptionsWithHttpInfo(assetId, page, perPage, include, productCode, name, manufacturerId, statusId, categoryId, parentId, tenantId, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all possible products of the specified assets Returns a list of all possible products for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of Products</returns>
        public ApiResponse< Products > GetAssetProductOptionsWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetProductOptions");

            var localVarPath = "/assets/{asset_id}/product-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (productCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_code", productCode)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (manufacturerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manufacturer_id", manufacturerId)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category_id", categoryId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetProductOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Products>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Products) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Products)));
        }

        /// <summary>
        /// Get all possible products of the specified assets Returns a list of all possible products for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of Products</returns>
        public async System.Threading.Tasks.Task<Products> GetAssetProductOptionsAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string orderBy = null)
        {
             ApiResponse<Products> localVarResponse = await GetAssetProductOptionsAsyncWithHttpInfo(assetId, page, perPage, include, productCode, name, manufacturerId, statusId, categoryId, parentId, tenantId, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all possible products of the specified assets Returns a list of all possible products for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, manufacturer, pictures, categories, categories.parent&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="productCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (Products)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Products>> GetAssetProductOptionsAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string productCode = null, string name = null, string manufacturerId = null, string statusId = null, string categoryId = null, string parentId = null, string tenantId = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetProductOptions");

            var localVarPath = "/assets/{asset_id}/product-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (productCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_code", productCode)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (manufacturerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manufacturer_id", manufacturerId)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category_id", categoryId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetProductOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Products>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Products) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Products)));
        }

        /// <summary>
        /// Get all possible statuses of the specified assets Returns a list of all possible asset statuses for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>AssetStatuses</returns>
        public AssetStatuses GetAssetStatusesOptions (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string code = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<AssetStatuses> localVarResponse = GetAssetStatusesOptionsWithHttpInfo(assetId, page, perPage, include, name, tenantId, code, orderBy, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all possible statuses of the specified assets Returns a list of all possible asset statuses for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of AssetStatuses</returns>
        public ApiResponse< AssetStatuses > GetAssetStatusesOptionsWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string code = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetStatusesOptions");

            var localVarPath = "/assets/{asset_id}/status-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetStatusesOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetStatuses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetStatuses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetStatuses)));
        }

        /// <summary>
        /// Get all possible statuses of the specified assets Returns a list of all possible asset statuses for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of AssetStatuses</returns>
        public async System.Threading.Tasks.Task<AssetStatuses> GetAssetStatusesOptionsAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string code = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<AssetStatuses> localVarResponse = await GetAssetStatusesOptionsAsyncWithHttpInfo(assetId, page, perPage, include, name, tenantId, code, orderBy, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all possible statuses of the specified assets Returns a list of all possible asset statuses for the specified asset. You can apply the query parameters listed below to get a filtered list. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include value: &#x60;&#x60;&#x60;tenant&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="code">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (AssetStatuses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetStatuses>> GetAssetStatusesOptionsAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string tenantId = null, string code = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetStatusesOptions");

            var localVarPath = "/assets/{asset_id}/status-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetStatusesOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetStatuses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetStatuses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetStatuses)));
        }

        /// <summary>
        /// Get all possible tenants of the specified assets Returns a list of all possible tenants for the specified asset. That is all public tenants and the assets tenant. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Tenants</returns>
        public Tenants GetAssetTenantOptions (long? assetId, int? page = null, int? perPage = null, string name = null, string orderBy = null)
        {
             ApiResponse<Tenants> localVarResponse = GetAssetTenantOptionsWithHttpInfo(assetId, page, perPage, name, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all possible tenants of the specified assets Returns a list of all possible tenants for the specified asset. That is all public tenants and the assets tenant. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of Tenants</returns>
        public ApiResponse< Tenants > GetAssetTenantOptionsWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string name = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetTenantOptions");

            var localVarPath = "/assets/{asset_id}/tenant-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetTenantOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tenants>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tenants) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tenants)));
        }

        /// <summary>
        /// Get all possible tenants of the specified assets Returns a list of all possible tenants for the specified asset. That is all public tenants and the assets tenant. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of Tenants</returns>
        public async System.Threading.Tasks.Task<Tenants> GetAssetTenantOptionsAsync (long? assetId, int? page = null, int? perPage = null, string name = null, string orderBy = null)
        {
             ApiResponse<Tenants> localVarResponse = await GetAssetTenantOptionsAsyncWithHttpInfo(assetId, page, perPage, name, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all possible tenants of the specified assets Returns a list of all possible tenants for the specified asset. That is all public tenants and the assets tenant. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (Tenants)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tenants>> GetAssetTenantOptionsAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string name = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetTenantOptions");

            var localVarPath = "/assets/{asset_id}/tenant-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetTenantOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tenants>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Tenants) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tenants)));
        }

        /// <summary>
        /// Get asset value objects for a specific key. Returns a collection of the history value objects of the value objects for the specified key. For a selected result of the value objects the filter parameters selector and interval are mandatory. With the filter parameters from, to or datetime, it is possible to receive the history of a defined time period.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="datetime">exact date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="selector">Supported selector methods are &#x60;first, last&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the selector. The value is mandatory if selector is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>AssetKeyValueObjectsResponse</returns>
        public AssetKeyValueObjectsResponse GetAssetValueObjectsForKey (long? assetId, string key, int? page = null, int? perPage = null, string include = null, DateTime? from = null, DateTime? to = null, DateTime? datetime = null, string selector = null, string interval = null, string orderBy = null)
        {
             ApiResponse<AssetKeyValueObjectsResponse> localVarResponse = GetAssetValueObjectsForKeyWithHttpInfo(assetId, key, page, perPage, include, from, to, datetime, selector, interval, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset value objects for a specific key. Returns a collection of the history value objects of the value objects for the specified key. For a selected result of the value objects the filter parameters selector and interval are mandatory. With the filter parameters from, to or datetime, it is possible to receive the history of a defined time period.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="datetime">exact date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="selector">Supported selector methods are &#x60;first, last&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the selector. The value is mandatory if selector is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>ApiResponse of AssetKeyValueObjectsResponse</returns>
        public ApiResponse< AssetKeyValueObjectsResponse > GetAssetValueObjectsForKeyWithHttpInfo (long? assetId, string key, int? page = null, int? perPage = null, string include = null, DateTime? from = null, DateTime? to = null, DateTime? datetime = null, string selector = null, string interval = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetValueObjectsForKey");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AssetApi->GetAssetValueObjectsForKey");

            var localVarPath = "/assets/{asset_id}/value_objects/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (datetime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetime", datetime)); // query parameter
            if (selector != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "selector", selector)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetValueObjectsForKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetKeyValueObjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetKeyValueObjectsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetKeyValueObjectsResponse)));
        }

        /// <summary>
        /// Get asset value objects for a specific key. Returns a collection of the history value objects of the value objects for the specified key. For a selected result of the value objects the filter parameters selector and interval are mandatory. With the filter parameters from, to or datetime, it is possible to receive the history of a defined time period.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="datetime">exact date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="selector">Supported selector methods are &#x60;first, last&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the selector. The value is mandatory if selector is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>Task of AssetKeyValueObjectsResponse</returns>
        public async System.Threading.Tasks.Task<AssetKeyValueObjectsResponse> GetAssetValueObjectsForKeyAsync (long? assetId, string key, int? page = null, int? perPage = null, string include = null, DateTime? from = null, DateTime? to = null, DateTime? datetime = null, string selector = null, string interval = null, string orderBy = null)
        {
             ApiResponse<AssetKeyValueObjectsResponse> localVarResponse = await GetAssetValueObjectsForKeyAsyncWithHttpInfo(assetId, key, page, perPage, include, from, to, datetime, selector, interval, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get asset value objects for a specific key. Returns a collection of the history value objects of the value objects for the specified key. For a selected result of the value objects the filter parameters selector and interval are mandatory. With the filter parameters from, to or datetime, it is possible to receive the history of a defined time period.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="datetime">exact date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="selector">Supported selector methods are &#x60;first, last&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the selector. The value is mandatory if selector is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>Task of ApiResponse (AssetKeyValueObjectsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetKeyValueObjectsResponse>> GetAssetValueObjectsForKeyAsyncWithHttpInfo (long? assetId, string key, int? page = null, int? perPage = null, string include = null, DateTime? from = null, DateTime? to = null, DateTime? datetime = null, string selector = null, string interval = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetValueObjectsForKey");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AssetApi->GetAssetValueObjectsForKey");

            var localVarPath = "/assets/{asset_id}/value_objects/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (datetime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetime", datetime)); // query parameter
            if (selector != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "selector", selector)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetValueObjectsForKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetKeyValueObjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetKeyValueObjectsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetKeyValueObjectsResponse)));
        }

        /// <summary>
        /// Get latest values for the asset. Returns a collection of the latest value for every key of the asset. Possible include values: &#x60;&#x60;&#x60;unit, unit.base_unit&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter key_unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="key">only the values of the specified keys will be returned. If no key is specified all keys of the asset with its latest values will be received. Multiple values can be specified in a comma seperated list. (optional)</param>
        /// <param name="keyUnitId">value of the provided key will be returned in the specified unit. If no key_unit is defined the last written unit will be returned. Accepted format is &#x60;key[unit_id]&#x60;. Multiple values can be provided in a comma seperated list. (optional)</param>
        /// <param name="group">Group of the asset value. (optional)</param>
        /// <returns>AssetValuesResponse</returns>
        public AssetValuesResponse GetAssetValues (long? assetId, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, string key = null, string keyUnitId = null, string group = null)
        {
             ApiResponse<AssetValuesResponse> localVarResponse = GetAssetValuesWithHttpInfo(assetId, page, perPage, include, usePreferredUnits, key, keyUnitId, group);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get latest values for the asset. Returns a collection of the latest value for every key of the asset. Possible include values: &#x60;&#x60;&#x60;unit, unit.base_unit&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter key_unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="key">only the values of the specified keys will be returned. If no key is specified all keys of the asset with its latest values will be received. Multiple values can be specified in a comma seperated list. (optional)</param>
        /// <param name="keyUnitId">value of the provided key will be returned in the specified unit. If no key_unit is defined the last written unit will be returned. Accepted format is &#x60;key[unit_id]&#x60;. Multiple values can be provided in a comma seperated list. (optional)</param>
        /// <param name="group">Group of the asset value. (optional)</param>
        /// <returns>ApiResponse of AssetValuesResponse</returns>
        public ApiResponse< AssetValuesResponse > GetAssetValuesWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, string key = null, string keyUnitId = null, string group = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetValues");

            var localVarPath = "/assets/{asset_id}/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (usePreferredUnits != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "use_preferred_units", usePreferredUnits)); // query parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (keyUnitId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key_unit_id", keyUnitId)); // query parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetValuesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetValuesResponse)));
        }

        /// <summary>
        /// Get latest values for the asset. Returns a collection of the latest value for every key of the asset. Possible include values: &#x60;&#x60;&#x60;unit, unit.base_unit&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter key_unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="key">only the values of the specified keys will be returned. If no key is specified all keys of the asset with its latest values will be received. Multiple values can be specified in a comma seperated list. (optional)</param>
        /// <param name="keyUnitId">value of the provided key will be returned in the specified unit. If no key_unit is defined the last written unit will be returned. Accepted format is &#x60;key[unit_id]&#x60;. Multiple values can be provided in a comma seperated list. (optional)</param>
        /// <param name="group">Group of the asset value. (optional)</param>
        /// <returns>Task of AssetValuesResponse</returns>
        public async System.Threading.Tasks.Task<AssetValuesResponse> GetAssetValuesAsync (long? assetId, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, string key = null, string keyUnitId = null, string group = null)
        {
             ApiResponse<AssetValuesResponse> localVarResponse = await GetAssetValuesAsyncWithHttpInfo(assetId, page, perPage, include, usePreferredUnits, key, keyUnitId, group);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get latest values for the asset. Returns a collection of the latest value for every key of the asset. Possible include values: &#x60;&#x60;&#x60;unit, unit.base_unit&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter key_unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="key">only the values of the specified keys will be returned. If no key is specified all keys of the asset with its latest values will be received. Multiple values can be specified in a comma seperated list. (optional)</param>
        /// <param name="keyUnitId">value of the provided key will be returned in the specified unit. If no key_unit is defined the last written unit will be returned. Accepted format is &#x60;key[unit_id]&#x60;. Multiple values can be provided in a comma seperated list. (optional)</param>
        /// <param name="group">Group of the asset value. (optional)</param>
        /// <returns>Task of ApiResponse (AssetValuesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetValuesResponse>> GetAssetValuesAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, string key = null, string keyUnitId = null, string group = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetValues");

            var localVarPath = "/assets/{asset_id}/values";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (usePreferredUnits != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "use_preferred_units", usePreferredUnits)); // query parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (keyUnitId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key_unit_id", keyUnitId)); // query parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetValuesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetValuesResponse)));
        }

        /// <summary>
        /// Get asset values for a specific key. Returns a collection of the history values of an values for the specified key. For a aggregated result of the values the filter parameters aggregation and interval are mandatory. Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section. With the filter parameters from to it is possible to receive the history of a defined time period. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page, default value is 500, maximum is 1000 (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="unitId">Id of the unit in which the values are to be returned. (optional)</param>
        /// <param name="aggregation">Supported aggregation methods are &#x60;mean, min, max, sum, stddev&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the aggregation. The value is mandatory if aggregation is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>AssetKeyValuesResponse</returns>
        public AssetKeyValuesResponse GetAssetValuesForKey (long? assetId, string key, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, DateTime? from = null, DateTime? to = null, int? unitId = null, string aggregation = null, string interval = null, string orderBy = null)
        {
             ApiResponse<AssetKeyValuesResponse> localVarResponse = GetAssetValuesForKeyWithHttpInfo(assetId, key, page, perPage, include, usePreferredUnits, from, to, unitId, aggregation, interval, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset values for a specific key. Returns a collection of the history values of an values for the specified key. For a aggregated result of the values the filter parameters aggregation and interval are mandatory. Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section. With the filter parameters from to it is possible to receive the history of a defined time period. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page, default value is 500, maximum is 1000 (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="unitId">Id of the unit in which the values are to be returned. (optional)</param>
        /// <param name="aggregation">Supported aggregation methods are &#x60;mean, min, max, sum, stddev&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the aggregation. The value is mandatory if aggregation is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>ApiResponse of AssetKeyValuesResponse</returns>
        public ApiResponse< AssetKeyValuesResponse > GetAssetValuesForKeyWithHttpInfo (long? assetId, string key, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, DateTime? from = null, DateTime? to = null, int? unitId = null, string aggregation = null, string interval = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetValuesForKey");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AssetApi->GetAssetValuesForKey");

            var localVarPath = "/assets/{asset_id}/values/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (usePreferredUnits != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "use_preferred_units", usePreferredUnits)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (unitId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unit_id", unitId)); // query parameter
            if (aggregation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aggregation", aggregation)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetValuesForKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetKeyValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetKeyValuesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetKeyValuesResponse)));
        }

        /// <summary>
        /// Get asset values for a specific key. Returns a collection of the history values of an values for the specified key. For a aggregated result of the values the filter parameters aggregation and interval are mandatory. Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section. With the filter parameters from to it is possible to receive the history of a defined time period. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page, default value is 500, maximum is 1000 (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="unitId">Id of the unit in which the values are to be returned. (optional)</param>
        /// <param name="aggregation">Supported aggregation methods are &#x60;mean, min, max, sum, stddev&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the aggregation. The value is mandatory if aggregation is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>Task of AssetKeyValuesResponse</returns>
        public async System.Threading.Tasks.Task<AssetKeyValuesResponse> GetAssetValuesForKeyAsync (long? assetId, string key, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, DateTime? from = null, DateTime? to = null, int? unitId = null, string aggregation = null, string interval = null, string orderBy = null)
        {
             ApiResponse<AssetKeyValuesResponse> localVarResponse = await GetAssetValuesForKeyAsyncWithHttpInfo(assetId, key, page, perPage, include, usePreferredUnits, from, to, unitId, aggregation, interval, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get asset values for a specific key. Returns a collection of the history values of an values for the specified key. For a aggregated result of the values the filter parameters aggregation and interval are mandatory. Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section. With the filter parameters from to it is possible to receive the history of a defined time period. Possible include values: &#x60;&#x60;&#x60;unit&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="key">key for the asset values</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page, default value is 500, maximum is 1000 (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="usePreferredUnits">whether to return the values in the preferred units described in the asset specification &#x27;preferred_units&#x27; or not. These values have lower precedence than the parameter unit_id. Example value of the specification is &#x27;{\&quot;key_1\&quot;\\:\&quot;unit_code_1\&quot;, \&quot;key_2\&quot;\\:\&quot;unit_code_2\&quot;}&#x27; (optional)</param>
        /// <param name="from">Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="to">End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="unitId">Id of the unit in which the values are to be returned. (optional)</param>
        /// <param name="aggregation">Supported aggregation methods are &#x60;mean, min, max, sum, stddev&#x60;. This value is mandatory if interval is defined. (optional)</param>
        /// <param name="interval">Interval which is used for the aggregation. The value is mandatory if aggregation is defined. Supported intervals are number of &#x60;s, m, h, d, w&#x60;. Example &#x60;3h&#x60;. (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;timestamp&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default ordering is the order the values were entered in. (optional)</param>
        /// <returns>Task of ApiResponse (AssetKeyValuesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetKeyValuesResponse>> GetAssetValuesForKeyAsyncWithHttpInfo (long? assetId, string key, int? page = null, int? perPage = null, string include = null, bool? usePreferredUnits = null, DateTime? from = null, DateTime? to = null, int? unitId = null, string aggregation = null, string interval = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetAssetValuesForKey");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AssetApi->GetAssetValuesForKey");

            var localVarPath = "/assets/{asset_id}/values/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (usePreferredUnits != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "use_preferred_units", usePreferredUnits)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (unitId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unit_id", unitId)); // query parameter
            if (aggregation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aggregation", aggregation)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetValuesForKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetKeyValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetKeyValuesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetKeyValuesResponse)));
        }

        /// <summary>
        /// Get a range of assets Returns a list of assets in your accessible scope. You can apply the query parameters listed below to get a filtered list. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.status, instrumentations.type, instrumentations.worst_asset_status,  instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productCategoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="lastSeenAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="lastSeenAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="productionDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all assets with no nodes assigned or \&quot;!null\&quot; for any assigned node.  By adding &#x60;+&#x60; after the id, the filter considers the given node and all its sub components (nodes, instrumentations and systems), but this is not usable in combination with a comma list. (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no instrumentations assigned or \&quot;!null\&quot; for any assigned instrumentation (optional)</param>
        /// <param name="systemId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no systems assigned or \&quot;!null\&quot; for any assigned system (optional)</param>
        /// <param name="createdAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="createdAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="createdAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="updatedAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="ownershipClaimed">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>AssetsResponse</returns>
        public AssetsResponse GetAssets (int? page = null, int? perPage = null, string include = null, string serialNumber = null, string productId = null, string productStatusId = null, string productCategoryId = null, string parentId = null, string manufacturerId = null, string statusId = null, string statusCode = null, string tenantId = null, string lastSeenAtFrom = null, string lastSeenAtTo = null, DateTime? productionDate = null, DateTime? productionDateFrom = null, DateTime? productionDateTo = null, string specificationsKey = null, string specificationsValue = null, string nodeId = null, string instrumentationId = null, string systemId = null, DateTime? createdAt = null, string createdAtFrom = null, string createdAtTo = null, DateTime? updatedAt = null, string updatedAtFrom = null, string updatedAtTo = null, bool? ownershipClaimed = null, string permission = null, string orderBy = null)
        {
             ApiResponse<AssetsResponse> localVarResponse = GetAssetsWithHttpInfo(page, perPage, include, serialNumber, productId, productStatusId, productCategoryId, parentId, manufacturerId, statusId, statusCode, tenantId, lastSeenAtFrom, lastSeenAtTo, productionDate, productionDateFrom, productionDateTo, specificationsKey, specificationsValue, nodeId, instrumentationId, systemId, createdAt, createdAtFrom, createdAtTo, updatedAt, updatedAtFrom, updatedAtTo, ownershipClaimed, permission, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a range of assets Returns a list of assets in your accessible scope. You can apply the query parameters listed below to get a filtered list. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.status, instrumentations.type, instrumentations.worst_asset_status,  instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productCategoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="lastSeenAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="lastSeenAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="productionDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all assets with no nodes assigned or \&quot;!null\&quot; for any assigned node.  By adding &#x60;+&#x60; after the id, the filter considers the given node and all its sub components (nodes, instrumentations and systems), but this is not usable in combination with a comma list. (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no instrumentations assigned or \&quot;!null\&quot; for any assigned instrumentation (optional)</param>
        /// <param name="systemId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no systems assigned or \&quot;!null\&quot; for any assigned system (optional)</param>
        /// <param name="createdAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="createdAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="createdAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="updatedAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="ownershipClaimed">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of AssetsResponse</returns>
        public ApiResponse< AssetsResponse > GetAssetsWithHttpInfo (int? page = null, int? perPage = null, string include = null, string serialNumber = null, string productId = null, string productStatusId = null, string productCategoryId = null, string parentId = null, string manufacturerId = null, string statusId = null, string statusCode = null, string tenantId = null, string lastSeenAtFrom = null, string lastSeenAtTo = null, DateTime? productionDate = null, DateTime? productionDateFrom = null, DateTime? productionDateTo = null, string specificationsKey = null, string specificationsValue = null, string nodeId = null, string instrumentationId = null, string systemId = null, DateTime? createdAt = null, string createdAtFrom = null, string createdAtTo = null, DateTime? updatedAt = null, string updatedAtFrom = null, string updatedAtTo = null, bool? ownershipClaimed = null, string permission = null, string orderBy = null)
        {

            var localVarPath = "/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (serialNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serial_number", serialNumber)); // query parameter
            if (productId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_id", productId)); // query parameter
            if (productStatusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_status_id", productStatusId)); // query parameter
            if (productCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_category_id", productCategoryId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (manufacturerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manufacturer_id", manufacturerId)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (statusCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_code", statusCode)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (lastSeenAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_seen_at_from", lastSeenAtFrom)); // query parameter
            if (lastSeenAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_seen_at_to", lastSeenAtTo)); // query parameter
            if (productionDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "production_date", productionDate)); // query parameter
            if (productionDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "production_date_from", productionDateFrom)); // query parameter
            if (productionDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "production_date_to", productionDateTo)); // query parameter
            if (specificationsKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_key", specificationsKey)); // query parameter
            if (specificationsValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_value", specificationsValue)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "node_id", nodeId)); // query parameter
            if (instrumentationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "instrumentation_id", instrumentationId)); // query parameter
            if (systemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "system_id", systemId)); // query parameter
            if (createdAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at", createdAt)); // query parameter
            if (createdAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_from", createdAtFrom)); // query parameter
            if (createdAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_to", createdAtTo)); // query parameter
            if (updatedAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated_at", updatedAt)); // query parameter
            if (updatedAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated_at_from", updatedAtFrom)); // query parameter
            if (updatedAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated_at_to", updatedAtTo)); // query parameter
            if (ownershipClaimed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ownership_claimed", ownershipClaimed)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permission", permission)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetsResponse)));
        }

        /// <summary>
        /// Get a range of assets Returns a list of assets in your accessible scope. You can apply the query parameters listed below to get a filtered list. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.status, instrumentations.type, instrumentations.worst_asset_status,  instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productCategoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="lastSeenAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="lastSeenAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="productionDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all assets with no nodes assigned or \&quot;!null\&quot; for any assigned node.  By adding &#x60;+&#x60; after the id, the filter considers the given node and all its sub components (nodes, instrumentations and systems), but this is not usable in combination with a comma list. (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no instrumentations assigned or \&quot;!null\&quot; for any assigned instrumentation (optional)</param>
        /// <param name="systemId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no systems assigned or \&quot;!null\&quot; for any assigned system (optional)</param>
        /// <param name="createdAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="createdAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="createdAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="updatedAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="ownershipClaimed">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of AssetsResponse</returns>
        public async System.Threading.Tasks.Task<AssetsResponse> GetAssetsAsync (int? page = null, int? perPage = null, string include = null, string serialNumber = null, string productId = null, string productStatusId = null, string productCategoryId = null, string parentId = null, string manufacturerId = null, string statusId = null, string statusCode = null, string tenantId = null, string lastSeenAtFrom = null, string lastSeenAtTo = null, DateTime? productionDate = null, DateTime? productionDateFrom = null, DateTime? productionDateTo = null, string specificationsKey = null, string specificationsValue = null, string nodeId = null, string instrumentationId = null, string systemId = null, DateTime? createdAt = null, string createdAtFrom = null, string createdAtTo = null, DateTime? updatedAt = null, string updatedAtFrom = null, string updatedAtTo = null, bool? ownershipClaimed = null, string permission = null, string orderBy = null)
        {
             ApiResponse<AssetsResponse> localVarResponse = await GetAssetsAsyncWithHttpInfo(page, perPage, include, serialNumber, productId, productStatusId, productCategoryId, parentId, manufacturerId, statusId, statusCode, tenantId, lastSeenAtFrom, lastSeenAtTo, productionDate, productionDateFrom, productionDateTo, specificationsKey, specificationsValue, nodeId, instrumentationId, systemId, createdAt, createdAtFrom, createdAtTo, updatedAt, updatedAtFrom, updatedAtTo, ownershipClaimed, permission, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a range of assets Returns a list of assets in your accessible scope. You can apply the query parameters listed below to get a filtered list. Possible include values: &#x60;&#x60;&#x60;status, tenant, parent, pictures, values, values.unit, values_in_preferred_units, values_in_preferred_units.unit, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, product.tenant, product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,  systems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2], product.specifications, product.specifications[key1,key2], instrumentations.status, instrumentations.type, instrumentations.worst_asset_status,  instrumentations.specifications, instrumentations.specifications[key1,key2] add_ons&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="serialNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="productId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productStatusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="productCategoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="manufacturerId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusCode">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="lastSeenAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="lastSeenAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="productionDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="productionDateTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all assets with no nodes assigned or \&quot;!null\&quot; for any assigned node.  By adding &#x60;+&#x60; after the id, the filter considers the given node and all its sub components (nodes, instrumentations and systems), but this is not usable in combination with a comma list. (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no instrumentations assigned or \&quot;!null\&quot; for any assigned instrumentation (optional)</param>
        /// <param name="systemId">One or multiple ids (comma list). Filter accepts \&quot;null\&quot; for all objects with no systems assigned or \&quot;!null\&quot; for any assigned system (optional)</param>
        /// <param name="createdAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="createdAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="createdAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAt">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="updatedAtFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="ownershipClaimed">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;serial_number&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, &#x60;last_seen_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AssetsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetsResponse>> GetAssetsAsyncWithHttpInfo (int? page = null, int? perPage = null, string include = null, string serialNumber = null, string productId = null, string productStatusId = null, string productCategoryId = null, string parentId = null, string manufacturerId = null, string statusId = null, string statusCode = null, string tenantId = null, string lastSeenAtFrom = null, string lastSeenAtTo = null, DateTime? productionDate = null, DateTime? productionDateFrom = null, DateTime? productionDateTo = null, string specificationsKey = null, string specificationsValue = null, string nodeId = null, string instrumentationId = null, string systemId = null, DateTime? createdAt = null, string createdAtFrom = null, string createdAtTo = null, DateTime? updatedAt = null, string updatedAtFrom = null, string updatedAtTo = null, bool? ownershipClaimed = null, string permission = null, string orderBy = null)
        {

            var localVarPath = "/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (serialNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serial_number", serialNumber)); // query parameter
            if (productId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_id", productId)); // query parameter
            if (productStatusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_status_id", productStatusId)); // query parameter
            if (productCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_category_id", productCategoryId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (manufacturerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manufacturer_id", manufacturerId)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (statusCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_code", statusCode)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (lastSeenAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_seen_at_from", lastSeenAtFrom)); // query parameter
            if (lastSeenAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_seen_at_to", lastSeenAtTo)); // query parameter
            if (productionDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "production_date", productionDate)); // query parameter
            if (productionDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "production_date_from", productionDateFrom)); // query parameter
            if (productionDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "production_date_to", productionDateTo)); // query parameter
            if (specificationsKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_key", specificationsKey)); // query parameter
            if (specificationsValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_value", specificationsValue)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "node_id", nodeId)); // query parameter
            if (instrumentationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "instrumentation_id", instrumentationId)); // query parameter
            if (systemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "system_id", systemId)); // query parameter
            if (createdAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at", createdAt)); // query parameter
            if (createdAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_from", createdAtFrom)); // query parameter
            if (createdAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_to", createdAtTo)); // query parameter
            if (updatedAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated_at", updatedAt)); // query parameter
            if (updatedAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated_at_from", updatedAtFrom)); // query parameter
            if (updatedAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated_at_to", updatedAtTo)); // query parameter
            if (ownershipClaimed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ownership_claimed", ownershipClaimed)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permission", permission)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetsResponse)));
        }

        /// <summary>
        /// Get all deliveries of one asset Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="dateOfShipment">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="senderId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="receiverId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="customerNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>DeliveriesResponse</returns>
        public DeliveriesResponse GetDeliveriesOfAsset (long? assetId, int? page = null, int? perPage = null, string number = null, string name = null, string statusId = null, DateTime? dateOfShipment = null, DateTime? dateOfShipmentFrom = null, DateTime? dateOfShipmentTo = null, string senderId = null, string receiverId = null, string customerNumber = null, string orderBy = null)
        {
             ApiResponse<DeliveriesResponse> localVarResponse = GetDeliveriesOfAssetWithHttpInfo(assetId, page, perPage, number, name, statusId, dateOfShipment, dateOfShipmentFrom, dateOfShipmentTo, senderId, receiverId, customerNumber, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all deliveries of one asset Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="dateOfShipment">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="senderId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="receiverId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="customerNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of DeliveriesResponse</returns>
        public ApiResponse< DeliveriesResponse > GetDeliveriesOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string number = null, string name = null, string statusId = null, DateTime? dateOfShipment = null, DateTime? dateOfShipmentFrom = null, DateTime? dateOfShipmentTo = null, string senderId = null, string receiverId = null, string customerNumber = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetDeliveriesOfAsset");

            var localVarPath = "/assets/{asset_id}/deliveries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (number != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "number", number)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (dateOfShipment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_of_shipment", dateOfShipment)); // query parameter
            if (dateOfShipmentFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_of_shipment_from", dateOfShipmentFrom)); // query parameter
            if (dateOfShipmentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_of_shipment_to", dateOfShipmentTo)); // query parameter
            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter
            if (receiverId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "receiver_id", receiverId)); // query parameter
            if (customerNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customer_number", customerNumber)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeliveriesOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeliveriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeliveriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeliveriesResponse)));
        }

        /// <summary>
        /// Get all deliveries of one asset Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="dateOfShipment">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="senderId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="receiverId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="customerNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of DeliveriesResponse</returns>
        public async System.Threading.Tasks.Task<DeliveriesResponse> GetDeliveriesOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string number = null, string name = null, string statusId = null, DateTime? dateOfShipment = null, DateTime? dateOfShipmentFrom = null, DateTime? dateOfShipmentTo = null, string senderId = null, string receiverId = null, string customerNumber = null, string orderBy = null)
        {
             ApiResponse<DeliveriesResponse> localVarResponse = await GetDeliveriesOfAssetAsyncWithHttpInfo(assetId, page, perPage, number, name, statusId, dateOfShipment, dateOfShipmentFrom, dateOfShipmentTo, senderId, receiverId, customerNumber, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all deliveries of one asset Returns a list of all deliveries that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="dateOfShipment">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="dateOfShipmentTo">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="senderId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="receiverId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="customerNumber">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (DeliveriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeliveriesResponse>> GetDeliveriesOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string number = null, string name = null, string statusId = null, DateTime? dateOfShipment = null, DateTime? dateOfShipmentFrom = null, DateTime? dateOfShipmentTo = null, string senderId = null, string receiverId = null, string customerNumber = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetDeliveriesOfAsset");

            var localVarPath = "/assets/{asset_id}/deliveries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (number != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "number", number)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (dateOfShipment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_of_shipment", dateOfShipment)); // query parameter
            if (dateOfShipmentFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_of_shipment_from", dateOfShipmentFrom)); // query parameter
            if (dateOfShipmentTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_of_shipment_to", dateOfShipmentTo)); // query parameter
            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter
            if (receiverId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "receiver_id", receiverId)); // query parameter
            if (customerNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customer_number", customerNumber)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeliveriesOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeliveriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeliveriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeliveriesResponse)));
        }

        /// <summary>
        /// Get all documents of an asset Returns a list of all documents that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments, categories.standards, eventdocuments&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="documentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="classificationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validAt">Expected date format is YYYY-MM-DD or YYYY-MM or YYYY (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>DocumentsResponse</returns>
        public DocumentsResponse GetDocumentsOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string documentVersion = null, string number = null, string statusId = null, string classificationId = null, string tenantId = null, string categoryId = null, DateTime? validFrom = null, DateTime? validUntil = null, DateTime? validAt = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<DocumentsResponse> localVarResponse = GetDocumentsOfAssetWithHttpInfo(assetId, page, perPage, include, name, documentVersion, number, statusId, classificationId, tenantId, categoryId, validFrom, validUntil, validAt, orderBy, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all documents of an asset Returns a list of all documents that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments, categories.standards, eventdocuments&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="documentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="classificationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validAt">Expected date format is YYYY-MM-DD or YYYY-MM or YYYY (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of DocumentsResponse</returns>
        public ApiResponse< DocumentsResponse > GetDocumentsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string documentVersion = null, string number = null, string statusId = null, string classificationId = null, string tenantId = null, string categoryId = null, DateTime? validFrom = null, DateTime? validUntil = null, DateTime? validAt = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetDocumentsOfAsset");

            var localVarPath = "/assets/{asset_id}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (documentVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_version", documentVersion)); // query parameter
            if (number != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "number", number)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (classificationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classification_id", classificationId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category_id", categoryId)); // query parameter
            if (validFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_from", validFrom)); // query parameter
            if (validUntil != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_until", validUntil)); // query parameter
            if (validAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_at", validAt)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsResponse)));
        }

        /// <summary>
        /// Get all documents of an asset Returns a list of all documents that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments, categories.standards, eventdocuments&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="documentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="classificationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validAt">Expected date format is YYYY-MM-DD or YYYY-MM or YYYY (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of DocumentsResponse</returns>
        public async System.Threading.Tasks.Task<DocumentsResponse> GetDocumentsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string documentVersion = null, string number = null, string statusId = null, string classificationId = null, string tenantId = null, string categoryId = null, DateTime? validFrom = null, DateTime? validUntil = null, DateTime? validAt = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<DocumentsResponse> localVarResponse = await GetDocumentsOfAssetAsyncWithHttpInfo(assetId, page, perPage, include, name, documentVersion, number, statusId, classificationId, tenantId, categoryId, validFrom, validUntil, validAt, orderBy, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all documents of an asset Returns a list of all documents that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;status, tenant, classification, categories, categories.parent, attachments, categories.standards, eventdocuments&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="documentVersion">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="number">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="classificationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="categoryId">One or multiple ids (comma list). By adding &#x60;+&#x60; after the id, the filter considers the given category and all its children (e.g. 3+). (optional)</param>
        /// <param name="validFrom">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validUntil">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="validAt">Expected date format is YYYY-MM-DD or YYYY-MM or YYYY (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (DocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentsResponse>> GetDocumentsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string documentVersion = null, string number = null, string statusId = null, string classificationId = null, string tenantId = null, string categoryId = null, DateTime? validFrom = null, DateTime? validUntil = null, DateTime? validAt = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetDocumentsOfAsset");

            var localVarPath = "/assets/{asset_id}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (documentVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_version", documentVersion)); // query parameter
            if (number != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "number", number)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (classificationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classification_id", classificationId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category_id", categoryId)); // query parameter
            if (validFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_from", validFrom)); // query parameter
            if (validUntil != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_until", validUntil)); // query parameter
            if (validAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid_at", validAt)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentsResponse)));
        }

        /// <summary>
        /// Get all events of one asset Returns a list of all events belonging to an asset in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;start_datetime&#x60;, &#x60;end_datetime&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>EventsResponse</returns>
        public EventsResponse GetEventsOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string statusId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string tenantId = null, string orderBy = null)
        {
             ApiResponse<EventsResponse> localVarResponse = GetEventsOfAssetWithHttpInfo(assetId, page, perPage, include, name, typeId, statusId, startDatetime, startDatetimeFrom, startDatetimeTo, endDatetime, endDatetimeFrom, endDatetimeTo, tenantId, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all events of one asset Returns a list of all events belonging to an asset in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;start_datetime&#x60;, &#x60;end_datetime&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of EventsResponse</returns>
        public ApiResponse< EventsResponse > GetEventsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string statusId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string tenantId = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetEventsOfAsset");

            var localVarPath = "/assets/{asset_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (startDatetime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_datetime", startDatetime)); // query parameter
            if (startDatetimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_datetime_from", startDatetimeFrom)); // query parameter
            if (startDatetimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_datetime_to", startDatetimeTo)); // query parameter
            if (endDatetime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_datetime", endDatetime)); // query parameter
            if (endDatetimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_datetime_from", endDatetimeFrom)); // query parameter
            if (endDatetimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_datetime_to", endDatetimeTo)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventsResponse)));
        }

        /// <summary>
        /// Get all events of one asset Returns a list of all events belonging to an asset in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;start_datetime&#x60;, &#x60;end_datetime&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of EventsResponse</returns>
        public async System.Threading.Tasks.Task<EventsResponse> GetEventsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string statusId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string tenantId = null, string orderBy = null)
        {
             ApiResponse<EventsResponse> localVarResponse = await GetEventsOfAssetAsyncWithHttpInfo(assetId, page, perPage, include, name, typeId, statusId, startDatetime, startDatetimeFrom, startDatetimeTo, endDatetime, endDatetimeFrom, endDatetimeTo, tenantId, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all events of one asset Returns a list of all events belonging to an asset in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;assets, instrumentations, status, type&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="startDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="startDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetime">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeFrom">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="endDatetimeTo">Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;start_datetime&#x60;, &#x60;end_datetime&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (EventsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventsResponse>> GetEventsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string statusId = null, string startDatetime = null, string startDatetimeFrom = null, string startDatetimeTo = null, string endDatetime = null, DateTime? endDatetimeFrom = null, string endDatetimeTo = null, string tenantId = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetEventsOfAsset");

            var localVarPath = "/assets/{asset_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (startDatetime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_datetime", startDatetime)); // query parameter
            if (startDatetimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_datetime_from", startDatetimeFrom)); // query parameter
            if (startDatetimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_datetime_to", startDatetimeTo)); // query parameter
            if (endDatetime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_datetime", endDatetime)); // query parameter
            if (endDatetimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_datetime_from", endDatetimeFrom)); // query parameter
            if (endDatetimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_datetime_to", endDatetimeTo)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EventsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventsResponse)));
        }

        /// <summary>
        /// Get all instrumentations of one asset Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="tag">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="criticality">Filter accepts undefined, low, medium or high (optional)</param>
        /// <param name="accessibility">Filter accepts undefined, easy, moderate or difficult (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;tag&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>InstrumentationsResponse</returns>
        public InstrumentationsResponse GetInstrumentationsOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, string tag = null, string statusId = null, string typeId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string criticality = null, string accessibility = null, string nodeId = null, string permission = null, string orderBy = null)
        {
             ApiResponse<InstrumentationsResponse> localVarResponse = GetInstrumentationsOfAssetWithHttpInfo(assetId, page, perPage, include, tag, statusId, typeId, parentId, tenantId, specificationsKey, specificationsValue, criticality, accessibility, nodeId, permission, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all instrumentations of one asset Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="tag">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="criticality">Filter accepts undefined, low, medium or high (optional)</param>
        /// <param name="accessibility">Filter accepts undefined, easy, moderate or difficult (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;tag&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of InstrumentationsResponse</returns>
        public ApiResponse< InstrumentationsResponse > GetInstrumentationsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string tag = null, string statusId = null, string typeId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string criticality = null, string accessibility = null, string nodeId = null, string permission = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetInstrumentationsOfAsset");

            var localVarPath = "/assets/{asset_id}/instrumentations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (specificationsKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_key", specificationsKey)); // query parameter
            if (specificationsValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_value", specificationsValue)); // query parameter
            if (criticality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "criticality", criticality)); // query parameter
            if (accessibility != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accessibility", accessibility)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "node_id", nodeId)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permission", permission)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstrumentationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstrumentationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstrumentationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstrumentationsResponse)));
        }

        /// <summary>
        /// Get all instrumentations of one asset Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="tag">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="criticality">Filter accepts undefined, low, medium or high (optional)</param>
        /// <param name="accessibility">Filter accepts undefined, easy, moderate or difficult (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;tag&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of InstrumentationsResponse</returns>
        public async System.Threading.Tasks.Task<InstrumentationsResponse> GetInstrumentationsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string tag = null, string statusId = null, string typeId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string criticality = null, string accessibility = null, string nodeId = null, string permission = null, string orderBy = null)
        {
             ApiResponse<InstrumentationsResponse> localVarResponse = await GetInstrumentationsOfAssetAsyncWithHttpInfo(assetId, page, perPage, include, tag, statusId, typeId, parentId, tenantId, specificationsKey, specificationsValue, criticality, accessibility, nodeId, permission, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all instrumentations of one asset Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="tag">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="statusId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="criticality">Filter accepts undefined, low, medium or high (optional)</param>
        /// <param name="accessibility">Filter accepts undefined, easy, moderate or difficult (optional)</param>
        /// <param name="nodeId">One or multiple ids (comma list). Filter acccepts \&quot;null\&quot; for all objects with no nodes assigned or \&quot;!null\&quot; for any assigned node (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;tag&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (InstrumentationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstrumentationsResponse>> GetInstrumentationsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string tag = null, string statusId = null, string typeId = null, string parentId = null, string tenantId = null, string specificationsKey = null, string specificationsValue = null, string criticality = null, string accessibility = null, string nodeId = null, string permission = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetInstrumentationsOfAsset");

            var localVarPath = "/assets/{asset_id}/instrumentations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (statusId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status_id", statusId)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (specificationsKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_key", specificationsKey)); // query parameter
            if (specificationsValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_value", specificationsValue)); // query parameter
            if (criticality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "criticality", criticality)); // query parameter
            if (accessibility != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accessibility", accessibility)); // query parameter
            if (nodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "node_id", nodeId)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permission", permission)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstrumentationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstrumentationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InstrumentationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstrumentationsResponse)));
        }

        /// <summary>
        /// Get all instrumentations an asset was assigned to Returns a list of all instrumentations history available in your scope which have been assigned to the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="_event">Filter accepts &#x60;create&#x60; or &#x60;destroy&#x60; (optional)</param>
        /// <param name="eventDatetimeFrom">Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="eventDatetimeTo">Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;event&#x60; or &#x60;event_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>AssetInstrumentationsHistoryResponse</returns>
        public AssetInstrumentationsHistoryResponse GetInstrumentationsOfAssetHistory (long? assetId, int? page = null, int? perPage = null, string instrumentationId = null, string _event = null, DateTime? eventDatetimeFrom = null, DateTime? eventDatetimeTo = null, string orderBy = null)
        {
             ApiResponse<AssetInstrumentationsHistoryResponse> localVarResponse = GetInstrumentationsOfAssetHistoryWithHttpInfo(assetId, page, perPage, instrumentationId, _event, eventDatetimeFrom, eventDatetimeTo, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all instrumentations an asset was assigned to Returns a list of all instrumentations history available in your scope which have been assigned to the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="_event">Filter accepts &#x60;create&#x60; or &#x60;destroy&#x60; (optional)</param>
        /// <param name="eventDatetimeFrom">Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="eventDatetimeTo">Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;event&#x60; or &#x60;event_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>ApiResponse of AssetInstrumentationsHistoryResponse</returns>
        public ApiResponse< AssetInstrumentationsHistoryResponse > GetInstrumentationsOfAssetHistoryWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string instrumentationId = null, string _event = null, DateTime? eventDatetimeFrom = null, DateTime? eventDatetimeTo = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetInstrumentationsOfAssetHistory");

            var localVarPath = "/assets/{asset_id}/instrumentations/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (instrumentationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "instrumentation_id", instrumentationId)); // query parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event", _event)); // query parameter
            if (eventDatetimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_datetime_from", eventDatetimeFrom)); // query parameter
            if (eventDatetimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_datetime_to", eventDatetimeTo)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstrumentationsOfAssetHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetInstrumentationsHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetInstrumentationsHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetInstrumentationsHistoryResponse)));
        }

        /// <summary>
        /// Get all instrumentations an asset was assigned to Returns a list of all instrumentations history available in your scope which have been assigned to the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="_event">Filter accepts &#x60;create&#x60; or &#x60;destroy&#x60; (optional)</param>
        /// <param name="eventDatetimeFrom">Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="eventDatetimeTo">Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;event&#x60; or &#x60;event_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of AssetInstrumentationsHistoryResponse</returns>
        public async System.Threading.Tasks.Task<AssetInstrumentationsHistoryResponse> GetInstrumentationsOfAssetHistoryAsync (long? assetId, int? page = null, int? perPage = null, string instrumentationId = null, string _event = null, DateTime? eventDatetimeFrom = null, DateTime? eventDatetimeTo = null, string orderBy = null)
        {
             ApiResponse<AssetInstrumentationsHistoryResponse> localVarResponse = await GetInstrumentationsOfAssetHistoryAsyncWithHttpInfo(assetId, page, perPage, instrumentationId, _event, eventDatetimeFrom, eventDatetimeTo, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all instrumentations an asset was assigned to Returns a list of all instrumentations history available in your scope which have been assigned to the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="instrumentationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="_event">Filter accepts &#x60;create&#x60; or &#x60;destroy&#x60; (optional)</param>
        /// <param name="eventDatetimeFrom">Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="eventDatetimeTo">Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;event&#x60; or &#x60;event_datetime&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of ApiResponse (AssetInstrumentationsHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetInstrumentationsHistoryResponse>> GetInstrumentationsOfAssetHistoryAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string instrumentationId = null, string _event = null, DateTime? eventDatetimeFrom = null, DateTime? eventDatetimeTo = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetInstrumentationsOfAssetHistory");

            var localVarPath = "/assets/{asset_id}/instrumentations/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (instrumentationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "instrumentation_id", instrumentationId)); // query parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event", _event)); // query parameter
            if (eventDatetimeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_datetime_from", eventDatetimeFrom)); // query parameter
            if (eventDatetimeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event_datetime_to", eventDatetimeTo)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstrumentationsOfAssetHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetInstrumentationsHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetInstrumentationsHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetInstrumentationsHistoryResponse)));
        }

        /// <summary>
        /// Get all nodes of one asset Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="hidden">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>NodesResponse</returns>
        public NodesResponse GetNodesOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, bool? hidden = null, string permission = null, string orderBy = null)
        {
             ApiResponse<NodesResponse> localVarResponse = GetNodesOfAssetWithHttpInfo(assetId, page, perPage, include, name, typeId, parentId, tenantId, hidden, permission, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all nodes of one asset Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="hidden">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of NodesResponse</returns>
        public ApiResponse< NodesResponse > GetNodesOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, bool? hidden = null, string permission = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetNodesOfAsset");

            var localVarPath = "/assets/{asset_id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (hidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidden", hidden)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permission", permission)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodesOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodesResponse)));
        }

        /// <summary>
        /// Get all nodes of one asset Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="hidden">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of NodesResponse</returns>
        public async System.Threading.Tasks.Task<NodesResponse> GetNodesOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, bool? hidden = null, string permission = null, string orderBy = null)
        {
             ApiResponse<NodesResponse> localVarResponse = await GetNodesOfAssetAsyncWithHttpInfo(assetId, page, perPage, include, name, typeId, parentId, tenantId, hidden, permission, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all nodes of one asset Returns a list of all nodes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="hidden">Filter accepts true or false (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (NodesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodesResponse>> GetNodesOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, bool? hidden = null, string permission = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetNodesOfAsset");

            var localVarPath = "/assets/{asset_id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (hidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidden", hidden)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permission", permission)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodesOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodesResponse)));
        }

        /// <summary>
        /// Get a range of software of one asset Returns a list of software. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;software_attachments&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="softwareTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;version_number&#x60;, &#x60;name&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>SoftwaresResponse</returns>
        public SoftwaresResponse GetSoftwaresOfSoftware (long? assetId, int? page = null, int? perPage = null, string include = null, string softwareTypeId = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<SoftwaresResponse> localVarResponse = GetSoftwaresOfSoftwareWithHttpInfo(assetId, page, perPage, include, softwareTypeId, orderBy, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a range of software of one asset Returns a list of software. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;software_attachments&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="softwareTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;version_number&#x60;, &#x60;name&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>ApiResponse of SoftwaresResponse</returns>
        public ApiResponse< SoftwaresResponse > GetSoftwaresOfSoftwareWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string softwareTypeId = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetSoftwaresOfSoftware");

            var localVarPath = "/assets/{asset_id}/softwares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (softwareTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "software_type_id", softwareTypeId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSoftwaresOfSoftware", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwaresResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwaresResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwaresResponse)));
        }

        /// <summary>
        /// Get a range of software of one asset Returns a list of software. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;software_attachments&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="softwareTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;version_number&#x60;, &#x60;name&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of SoftwaresResponse</returns>
        public async System.Threading.Tasks.Task<SoftwaresResponse> GetSoftwaresOfSoftwareAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string softwareTypeId = null, string orderBy = null, string acceptLanguage = null)
        {
             ApiResponse<SoftwaresResponse> localVarResponse = await GetSoftwaresOfSoftwareAsyncWithHttpInfo(assetId, page, perPage, include, softwareTypeId, orderBy, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a range of software of one asset Returns a list of software. Parameters supporting translation: &#x60;&#x60;&#x60;name, description&#x60;&#x60;&#x60;. To get a translation set Accept-Language. Possible include values: &#x60;&#x60;&#x60;software_attachments&#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="softwareTypeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;version_number&#x60;, &#x60;name&#x60;, &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <param name="acceptLanguage">The client&#x27;s accepted languages. One or several (e.g. fr,de,en) (optional)</param>
        /// <returns>Task of ApiResponse (SoftwaresResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SoftwaresResponse>> GetSoftwaresOfSoftwareAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string softwareTypeId = null, string orderBy = null, string acceptLanguage = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetSoftwaresOfSoftware");

            var localVarPath = "/assets/{asset_id}/softwares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (softwareTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "software_type_id", softwareTypeId)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSoftwaresOfSoftware", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwaresResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SoftwaresResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwaresResponse)));
        }

        /// <summary>
        /// Get the history of one specification attribute of an asset. This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">the exact key</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="sourceTimestampFrom">source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="sourceTimestampTo">source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtFrom">updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>SpecificationHistoryResponse</returns>
        public SpecificationHistoryResponse GetSpecificationHistoryOfAsset (long? assetId, string key, int? page = null, int? perPage = null, DateTime? sourceTimestampFrom = null, DateTime? sourceTimestampTo = null, DateTime? updatedAtFrom = null, DateTime? updatedAtTo = null, string orderBy = null)
        {
             ApiResponse<SpecificationHistoryResponse> localVarResponse = GetSpecificationHistoryOfAssetWithHttpInfo(assetId, key, page, perPage, sourceTimestampFrom, sourceTimestampTo, updatedAtFrom, updatedAtTo, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the history of one specification attribute of an asset. This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">the exact key</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="sourceTimestampFrom">source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="sourceTimestampTo">source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtFrom">updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>ApiResponse of SpecificationHistoryResponse</returns>
        public ApiResponse< SpecificationHistoryResponse > GetSpecificationHistoryOfAssetWithHttpInfo (long? assetId, string key, int? page = null, int? perPage = null, DateTime? sourceTimestampFrom = null, DateTime? sourceTimestampTo = null, DateTime? updatedAtFrom = null, DateTime? updatedAtTo = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetSpecificationHistoryOfAsset");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AssetApi->GetSpecificationHistoryOfAsset");

            var localVarPath = "/assets/{asset_id}/specifications/{key}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sourceTimestampFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_timestamp_from", sourceTimestampFrom)); // query parameter
            if (sourceTimestampTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_timestamp_to", sourceTimestampTo)); // query parameter
            if (updatedAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated_at_from", updatedAtFrom)); // query parameter
            if (updatedAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated_at_to", updatedAtTo)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificationHistoryOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SpecificationHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SpecificationHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SpecificationHistoryResponse)));
        }

        /// <summary>
        /// Get the history of one specification attribute of an asset. This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">the exact key</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="sourceTimestampFrom">source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="sourceTimestampTo">source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtFrom">updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of SpecificationHistoryResponse</returns>
        public async System.Threading.Tasks.Task<SpecificationHistoryResponse> GetSpecificationHistoryOfAssetAsync (long? assetId, string key, int? page = null, int? perPage = null, DateTime? sourceTimestampFrom = null, DateTime? sourceTimestampTo = null, DateTime? updatedAtFrom = null, DateTime? updatedAtTo = null, string orderBy = null)
        {
             ApiResponse<SpecificationHistoryResponse> localVarResponse = await GetSpecificationHistoryOfAssetAsyncWithHttpInfo(assetId, key, page, perPage, sourceTimestampFrom, sourceTimestampTo, updatedAtFrom, updatedAtTo, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the history of one specification attribute of an asset. This might be useful for history data. The response contains a collection of historic values and when they&#x60;ve been updated. Since this can be a lot of data the service uses pagination. The history can be filtered by using a date range of source_timestamp and/or updated_at. Please consider that source_timestamp is not required and update on the attribute without giving a source_timestamp wont be included in the resulting response
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">the exact key</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="sourceTimestampFrom">source_timestamp filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="sourceTimestampTo">source_timestamp filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtFrom">updated_at filter from. Starting with + will include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="updatedAtTo">updated_at filter to. Ending with + will include the next value as well. Expected date format is YYYY-MM-DDThh:mm:ss (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;source_timestamp&#x60; or &#x60;updated_at&#x60;, add &#x60;-&#x60; as a prefix for descending order. (optional)</param>
        /// <returns>Task of ApiResponse (SpecificationHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SpecificationHistoryResponse>> GetSpecificationHistoryOfAssetAsyncWithHttpInfo (long? assetId, string key, int? page = null, int? perPage = null, DateTime? sourceTimestampFrom = null, DateTime? sourceTimestampTo = null, DateTime? updatedAtFrom = null, DateTime? updatedAtTo = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetSpecificationHistoryOfAsset");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling AssetApi->GetSpecificationHistoryOfAsset");

            var localVarPath = "/assets/{asset_id}/specifications/{key}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (sourceTimestampFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_timestamp_from", sourceTimestampFrom)); // query parameter
            if (sourceTimestampTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_timestamp_to", sourceTimestampTo)); // query parameter
            if (updatedAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated_at_from", updatedAtFrom)); // query parameter
            if (updatedAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated_at_to", updatedAtTo)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificationHistoryOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SpecificationHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SpecificationHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SpecificationHistoryResponse)));
        }

        /// <summary>
        /// Get existing asset specification keys Returns the existing specification keys in all readable assets.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>SpecificationKeys</returns>
        public SpecificationKeys GetSpecificationKeysOfAssets (string key = null, bool? uiVisible = null)
        {
             ApiResponse<SpecificationKeys> localVarResponse = GetSpecificationKeysOfAssetsWithHttpInfo(key, uiVisible);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get existing asset specification keys Returns the existing specification keys in all readable assets.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>ApiResponse of SpecificationKeys</returns>
        public ApiResponse< SpecificationKeys > GetSpecificationKeysOfAssetsWithHttpInfo (string key = null, bool? uiVisible = null)
        {

            var localVarPath = "/asset/specification_keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (uiVisible != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ui_visible", uiVisible)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificationKeysOfAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SpecificationKeys>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SpecificationKeys) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SpecificationKeys)));
        }

        /// <summary>
        /// Get existing asset specification keys Returns the existing specification keys in all readable assets.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>Task of SpecificationKeys</returns>
        public async System.Threading.Tasks.Task<SpecificationKeys> GetSpecificationKeysOfAssetsAsync (string key = null, bool? uiVisible = null)
        {
             ApiResponse<SpecificationKeys> localVarResponse = await GetSpecificationKeysOfAssetsAsyncWithHttpInfo(key, uiVisible);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get existing asset specification keys Returns the existing specification keys in all readable assets.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>Task of ApiResponse (SpecificationKeys)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SpecificationKeys>> GetSpecificationKeysOfAssetsAsyncWithHttpInfo (string key = null, bool? uiVisible = null)
        {

            var localVarPath = "/asset/specification_keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (uiVisible != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ui_visible", uiVisible)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificationKeysOfAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SpecificationKeys>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SpecificationKeys) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SpecificationKeys)));
        }

        /// <summary>
        /// Get specifications of an asset Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>SpecificationsUIVisibleResponse</returns>
        public SpecificationsUIVisibleResponse GetSpecificationsOfAsset (long? assetId, string key = null, bool? uiVisible = null)
        {
             ApiResponse<SpecificationsUIVisibleResponse> localVarResponse = GetSpecificationsOfAssetWithHttpInfo(assetId, key, uiVisible);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specifications of an asset Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>ApiResponse of SpecificationsUIVisibleResponse</returns>
        public ApiResponse< SpecificationsUIVisibleResponse > GetSpecificationsOfAssetWithHttpInfo (long? assetId, string key = null, bool? uiVisible = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetSpecificationsOfAsset");

            var localVarPath = "/assets/{asset_id}/specifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (uiVisible != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ui_visible", uiVisible)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SpecificationsUIVisibleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SpecificationsUIVisibleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SpecificationsUIVisibleResponse)));
        }

        /// <summary>
        /// Get specifications of an asset Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>Task of SpecificationsUIVisibleResponse</returns>
        public async System.Threading.Tasks.Task<SpecificationsUIVisibleResponse> GetSpecificationsOfAssetAsync (long? assetId, string key = null, bool? uiVisible = null)
        {
             ApiResponse<SpecificationsUIVisibleResponse> localVarResponse = await GetSpecificationsOfAssetAsyncWithHttpInfo(assetId, key, uiVisible);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specifications of an asset Returns the specification of an object in your accessible scope. If no specifications are defined, this is just an empty object. Specification must have the form below.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Id of the specified asset</param>
        /// <param name="key">Filter accepts &#x27;*&#x27; as wildcard (optional)</param>
        /// <param name="uiVisible"> (optional)</param>
        /// <returns>Task of ApiResponse (SpecificationsUIVisibleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SpecificationsUIVisibleResponse>> GetSpecificationsOfAssetAsyncWithHttpInfo (long? assetId, string key = null, bool? uiVisible = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetSpecificationsOfAsset");

            var localVarPath = "/assets/{asset_id}/specifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (key != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter
            if (uiVisible != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ui_visible", uiVisible)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpecificationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SpecificationsUIVisibleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SpecificationsUIVisibleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SpecificationsUIVisibleResponse)));
        }

        /// <summary>
        /// Get all subscriptions of asset Returns a list of all subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>SubscriptionsResponse</returns>
        public SubscriptionsResponse GetSubscriptionsOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null)
        {
             ApiResponse<SubscriptionsResponse> localVarResponse = GetSubscriptionsOfAssetWithHttpInfo(assetId, page, perPage, include, userId, clientApplicationId, externalReference, status, notificationStatus, specificationsKey, specificationsValue, startDate, endDate, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all subscriptions of asset Returns a list of all subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of SubscriptionsResponse</returns>
        public ApiResponse< SubscriptionsResponse > GetSubscriptionsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetSubscriptionsOfAsset");

            var localVarPath = "/assets/{asset_id}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (clientApplicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_application_id", clientApplicationId)); // query parameter
            if (externalReference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_reference", externalReference)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (notificationStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notification_status", notificationStatus)); // query parameter
            if (specificationsKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_key", specificationsKey)); // query parameter
            if (specificationsValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_value", specificationsValue)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionsResponse)));
        }

        /// <summary>
        /// Get all subscriptions of asset Returns a list of all subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of SubscriptionsResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionsResponse> GetSubscriptionsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null)
        {
             ApiResponse<SubscriptionsResponse> localVarResponse = await GetSubscriptionsOfAssetAsyncWithHttpInfo(assetId, page, perPage, include, userId, clientApplicationId, externalReference, status, notificationStatus, specificationsKey, specificationsValue, startDate, endDate, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all subscriptions of asset Returns a list of all subscriptions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;user, user.usage, specifications, specifications[key1,key2]&#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="userId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="clientApplicationId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="externalReference">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="status">Filter by status - no wildcard support (optional)</param>
        /// <param name="notificationStatus">Filter by notification status - no wildcard support (optional)</param>
        /// <param name="specificationsKey">Filter accepts &#x60;*&#x60; as wildcard (if used as single specifications filter), supports comma list of keys in connection with specifications_value filter (optional)</param>
        /// <param name="specificationsValue">Filter accepts &#x60;*&#x60; as wildcard, supports comma list of values in connection with specifications_key filter. Does not work for vectors (optional)</param>
        /// <param name="startDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="endDate">Expected date format is YYYY-MM-DD (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (SubscriptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionsResponse>> GetSubscriptionsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, long? userId = null, long? clientApplicationId = null, string externalReference = null, string status = null, string notificationStatus = null, string specificationsKey = null, string specificationsValue = null, DateTime? startDate = null, DateTime? endDate = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetSubscriptionsOfAsset");

            var localVarPath = "/assets/{asset_id}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (clientApplicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_application_id", clientApplicationId)); // query parameter
            if (externalReference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_reference", externalReference)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (notificationStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "notification_status", notificationStatus)); // query parameter
            if (specificationsKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_key", specificationsKey)); // query parameter
            if (specificationsValue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "specifications_value", specificationsValue)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubscriptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionsResponse)));
        }

        /// <summary>
        /// Get all systems of one Asset Returns a list of all systems that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;pictures, specifications, specifications[key1,key2], tenant, parent, status, type, type.tenant, type.parent &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>SystemsResponse</returns>
        public SystemsResponse GetSystemsOfAsset (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, string permission = null, string orderBy = null)
        {
             ApiResponse<SystemsResponse> localVarResponse = GetSystemsOfAssetWithHttpInfo(assetId, page, perPage, include, name, typeId, parentId, tenantId, permission, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all systems of one Asset Returns a list of all systems that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;pictures, specifications, specifications[key1,key2], tenant, parent, status, type, type.tenant, type.parent &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>ApiResponse of SystemsResponse</returns>
        public ApiResponse< SystemsResponse > GetSystemsOfAssetWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, string permission = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetSystemsOfAsset");

            var localVarPath = "/assets/{asset_id}/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permission", permission)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SystemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemsResponse)));
        }

        /// <summary>
        /// Get all systems of one Asset Returns a list of all systems that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;pictures, specifications, specifications[key1,key2], tenant, parent, status, type, type.tenant, type.parent &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of SystemsResponse</returns>
        public async System.Threading.Tasks.Task<SystemsResponse> GetSystemsOfAssetAsync (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, string permission = null, string orderBy = null)
        {
             ApiResponse<SystemsResponse> localVarResponse = await GetSystemsOfAssetAsyncWithHttpInfo(assetId, page, perPage, include, name, typeId, parentId, tenantId, permission, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all systems of one Asset Returns a list of all systems that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.  Possible include values: &#x60;&#x60;&#x60;pictures, specifications, specifications[key1,key2], tenant, parent, status, type, type.tenant, type.parent &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The resource defined in the URL</param>
        /// <param name="page">Page number to load (optional)</param>
        /// <param name="perPage">Number of items to load per page (optional)</param>
        /// <param name="include">Comma separated list of objects to include in response (optional)</param>
        /// <param name="name">Filter accepts &#x60;*&#x60; as wildcard (optional)</param>
        /// <param name="typeId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="parentId">One or multiple ids (comma list). \&quot;null\&quot; to retrieve all objects without parent, \&quot;!null\&quot; for all objects with parent. (optional)</param>
        /// <param name="tenantId">One or multiple ids (comma list). Expected id format is integer (optional)</param>
        /// <param name="permission">Filter by permission of current user. Accepts &#x60;can_permit&#x60;, &#x60;can_delete&#x60;, &#x60;can_update&#x60;, &#x60;can_read&#x60; (default) (optional)</param>
        /// <param name="orderBy">Order result by attribute value, accepts &#x60;id&#x60;, &#x60;name&#x60;, &#x60;created_at&#x60; or &#x60;updated_at&#x60;. Add &#x60;-&#x60; as a prefix for descending order. Default value is &#x60;id&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (SystemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SystemsResponse>> GetSystemsOfAssetAsyncWithHttpInfo (long? assetId, int? page = null, int? perPage = null, string include = null, string name = null, string typeId = null, string parentId = null, string tenantId = null, string permission = null, string orderBy = null)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->GetSystemsOfAsset");

            var localVarPath = "/assets/{asset_id}/systems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type_id", typeId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parent_id", parentId)); // query parameter
            if (tenantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_id", tenantId)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "permission", permission)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSystemsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SystemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SystemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SystemsResponse)));
        }

        /// <summary>
        /// Remove add_ons from an asset Remove one or more add_ons from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the add_ons will be removed</param>
        /// <returns></returns>
        public void RemoveAddOnsFromAsset (AddOnIDs body, long? assetId)
        {
             RemoveAddOnsFromAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Remove add_ons from an asset Remove one or more add_ons from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the add_ons will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveAddOnsFromAssetWithHttpInfo (AddOnIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveAddOnsFromAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveAddOnsFromAsset");

            var localVarPath = "/assets/{asset_id}/add_ons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAddOnsFromAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove add_ons from an asset Remove one or more add_ons from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the add_ons will be removed</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAddOnsFromAssetAsync (AddOnIDs body, long? assetId)
        {
             await RemoveAddOnsFromAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Remove add_ons from an asset Remove one or more add_ons from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the add_ons will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAddOnsFromAssetAsyncWithHttpInfo (AddOnIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveAddOnsFromAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveAddOnsFromAsset");

            var localVarPath = "/assets/{asset_id}/add_ons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAddOnsFromAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove deliveries from an asset Remove one or more deliveries from an asset in your accessible scope.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the deliveries will be removed</param>
        /// <returns></returns>
        public void RemoveDeliveriesFromAsset (DeliveryIDs body, long? assetId)
        {
             RemoveDeliveriesFromAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Remove deliveries from an asset Remove one or more deliveries from an asset in your accessible scope.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the deliveries will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveDeliveriesFromAssetWithHttpInfo (DeliveryIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveDeliveriesFromAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveDeliveriesFromAsset");

            var localVarPath = "/assets/{asset_id}/deliveries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDeliveriesFromAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove deliveries from an asset Remove one or more deliveries from an asset in your accessible scope.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the deliveries will be removed</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveDeliveriesFromAssetAsync (DeliveryIDs body, long? assetId)
        {
             await RemoveDeliveriesFromAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Remove deliveries from an asset Remove one or more deliveries from an asset in your accessible scope.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the deliveries will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDeliveriesFromAssetAsyncWithHttpInfo (DeliveryIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveDeliveriesFromAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveDeliveriesFromAsset");

            var localVarPath = "/assets/{asset_id}/deliveries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDeliveriesFromAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove documents from an asset Remove one or more documents from an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the documents will be removed</param>
        /// <returns></returns>
        public void RemoveDocumentsFromAsset (DocumentIDs body, long? assetId)
        {
             RemoveDocumentsFromAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Remove documents from an asset Remove one or more documents from an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the documents will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveDocumentsFromAssetWithHttpInfo (DocumentIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveDocumentsFromAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveDocumentsFromAsset");

            var localVarPath = "/assets/{asset_id}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDocumentsFromAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove documents from an asset Remove one or more documents from an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the documents will be removed</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveDocumentsFromAssetAsync (DocumentIDs body, long? assetId)
        {
             await RemoveDocumentsFromAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Remove documents from an asset Remove one or more documents from an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the documents will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDocumentsFromAssetAsyncWithHttpInfo (DocumentIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveDocumentsFromAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveDocumentsFromAsset");

            var localVarPath = "/assets/{asset_id}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDocumentsFromAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove events from an asset Remove one or more events from an asset in your accessible scope. If the event has no more related assets, the event will be deleted
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the events will removed.</param>
        /// <returns></returns>
        public void RemoveEventFromAsset (Events body, long? assetId)
        {
             RemoveEventFromAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Remove events from an asset Remove one or more events from an asset in your accessible scope. If the event has no more related assets, the event will be deleted
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the events will removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveEventFromAssetWithHttpInfo (Events body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveEventFromAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveEventFromAsset");

            var localVarPath = "/assets/{asset_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveEventFromAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove events from an asset Remove one or more events from an asset in your accessible scope. If the event has no more related assets, the event will be deleted
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the events will removed.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveEventFromAssetAsync (Events body, long? assetId)
        {
             await RemoveEventFromAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Remove events from an asset Remove one or more events from an asset in your accessible scope. If the event has no more related assets, the event will be deleted
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the events will removed.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveEventFromAssetAsyncWithHttpInfo (Events body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveEventFromAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveEventFromAsset");

            var localVarPath = "/assets/{asset_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveEventFromAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove instrumentations from an asset Remove one or more instrumentations from an asset in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the instrumentations will be removed</param>
        /// <returns></returns>
        public void RemoveInstrumentationsOfAsset (InstrumentationIDs body, long? assetId)
        {
             RemoveInstrumentationsOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Remove instrumentations from an asset Remove one or more instrumentations from an asset in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the instrumentations will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveInstrumentationsOfAssetWithHttpInfo (InstrumentationIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveInstrumentationsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveInstrumentationsOfAsset");

            var localVarPath = "/assets/{asset_id}/instrumentations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveInstrumentationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove instrumentations from an asset Remove one or more instrumentations from an asset in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the instrumentations will be removed</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveInstrumentationsOfAssetAsync (InstrumentationIDs body, long? assetId)
        {
             await RemoveInstrumentationsOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Remove instrumentations from an asset Remove one or more instrumentations from an asset in your accessible scope. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the instrumentations will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveInstrumentationsOfAssetAsyncWithHttpInfo (InstrumentationIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveInstrumentationsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveInstrumentationsOfAsset");

            var localVarPath = "/assets/{asset_id}/instrumentations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveInstrumentationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove nodes from an asset Remove one or more nodes from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the nodes will be removed</param>
        /// <returns></returns>
        public void RemoveNodesFromAsset (NodeIDs body, long? assetId)
        {
             RemoveNodesFromAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Remove nodes from an asset Remove one or more nodes from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the nodes will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveNodesFromAssetWithHttpInfo (NodeIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveNodesFromAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveNodesFromAsset");

            var localVarPath = "/assets/{asset_id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveNodesFromAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove nodes from an asset Remove one or more nodes from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the nodes will be removed</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveNodesFromAssetAsync (NodeIDs body, long? assetId)
        {
             await RemoveNodesFromAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Remove nodes from an asset Remove one or more nodes from an asset in your accessible scope. &#x60;This action&#x60; requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the asset from which the nodes will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveNodesFromAssetAsyncWithHttpInfo (NodeIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveNodesFromAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveNodesFromAsset");

            var localVarPath = "/assets/{asset_id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveNodesFromAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove software from an asset Remove one or more software from an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the product from which the software will be removed</param>
        /// <returns></returns>
        public void RemoveSoftwaresOfAsset (SoftwareIDs body, long? assetId)
        {
             RemoveSoftwaresOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Remove software from an asset Remove one or more software from an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the product from which the software will be removed</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveSoftwaresOfAssetWithHttpInfo (SoftwareIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveSoftwaresOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveSoftwaresOfAsset");

            var localVarPath = "/assets/{asset_id}/softwares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveSoftwaresOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove software from an asset Remove one or more software from an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the product from which the software will be removed</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveSoftwaresOfAssetAsync (SoftwareIDs body, long? assetId)
        {
             await RemoveSoftwaresOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Remove software from an asset Remove one or more software from an asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be removed.</param>
        /// <param name="assetId">Id of the product from which the software will be removed</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveSoftwaresOfAssetAsyncWithHttpInfo (SoftwareIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RemoveSoftwaresOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RemoveSoftwaresOfAsset");

            var localVarPath = "/assets/{asset_id}/softwares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveSoftwaresOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Rename a specification key Rename one specification key of an asset in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted to lower-case.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications object to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns></returns>
        public void RenameSpecificationsOfAsset (SpecificationsRename body, long? assetId)
        {
             RenameSpecificationsOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Rename a specification key Rename one specification key of an asset in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted to lower-case.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications object to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RenameSpecificationsOfAssetWithHttpInfo (SpecificationsRename body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RenameSpecificationsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RenameSpecificationsOfAsset");

            var localVarPath = "/assets/{asset_id}/specifications/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenameSpecificationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Rename a specification key Rename one specification key of an asset in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted to lower-case.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications object to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RenameSpecificationsOfAssetAsync (SpecificationsRename body, long? assetId)
        {
             await RenameSpecificationsOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Rename a specification key Rename one specification key of an asset in your accessible scope. The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted to lower-case.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications object to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RenameSpecificationsOfAssetAsyncWithHttpInfo (SpecificationsRename body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->RenameSpecificationsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->RenameSpecificationsOfAsset");

            var localVarPath = "/assets/{asset_id}/specifications/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenameSpecificationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the add_ons of an asset Replaces all add_ons belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the add_ons will be replaced</param>
        /// <returns></returns>
        public void ReplaceAddOnsOfAsset (AddOnIDs body, long? assetId)
        {
             ReplaceAddOnsOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Replace the add_ons of an asset Replaces all add_ons belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the add_ons will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReplaceAddOnsOfAssetWithHttpInfo (AddOnIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->ReplaceAddOnsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->ReplaceAddOnsOfAsset");

            var localVarPath = "/assets/{asset_id}/add_ons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAddOnsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the add_ons of an asset Replaces all add_ons belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the add_ons will be replaced</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceAddOnsOfAssetAsync (AddOnIDs body, long? assetId)
        {
             await ReplaceAddOnsOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Replace the add_ons of an asset Replaces all add_ons belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the add_on.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the add_ons will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceAddOnsOfAssetAsyncWithHttpInfo (AddOnIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->ReplaceAddOnsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->ReplaceAddOnsOfAsset");

            var localVarPath = "/assets/{asset_id}/add_ons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAddOnsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the deliveries of an asset Replaces all deliveries belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the deliveries will be replaced</param>
        /// <returns></returns>
        public void ReplaceDeliveriesOfAsset (DeliveryIDs body, long? assetId)
        {
             ReplaceDeliveriesOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Replace the deliveries of an asset Replaces all deliveries belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the deliveries will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReplaceDeliveriesOfAssetWithHttpInfo (DeliveryIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->ReplaceDeliveriesOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->ReplaceDeliveriesOfAsset");

            var localVarPath = "/assets/{asset_id}/deliveries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceDeliveriesOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the deliveries of an asset Replaces all deliveries belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the deliveries will be replaced</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceDeliveriesOfAssetAsync (DeliveryIDs body, long? assetId)
        {
             await ReplaceDeliveriesOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Replace the deliveries of an asset Replaces all deliveries belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the deliveries will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceDeliveriesOfAssetAsyncWithHttpInfo (DeliveryIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->ReplaceDeliveriesOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->ReplaceDeliveriesOfAsset");

            var localVarPath = "/assets/{asset_id}/deliveries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceDeliveriesOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the documents of an asset Replaces all documents belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the documents will be replaced</param>
        /// <returns></returns>
        public void ReplaceDocumentsOfAsset (DocumentIDs body, long? assetId)
        {
             ReplaceDocumentsOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Replace the documents of an asset Replaces all documents belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the documents will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReplaceDocumentsOfAssetWithHttpInfo (DocumentIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->ReplaceDocumentsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->ReplaceDocumentsOfAsset");

            var localVarPath = "/assets/{asset_id}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceDocumentsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the documents of an asset Replaces all documents belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the documents will be replaced</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceDocumentsOfAssetAsync (DocumentIDs body, long? assetId)
        {
             await ReplaceDocumentsOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Replace the documents of an asset Replaces all documents belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the documents will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceDocumentsOfAssetAsyncWithHttpInfo (DocumentIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->ReplaceDocumentsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->ReplaceDocumentsOfAsset");

            var localVarPath = "/assets/{asset_id}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceDocumentsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the instrumentations of an asset Replaces all instrumentations belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the instrumentations will be replaced</param>
        /// <returns></returns>
        public void ReplaceInstrumentationsOfAsset (InstrumentationIDs body, long? assetId)
        {
             ReplaceInstrumentationsOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Replace the instrumentations of an asset Replaces all instrumentations belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the instrumentations will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReplaceInstrumentationsOfAssetWithHttpInfo (InstrumentationIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->ReplaceInstrumentationsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->ReplaceInstrumentationsOfAsset");

            var localVarPath = "/assets/{asset_id}/instrumentations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceInstrumentationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the instrumentations of an asset Replaces all instrumentations belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the instrumentations will be replaced</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceInstrumentationsOfAssetAsync (InstrumentationIDs body, long? assetId)
        {
             await ReplaceInstrumentationsOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Replace the instrumentations of an asset Replaces all instrumentations belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the instrumentation.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the instrumentations will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceInstrumentationsOfAssetAsyncWithHttpInfo (InstrumentationIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->ReplaceInstrumentationsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->ReplaceInstrumentationsOfAsset");

            var localVarPath = "/assets/{asset_id}/instrumentations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceInstrumentationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the nodes of an asset Replaces all nodes belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the nodes will be replaced</param>
        /// <returns></returns>
        public void ReplaceNodesOfAsset (NodeIDs body, long? assetId)
        {
             ReplaceNodesOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Replace the nodes of an asset Replaces all nodes belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the nodes will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReplaceNodesOfAssetWithHttpInfo (NodeIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->ReplaceNodesOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->ReplaceNodesOfAsset");

            var localVarPath = "/assets/{asset_id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNodesOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the nodes of an asset Replaces all nodes belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the nodes will be replaced</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceNodesOfAssetAsync (NodeIDs body, long? assetId)
        {
             await ReplaceNodesOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Replace the nodes of an asset Replaces all nodes belonging to an asset in your accessible scope. You can send a list of resources that will replace all previous values. This action requires &#x60;can_permit&#x60; permission on the asset and on the node.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the nodes will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceNodesOfAssetAsyncWithHttpInfo (NodeIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->ReplaceNodesOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->ReplaceNodesOfAsset");

            var localVarPath = "/assets/{asset_id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNodesOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the software of an asset Replaces all software belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the software will be replaced</param>
        /// <returns></returns>
        public void ReplaceSoftwaresOfAsset (SoftwareIDs body, long? assetId)
        {
             ReplaceSoftwaresOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Replace the software of an asset Replaces all software belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the software will be replaced</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReplaceSoftwaresOfAssetWithHttpInfo (SoftwareIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->ReplaceSoftwaresOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->ReplaceSoftwaresOfAsset");

            var localVarPath = "/assets/{asset_id}/softwares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceSoftwaresOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace the software of an asset Replaces all software belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the software will be replaced</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceSoftwaresOfAssetAsync (SoftwareIDs body, long? assetId)
        {
             await ReplaceSoftwaresOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Replace the software of an asset Replaces all software belonging to an asset. You can send a list of resources that will replace all previous values.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Resources that shall be replaced</param>
        /// <param name="assetId">Id of the asset of which the software will be replaced</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceSoftwaresOfAssetAsyncWithHttpInfo (SoftwareIDs body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->ReplaceSoftwaresOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->ReplaceSoftwaresOfAsset");

            var localVarPath = "/assets/{asset_id}/softwares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceSoftwaresOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update an asset Update accessible parameters of the requested resource in your accessible scope.  To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent and on the current asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated. To remove an associative object use &quot;object_name&quot;: null</param>
        /// <param name="id">Id of the asset to update</param>
        /// <returns></returns>
        public void UpdateAsset (AssetRequest body, long? id)
        {
             UpdateAssetWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update an asset Update accessible parameters of the requested resource in your accessible scope.  To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent and on the current asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated. To remove an associative object use &quot;object_name&quot;: null</param>
        /// <param name="id">Id of the asset to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAssetWithHttpInfo (AssetRequest body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->UpdateAsset");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->UpdateAsset");

            var localVarPath = "/assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update an asset Update accessible parameters of the requested resource in your accessible scope.  To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent and on the current asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated. To remove an associative object use &quot;object_name&quot;: null</param>
        /// <param name="id">Id of the asset to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAssetAsync (AssetRequest body, long? id)
        {
             await UpdateAssetAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update an asset Update accessible parameters of the requested resource in your accessible scope.  To assign a parent asset the user needs &#x60;can_permit&#x60; permission on the parent and on the current asset.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters that shall be updated. To remove an associative object use &quot;object_name&quot;: null</param>
        /// <param name="id">Id of the asset to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAssetAsyncWithHttpInfo (AssetRequest body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->UpdateAsset");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->UpdateAsset");

            var localVarPath = "/assets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update an asset picture Upload a new asset picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>PictureResponse</returns>
        public PictureResponse UpdateAssetPicture (byte[] image, long? assetId, long? id)
        {
             ApiResponse<PictureResponse> localVarResponse = UpdateAssetPictureWithHttpInfo(image, assetId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an asset picture Upload a new asset picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>ApiResponse of PictureResponse</returns>
        public ApiResponse< PictureResponse > UpdateAssetPictureWithHttpInfo (byte[] image, long? assetId, long? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling AssetApi->UpdateAssetPicture");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->UpdateAssetPicture");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->UpdateAssetPicture");

            var localVarPath = "/assets/{asset_id}/pictures/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAssetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PictureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PictureResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PictureResponse)));
        }

        /// <summary>
        /// Update an asset picture Upload a new asset picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of PictureResponse</returns>
        public async System.Threading.Tasks.Task<PictureResponse> UpdateAssetPictureAsync (byte[] image, long? assetId, long? id)
        {
             ApiResponse<PictureResponse> localVarResponse = await UpdateAssetPictureAsyncWithHttpInfo(image, assetId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an asset picture Upload a new asset picture. Check the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of ApiResponse (PictureResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PictureResponse>> UpdateAssetPictureAsyncWithHttpInfo (byte[] image, long? assetId, long? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling AssetApi->UpdateAssetPicture");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->UpdateAssetPicture");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->UpdateAssetPicture");

            var localVarPath = "/assets/{asset_id}/pictures/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAssetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PictureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PictureResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PictureResponse)));
        }

        /// <summary>
        /// Update an asset picture link Update an asset picture link.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be updated</param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>PictureResponse</returns>
        public PictureResponse UpdateAssetPictureLink (PictureLinkRequest body, long? assetId, long? id)
        {
             ApiResponse<PictureResponse> localVarResponse = UpdateAssetPictureLinkWithHttpInfo(body, assetId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an asset picture link Update an asset picture link.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be updated</param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>ApiResponse of PictureResponse</returns>
        public ApiResponse< PictureResponse > UpdateAssetPictureLinkWithHttpInfo (PictureLinkRequest body, long? assetId, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->UpdateAssetPictureLink");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->UpdateAssetPictureLink");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->UpdateAssetPictureLink");

            var localVarPath = "/assets/{asset_id}/pictures/links/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAssetPictureLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PictureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PictureResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PictureResponse)));
        }

        /// <summary>
        /// Update an asset picture link Update an asset picture link.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be updated</param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of PictureResponse</returns>
        public async System.Threading.Tasks.Task<PictureResponse> UpdateAssetPictureLinkAsync (PictureLinkRequest body, long? assetId, long? id)
        {
             ApiResponse<PictureResponse> localVarResponse = await UpdateAssetPictureLinkAsyncWithHttpInfo(body, assetId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an asset picture link Update an asset picture link.
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Picture link object to be updated</param>
        /// <param name="assetId">Id of the asset</param>
        /// <param name="id">Id of the asset picture</param>
        /// <returns>Task of ApiResponse (PictureResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PictureResponse>> UpdateAssetPictureLinkAsyncWithHttpInfo (PictureLinkRequest body, long? assetId, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->UpdateAssetPictureLink");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->UpdateAssetPictureLink");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->UpdateAssetPictureLink");

            var localVarPath = "/assets/{asset_id}/pictures/links/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAssetPictureLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PictureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PictureResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PictureResponse)));
        }

        /// <summary>
        /// Update specifications of an asset Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.  It is possible to save complex objects in the value as vector. In this case the unit must be &#x27;vector&#x27; and the value a valid object in the following format: &#x60;&#x60;&#x60;       [           {             \&quot;key\&quot;: {              \&quot;value\&quot;: \&quot;string\&quot;,              \&quot;unit\&quot;: \&quot;string\&quot;            }           },           {             \&quot;second_key\&quot;: {               \&quot;value\&quot;: \&quot;string\&quot;             }           }        ]   &#x60;&#x60;&#x60;  - key can only consist of [a-z A-Z 0-9 . - _ ]. - value is mandatory, max length 6000 chars - unit is optional, max length 50 chars - its impossible to filter for vector values
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications objects to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns></returns>
        public void UpdateSpecificationsOfAsset (Dictionary<string, SpecificationUIVisibleRequest> body, long? assetId)
        {
             UpdateSpecificationsOfAssetWithHttpInfo(body, assetId);
        }

        /// <summary>
        /// Update specifications of an asset Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.  It is possible to save complex objects in the value as vector. In this case the unit must be &#x27;vector&#x27; and the value a valid object in the following format: &#x60;&#x60;&#x60;       [           {             \&quot;key\&quot;: {              \&quot;value\&quot;: \&quot;string\&quot;,              \&quot;unit\&quot;: \&quot;string\&quot;            }           },           {             \&quot;second_key\&quot;: {               \&quot;value\&quot;: \&quot;string\&quot;             }           }        ]   &#x60;&#x60;&#x60;  - key can only consist of [a-z A-Z 0-9 . - _ ]. - value is mandatory, max length 6000 chars - unit is optional, max length 50 chars - its impossible to filter for vector values
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications objects to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSpecificationsOfAssetWithHttpInfo (Dictionary<string, SpecificationUIVisibleRequest> body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->UpdateSpecificationsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->UpdateSpecificationsOfAsset");

            var localVarPath = "/assets/{asset_id}/specifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSpecificationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update specifications of an asset Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.  It is possible to save complex objects in the value as vector. In this case the unit must be &#x27;vector&#x27; and the value a valid object in the following format: &#x60;&#x60;&#x60;       [           {             \&quot;key\&quot;: {              \&quot;value\&quot;: \&quot;string\&quot;,              \&quot;unit\&quot;: \&quot;string\&quot;            }           },           {             \&quot;second_key\&quot;: {               \&quot;value\&quot;: \&quot;string\&quot;             }           }        ]   &#x60;&#x60;&#x60;  - key can only consist of [a-z A-Z 0-9 . - _ ]. - value is mandatory, max length 6000 chars - unit is optional, max length 50 chars - its impossible to filter for vector values
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications objects to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSpecificationsOfAssetAsync (Dictionary<string, SpecificationUIVisibleRequest> body, long? assetId)
        {
             await UpdateSpecificationsOfAssetAsyncWithHttpInfo(body, assetId);

        }

        /// <summary>
        /// Update specifications of an asset Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.  It is possible to save complex objects in the value as vector. In this case the unit must be &#x27;vector&#x27; and the value a valid object in the following format: &#x60;&#x60;&#x60;       [           {             \&quot;key\&quot;: {              \&quot;value\&quot;: \&quot;string\&quot;,              \&quot;unit\&quot;: \&quot;string\&quot;            }           },           {             \&quot;second_key\&quot;: {               \&quot;value\&quot;: \&quot;string\&quot;             }           }        ]   &#x60;&#x60;&#x60;  - key can only consist of [a-z A-Z 0-9 . - _ ]. - value is mandatory, max length 6000 chars - unit is optional, max length 50 chars - its impossible to filter for vector values
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The specifications objects to patch.</param>
        /// <param name="assetId">Id of the specified asset</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSpecificationsOfAssetAsyncWithHttpInfo (Dictionary<string, SpecificationUIVisibleRequest> body, long? assetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetApi->UpdateSpecificationsOfAsset");
            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new ApiException(400, "Missing required parameter 'assetId' when calling AssetApi->UpdateSpecificationsOfAsset");

            var localVarPath = "/assets/{asset_id}/specifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarPathParams.Add("asset_id", this.Configuration.ApiClient.ParameterToString(assetId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSpecificationsOfAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Upload an asset picture Upload a new asset picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="id">Id of the asset</param>
        /// <returns>PictureResponse</returns>
        public PictureResponse UploadAssetPicture (byte[] image, long? id)
        {
             ApiResponse<PictureResponse> localVarResponse = UploadAssetPictureWithHttpInfo(image, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an asset picture Upload a new asset picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="id">Id of the asset</param>
        /// <returns>ApiResponse of PictureResponse</returns>
        public ApiResponse< PictureResponse > UploadAssetPictureWithHttpInfo (byte[] image, long? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling AssetApi->UploadAssetPicture");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->UploadAssetPicture");

            var localVarPath = "/assets/{id}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAssetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PictureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PictureResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PictureResponse)));
        }

        /// <summary>
        /// Upload an asset picture Upload a new asset picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="id">Id of the asset</param>
        /// <returns>Task of PictureResponse</returns>
        public async System.Threading.Tasks.Task<PictureResponse> UploadAssetPictureAsync (byte[] image, long? id)
        {
             ApiResponse<PictureResponse> localVarResponse = await UploadAssetPictureAsyncWithHttpInfo(image, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an asset picture Upload a new asset picture. Checks the file-storage quota. Allowed content-types are - image/gif - image/jpg - image/jpeg - image/png
        /// </summary>
        /// <exception cref="Netilion.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image"></param>
        /// <param name="id">Id of the asset</param>
        /// <returns>Task of ApiResponse (PictureResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PictureResponse>> UploadAssetPictureAsyncWithHttpInfo (byte[] image, long? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling AssetApi->UploadAssetPicture");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssetApi->UploadAssetPicture");

            var localVarPath = "/assets/{id}/pictures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));
            // authentication (API-Key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("API-Key")))
            {
                localVarHeaderParams["API-Key"] = this.Configuration.GetApiKeyWithPrefix("API-Key");
            }
            // authentication (Authentication) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAssetPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PictureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PictureResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PictureResponse)));
        }

    }
}
