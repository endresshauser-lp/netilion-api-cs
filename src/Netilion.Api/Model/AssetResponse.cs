/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// AssetResponse
    /// </summary>
    [DataContract]
        public partial class AssetResponse : AssetBase,  IEquatable<AssetResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetResponse" /> class.
        /// </summary>
        /// <param name="id">Id of object.</param>
        /// <param name="ownershipClaimed">flag if asset ownership was claimed by a user (default to false).</param>
        /// <param name="createdAt">Timestamp at which the asset was created.</param>
        /// <param name="updatedAt">Timestamp at which the asset was last changed.</param>
        /// <param name="product">product.</param>
        /// <param name="productVariant">productVariant.</param>
        /// <param name="parent">parent.</param>
        /// <param name="status">status.</param>
        /// <param name="tenant">tenant.</param>
        /// <param name="links">links.</param>
        public AssetResponse(long? id = default(long?), bool? ownershipClaimed = false, string createdAt = default(string), string updatedAt = default(string), NestedIDHref product = default(NestedIDHref), NestedIDHref productVariant = default(NestedIDHref), NestedIDHref parent = default(NestedIDHref), NestedIDHref status = default(NestedIDHref), NestedIDHref tenant = default(NestedIDHref), Links2 links = default(Links2), string serialNumber = default(string), string description = default(string), string productionDate = default(string), string lastSeenAt = default(string)) : base(serialNumber, description, productionDate, lastSeenAt)
        {
            this.Id = id;
            // use default value if no "ownershipClaimed" provided
            if (ownershipClaimed == null)
            {
                this.OwnershipClaimed = false;
            }
            else
            {
                this.OwnershipClaimed = ownershipClaimed;
            }
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Product = product;
            this.ProductVariant = productVariant;
            this.Parent = parent;
            this.Status = status;
            this.Tenant = tenant;
            this.Links = links;
        }
        
        /// <summary>
        /// Id of object
        /// </summary>
        /// <value>Id of object</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// flag if asset ownership was claimed by a user
        /// </summary>
        /// <value>flag if asset ownership was claimed by a user</value>
        [DataMember(Name="ownership_claimed", EmitDefaultValue=false)]
        public bool? OwnershipClaimed { get; set; }

        /// <summary>
        /// Timestamp at which the asset was created
        /// </summary>
        /// <value>Timestamp at which the asset was created</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Timestamp at which the asset was last changed
        /// </summary>
        /// <value>Timestamp at which the asset was last changed</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public NestedIDHref Product { get; set; }

        /// <summary>
        /// Gets or Sets ProductVariant
        /// </summary>
        [DataMember(Name="product_variant", EmitDefaultValue=false)]
        public NestedIDHref ProductVariant { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public NestedIDHref Parent { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public NestedIDHref Status { get; set; }

        /// <summary>
        /// Gets or Sets Tenant
        /// </summary>
        [DataMember(Name="tenant", EmitDefaultValue=false)]
        public NestedIDHref Tenant { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public Links2 Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OwnershipClaimed: ").Append(OwnershipClaimed).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  ProductVariant: ").Append(ProductVariant).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetResponse);
        }

        /// <summary>
        /// Returns true if AssetResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && base.Equals(input) && 
                (
                    this.OwnershipClaimed == input.OwnershipClaimed ||
                    (this.OwnershipClaimed != null &&
                    this.OwnershipClaimed.Equals(input.OwnershipClaimed))
                ) && base.Equals(input) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && base.Equals(input) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && base.Equals(input) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && base.Equals(input) && 
                (
                    this.ProductVariant == input.ProductVariant ||
                    (this.ProductVariant != null &&
                    this.ProductVariant.Equals(input.ProductVariant))
                ) && base.Equals(input) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.Tenant == input.Tenant ||
                    (this.Tenant != null &&
                    this.Tenant.Equals(input.Tenant))
                ) && base.Equals(input) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OwnershipClaimed != null)
                    hashCode = hashCode * 59 + this.OwnershipClaimed.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.ProductVariant != null)
                    hashCode = hashCode * 59 + this.ProductVariant.GetHashCode();
                if (this.Parent != null)
                    hashCode = hashCode * 59 + this.Parent.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Tenant != null)
                    hashCode = hashCode * 59 + this.Tenant.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
