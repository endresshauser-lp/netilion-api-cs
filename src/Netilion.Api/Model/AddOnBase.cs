/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// AddOnBase
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "addOnBaseType")]
    [JsonSubtypes.KnownSubType(typeof(AddOnResponse), "AddOnResponse")]
        public partial class AddOnBase :  IEquatable<AddOnBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddOnBase" /> class.
        /// </summary>
        /// <param name="name">Name of the Add On (required).</param>
        /// <param name="externalReference">can be used to store id of external subscription managment system.</param>
        /// <param name="quantity">number of bought add ons.</param>
        /// <param name="materialNumber">material_number of add on.</param>
        /// <param name="productCode">product code (for edge device related addons).</param>
        /// <param name="addOnType">possible values are: connectivity and addon.</param>
        public AddOnBase(string name = default(string), string externalReference = default(string), int? quantity = default(int?), string materialNumber = default(string), string productCode = default(string), string addOnType = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for AddOnBase and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.ExternalReference = externalReference;
            this.Quantity = quantity;
            this.MaterialNumber = materialNumber;
            this.ProductCode = productCode;
            this.AddOnType = addOnType;
        }
        
        /// <summary>
        /// Name of the Add On
        /// </summary>
        /// <value>Name of the Add On</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// can be used to store id of external subscription managment system
        /// </summary>
        /// <value>can be used to store id of external subscription managment system</value>
        [DataMember(Name="external_reference", EmitDefaultValue=false)]
        public string ExternalReference { get; set; }

        /// <summary>
        /// number of bought add ons
        /// </summary>
        /// <value>number of bought add ons</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// material_number of add on
        /// </summary>
        /// <value>material_number of add on</value>
        [DataMember(Name="material_number", EmitDefaultValue=false)]
        public string MaterialNumber { get; set; }

        /// <summary>
        /// product code (for edge device related addons)
        /// </summary>
        /// <value>product code (for edge device related addons)</value>
        [DataMember(Name="product_code", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// possible values are: connectivity and addon
        /// </summary>
        /// <value>possible values are: connectivity and addon</value>
        [DataMember(Name="add_on_type", EmitDefaultValue=false)]
        public string AddOnType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddOnBase {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExternalReference: ").Append(ExternalReference).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  MaterialNumber: ").Append(MaterialNumber).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  AddOnType: ").Append(AddOnType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddOnBase);
        }

        /// <summary>
        /// Returns true if AddOnBase instances are equal
        /// </summary>
        /// <param name="input">Instance of AddOnBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddOnBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ExternalReference == input.ExternalReference ||
                    (this.ExternalReference != null &&
                    this.ExternalReference.Equals(input.ExternalReference))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.MaterialNumber == input.MaterialNumber ||
                    (this.MaterialNumber != null &&
                    this.MaterialNumber.Equals(input.MaterialNumber))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.AddOnType == input.AddOnType ||
                    (this.AddOnType != null &&
                    this.AddOnType.Equals(input.AddOnType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ExternalReference != null)
                    hashCode = hashCode * 59 + this.ExternalReference.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.MaterialNumber != null)
                    hashCode = hashCode * 59 + this.MaterialNumber.GetHashCode();
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.AddOnType != null)
                    hashCode = hashCode * 59 + this.AddOnType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
