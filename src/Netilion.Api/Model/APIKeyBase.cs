/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// APIKeyBase
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "apiKeyBaseType")]
    [JsonSubtypes.KnownSubType(typeof(APIKeyResponse), "APIKeyResponse")]
    [JsonSubtypes.KnownSubType(typeof(APIKeyRequest), "APIKeyRequest")]
        public partial class APIKeyBase :  IEquatable<APIKeyBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIKeyBase" /> class.
        /// </summary>
        /// <param name="validFrom">Date must be in format &#x27;2016-01-01&#x27;, cannot be set by non-admin users.</param>
        /// <param name="validUntil">Date must be in format &#x27;2016-01-01&#x27;, cannot be set by non-admin users.</param>
        /// <param name="disabled">disabled api keys cannot be used for requests (default to false).</param>
        /// <param name="authenticationType">possible values are: any, oauth, basic_auth. Oauth is assigned per default.</param>
        /// <param name="description">Description of the APIKey.</param>
        public APIKeyBase(string validFrom = default(string), string validUntil = default(string), bool? disabled = false, string authenticationType = default(string), string description = default(string))
        {
            this.ValidFrom = validFrom;
            this.ValidUntil = validUntil;
            // use default value if no "disabled" provided
            if (disabled == null)
            {
                this.Disabled = false;
            }
            else
            {
                this.Disabled = disabled;
            }
            this.AuthenticationType = authenticationType;
            this.Description = description;
        }
        
        /// <summary>
        /// Date must be in format &#x27;2016-01-01&#x27;, cannot be set by non-admin users
        /// </summary>
        /// <value>Date must be in format &#x27;2016-01-01&#x27;, cannot be set by non-admin users</value>
        [DataMember(Name="valid_from", EmitDefaultValue=false)]
        public string ValidFrom { get; set; }

        /// <summary>
        /// Date must be in format &#x27;2016-01-01&#x27;, cannot be set by non-admin users
        /// </summary>
        /// <value>Date must be in format &#x27;2016-01-01&#x27;, cannot be set by non-admin users</value>
        [DataMember(Name="valid_until", EmitDefaultValue=false)]
        public string ValidUntil { get; set; }

        /// <summary>
        /// disabled api keys cannot be used for requests
        /// </summary>
        /// <value>disabled api keys cannot be used for requests</value>
        [DataMember(Name="disabled", EmitDefaultValue=false)]
        public bool? Disabled { get; set; }

        /// <summary>
        /// possible values are: any, oauth, basic_auth. Oauth is assigned per default
        /// </summary>
        /// <value>possible values are: any, oauth, basic_auth. Oauth is assigned per default</value>
        [DataMember(Name="authentication_type", EmitDefaultValue=false)]
        public string AuthenticationType { get; set; }

        /// <summary>
        /// Description of the APIKey
        /// </summary>
        /// <value>Description of the APIKey</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class APIKeyBase {\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as APIKeyBase);
        }

        /// <summary>
        /// Returns true if APIKeyBase instances are equal
        /// </summary>
        /// <param name="input">Instance of APIKeyBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APIKeyBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                ) && 
                (
                    this.ValidUntil == input.ValidUntil ||
                    (this.ValidUntil != null &&
                    this.ValidUntil.Equals(input.ValidUntil))
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    (this.Disabled != null &&
                    this.Disabled.Equals(input.Disabled))
                ) && 
                (
                    this.AuthenticationType == input.AuthenticationType ||
                    (this.AuthenticationType != null &&
                    this.AuthenticationType.Equals(input.AuthenticationType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValidFrom != null)
                    hashCode = hashCode * 59 + this.ValidFrom.GetHashCode();
                if (this.ValidUntil != null)
                    hashCode = hashCode * 59 + this.ValidUntil.GetHashCode();
                if (this.Disabled != null)
                    hashCode = hashCode * 59 + this.Disabled.GetHashCode();
                if (this.AuthenticationType != null)
                    hashCode = hashCode * 59 + this.AuthenticationType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
