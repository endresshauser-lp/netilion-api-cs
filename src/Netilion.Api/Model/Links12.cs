/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// Links12
    /// </summary>
    [DataContract]
        public partial class Links12 :  IEquatable<Links12>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Links12" /> class.
        /// </summary>
        /// <param name="assets">assets.</param>
        /// <param name="billOfMaterials">billOfMaterials.</param>
        /// <param name="documents">documents.</param>
        /// <param name="nodes">nodes.</param>
        /// <param name="pictures">pictures.</param>
        /// <param name="specifications">specifications.</param>
        /// <param name="thresholds">thresholds.</param>
        public Links12(Link assets = default(Link), Link billOfMaterials = default(Link), Link documents = default(Link), Link nodes = default(Link), Link pictures = default(Link), Link specifications = default(Link), Link thresholds = default(Link))
        {
            this.Assets = assets;
            this.BillOfMaterials = billOfMaterials;
            this.Documents = documents;
            this.Nodes = nodes;
            this.Pictures = pictures;
            this.Specifications = specifications;
            this.Thresholds = thresholds;
        }
        
        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name="assets", EmitDefaultValue=false)]
        public Link Assets { get; set; }

        /// <summary>
        /// Gets or Sets BillOfMaterials
        /// </summary>
        [DataMember(Name="bill_of_materials", EmitDefaultValue=false)]
        public Link BillOfMaterials { get; set; }

        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public Link Documents { get; set; }

        /// <summary>
        /// Gets or Sets Nodes
        /// </summary>
        [DataMember(Name="nodes", EmitDefaultValue=false)]
        public Link Nodes { get; set; }

        /// <summary>
        /// Gets or Sets Pictures
        /// </summary>
        [DataMember(Name="pictures", EmitDefaultValue=false)]
        public Link Pictures { get; set; }

        /// <summary>
        /// Gets or Sets Specifications
        /// </summary>
        [DataMember(Name="specifications", EmitDefaultValue=false)]
        public Link Specifications { get; set; }

        /// <summary>
        /// Gets or Sets Thresholds
        /// </summary>
        [DataMember(Name="thresholds", EmitDefaultValue=false)]
        public Link Thresholds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Links12 {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  BillOfMaterials: ").Append(BillOfMaterials).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("  Specifications: ").Append(Specifications).Append("\n");
            sb.Append("  Thresholds: ").Append(Thresholds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Links12);
        }

        /// <summary>
        /// Returns true if Links12 instances are equal
        /// </summary>
        /// <param name="input">Instance of Links12 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Links12 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Assets == input.Assets ||
                    (this.Assets != null &&
                    this.Assets.Equals(input.Assets))
                ) && 
                (
                    this.BillOfMaterials == input.BillOfMaterials ||
                    (this.BillOfMaterials != null &&
                    this.BillOfMaterials.Equals(input.BillOfMaterials))
                ) && 
                (
                    this.Documents == input.Documents ||
                    (this.Documents != null &&
                    this.Documents.Equals(input.Documents))
                ) && 
                (
                    this.Nodes == input.Nodes ||
                    (this.Nodes != null &&
                    this.Nodes.Equals(input.Nodes))
                ) && 
                (
                    this.Pictures == input.Pictures ||
                    (this.Pictures != null &&
                    this.Pictures.Equals(input.Pictures))
                ) && 
                (
                    this.Specifications == input.Specifications ||
                    (this.Specifications != null &&
                    this.Specifications.Equals(input.Specifications))
                ) && 
                (
                    this.Thresholds == input.Thresholds ||
                    (this.Thresholds != null &&
                    this.Thresholds.Equals(input.Thresholds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Assets != null)
                    hashCode = hashCode * 59 + this.Assets.GetHashCode();
                if (this.BillOfMaterials != null)
                    hashCode = hashCode * 59 + this.BillOfMaterials.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                if (this.Nodes != null)
                    hashCode = hashCode * 59 + this.Nodes.GetHashCode();
                if (this.Pictures != null)
                    hashCode = hashCode * 59 + this.Pictures.GetHashCode();
                if (this.Specifications != null)
                    hashCode = hashCode * 59 + this.Specifications.GetHashCode();
                if (this.Thresholds != null)
                    hashCode = hashCode * 59 + this.Thresholds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
