/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// EdgeDeviceResponse
    /// </summary>
    [DataContract]
        public partial class EdgeDeviceResponse : EdgeDeviceBase,  IEquatable<EdgeDeviceResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeDeviceResponse" /> class.
        /// </summary>
        /// <param name="id">Id of object.</param>
        /// <param name="type">type.</param>
        /// <param name="status">status.</param>
        /// <param name="softwareVersion">softwareVersion.</param>
        /// <param name="technicalUser">technicalUser.</param>
        /// <param name="orderUser">orderUser.</param>
        /// <param name="apiSubscription">apiSubscription.</param>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="tenant">tenant.</param>
        /// <param name="usergroup">usergroup.</param>
        /// <param name="addOn">addOn.</param>
        /// <param name="lastSeenAt">timestamp when the edge_device iself has polled the hub the last time. Date format is YYYY-MM-DDThh:mm:ss.</param>
        /// <param name="links">links.</param>
        public EdgeDeviceResponse(long? id = default(long?), NestedIDHref type = default(NestedIDHref), NestedIDHref status = default(NestedIDHref), NestedIDHref softwareVersion = default(NestedIDHref), NestedIDHref technicalUser = default(NestedIDHref), NestedIDHref orderUser = default(NestedIDHref), EdgeDeviceResponseApiSubscription apiSubscription = default(EdgeDeviceResponseApiSubscription), NestedIDHref apiKey = default(NestedIDHref), NestedIDHref tenant = default(NestedIDHref), NestedIDHref usergroup = default(NestedIDHref), NestedIDHref addOn = default(NestedIDHref), string lastSeenAt = default(string), Links9 links = default(Links9), string serialNumber = default(string), string name = default(string), string description = default(string), string logLevel = default(string), string applyTimestamp = default(string)) : base(serialNumber, name, description, logLevel, applyTimestamp)
        {
            this.Id = id;
            this.Type = type;
            this.Status = status;
            this.SoftwareVersion = softwareVersion;
            this.TechnicalUser = technicalUser;
            this.OrderUser = orderUser;
            this.ApiSubscription = apiSubscription;
            this.ApiKey = apiKey;
            this.Tenant = tenant;
            this.Usergroup = usergroup;
            this.AddOn = addOn;
            this.LastSeenAt = lastSeenAt;
            this.Links = links;
        }
        
        /// <summary>
        /// Id of object
        /// </summary>
        /// <value>Id of object</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public NestedIDHref Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public NestedIDHref Status { get; set; }

        /// <summary>
        /// Gets or Sets SoftwareVersion
        /// </summary>
        [DataMember(Name="software_version", EmitDefaultValue=false)]
        public NestedIDHref SoftwareVersion { get; set; }

        /// <summary>
        /// Gets or Sets TechnicalUser
        /// </summary>
        [DataMember(Name="technical_user", EmitDefaultValue=false)]
        public NestedIDHref TechnicalUser { get; set; }

        /// <summary>
        /// Gets or Sets OrderUser
        /// </summary>
        [DataMember(Name="order_user", EmitDefaultValue=false)]
        public NestedIDHref OrderUser { get; set; }

        /// <summary>
        /// Gets or Sets ApiSubscription
        /// </summary>
        [DataMember(Name="api_subscription", EmitDefaultValue=false)]
        public EdgeDeviceResponseApiSubscription ApiSubscription { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="api_key", EmitDefaultValue=false)]
        public NestedIDHref ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets Tenant
        /// </summary>
        [DataMember(Name="tenant", EmitDefaultValue=false)]
        public NestedIDHref Tenant { get; set; }

        /// <summary>
        /// Gets or Sets Usergroup
        /// </summary>
        [DataMember(Name="usergroup", EmitDefaultValue=false)]
        public NestedIDHref Usergroup { get; set; }

        /// <summary>
        /// Gets or Sets AddOn
        /// </summary>
        [DataMember(Name="add_on", EmitDefaultValue=false)]
        public NestedIDHref AddOn { get; set; }

        /// <summary>
        /// timestamp when the edge_device iself has polled the hub the last time. Date format is YYYY-MM-DDThh:mm:ss
        /// </summary>
        /// <value>timestamp when the edge_device iself has polled the hub the last time. Date format is YYYY-MM-DDThh:mm:ss</value>
        [DataMember(Name="last_seen_at", EmitDefaultValue=false)]
        public string LastSeenAt { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public Links9 Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdgeDeviceResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SoftwareVersion: ").Append(SoftwareVersion).Append("\n");
            sb.Append("  TechnicalUser: ").Append(TechnicalUser).Append("\n");
            sb.Append("  OrderUser: ").Append(OrderUser).Append("\n");
            sb.Append("  ApiSubscription: ").Append(ApiSubscription).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  Usergroup: ").Append(Usergroup).Append("\n");
            sb.Append("  AddOn: ").Append(AddOn).Append("\n");
            sb.Append("  LastSeenAt: ").Append(LastSeenAt).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdgeDeviceResponse);
        }

        /// <summary>
        /// Returns true if EdgeDeviceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EdgeDeviceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdgeDeviceResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.SoftwareVersion == input.SoftwareVersion ||
                    (this.SoftwareVersion != null &&
                    this.SoftwareVersion.Equals(input.SoftwareVersion))
                ) && base.Equals(input) && 
                (
                    this.TechnicalUser == input.TechnicalUser ||
                    (this.TechnicalUser != null &&
                    this.TechnicalUser.Equals(input.TechnicalUser))
                ) && base.Equals(input) && 
                (
                    this.OrderUser == input.OrderUser ||
                    (this.OrderUser != null &&
                    this.OrderUser.Equals(input.OrderUser))
                ) && base.Equals(input) && 
                (
                    this.ApiSubscription == input.ApiSubscription ||
                    (this.ApiSubscription != null &&
                    this.ApiSubscription.Equals(input.ApiSubscription))
                ) && base.Equals(input) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && base.Equals(input) && 
                (
                    this.Tenant == input.Tenant ||
                    (this.Tenant != null &&
                    this.Tenant.Equals(input.Tenant))
                ) && base.Equals(input) && 
                (
                    this.Usergroup == input.Usergroup ||
                    (this.Usergroup != null &&
                    this.Usergroup.Equals(input.Usergroup))
                ) && base.Equals(input) && 
                (
                    this.AddOn == input.AddOn ||
                    (this.AddOn != null &&
                    this.AddOn.Equals(input.AddOn))
                ) && base.Equals(input) && 
                (
                    this.LastSeenAt == input.LastSeenAt ||
                    (this.LastSeenAt != null &&
                    this.LastSeenAt.Equals(input.LastSeenAt))
                ) && base.Equals(input) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SoftwareVersion != null)
                    hashCode = hashCode * 59 + this.SoftwareVersion.GetHashCode();
                if (this.TechnicalUser != null)
                    hashCode = hashCode * 59 + this.TechnicalUser.GetHashCode();
                if (this.OrderUser != null)
                    hashCode = hashCode * 59 + this.OrderUser.GetHashCode();
                if (this.ApiSubscription != null)
                    hashCode = hashCode * 59 + this.ApiSubscription.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.Tenant != null)
                    hashCode = hashCode * 59 + this.Tenant.GetHashCode();
                if (this.Usergroup != null)
                    hashCode = hashCode * 59 + this.Usergroup.GetHashCode();
                if (this.AddOn != null)
                    hashCode = hashCode * 59 + this.AddOn.GetHashCode();
                if (this.LastSeenAt != null)
                    hashCode = hashCode * 59 + this.LastSeenAt.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
