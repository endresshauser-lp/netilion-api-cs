/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// UsageResponse
    /// </summary>
    [DataContract]
        public partial class UsageResponse :  IEquatable<UsageResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsageResponse" /> class.
        /// </summary>
        /// <param name="assetCount">Number of assets assigned to this user&#x27;s active subscription.</param>
        /// <param name="fileStorage">Use of storage for this user (in bytes).</param>
        public UsageResponse(long? assetCount = default(long?), long? fileStorage = default(long?))
        {
            this.AssetCount = assetCount;
            this.FileStorage = fileStorage;
        }
        
        /// <summary>
        /// Number of assets assigned to this user&#x27;s active subscription
        /// </summary>
        /// <value>Number of assets assigned to this user&#x27;s active subscription</value>
        [DataMember(Name="asset_count", EmitDefaultValue=false)]
        public long? AssetCount { get; set; }

        /// <summary>
        /// Use of storage for this user (in bytes)
        /// </summary>
        /// <value>Use of storage for this user (in bytes)</value>
        [DataMember(Name="file_storage", EmitDefaultValue=false)]
        public long? FileStorage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsageResponse {\n");
            sb.Append("  AssetCount: ").Append(AssetCount).Append("\n");
            sb.Append("  FileStorage: ").Append(FileStorage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsageResponse);
        }

        /// <summary>
        /// Returns true if UsageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UsageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsageResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssetCount == input.AssetCount ||
                    (this.AssetCount != null &&
                    this.AssetCount.Equals(input.AssetCount))
                ) && 
                (
                    this.FileStorage == input.FileStorage ||
                    (this.FileStorage != null &&
                    this.FileStorage.Equals(input.FileStorage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetCount != null)
                    hashCode = hashCode * 59 + this.AssetCount.GetHashCode();
                if (this.FileStorage != null)
                    hashCode = hashCode * 59 + this.FileStorage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
