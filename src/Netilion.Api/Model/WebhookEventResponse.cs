/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// WebhookEventResponse
    /// </summary>
    [DataContract]
        public partial class WebhookEventResponse :  IEquatable<WebhookEventResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookEventResponse" /> class.
        /// </summary>
        /// <param name="id">Id of webhook event (required).</param>
        /// <param name="status">status of the event, possible values are pending, delivered, cancelled and failed.</param>
        /// <param name="payload">payload of the webhook event.</param>
        /// <param name="lastSendAt">datewhen webhook event was last send.</param>
        /// <param name="retries">number of retries to send the event.</param>
        public WebhookEventResponse(long? id = default(long?), string status = default(string), Object payload = default(Object), string lastSendAt = default(string), int? retries = default(int?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for WebhookEventResponse and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.Status = status;
            this.Payload = payload;
            this.LastSendAt = lastSendAt;
            this.Retries = retries;
        }
        
        /// <summary>
        /// Id of webhook event
        /// </summary>
        /// <value>Id of webhook event</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// status of the event, possible values are pending, delivered, cancelled and failed
        /// </summary>
        /// <value>status of the event, possible values are pending, delivered, cancelled and failed</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// payload of the webhook event
        /// </summary>
        /// <value>payload of the webhook event</value>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public Object Payload { get; set; }

        /// <summary>
        /// datewhen webhook event was last send
        /// </summary>
        /// <value>datewhen webhook event was last send</value>
        [DataMember(Name="last_send_at", EmitDefaultValue=false)]
        public string LastSendAt { get; set; }

        /// <summary>
        /// number of retries to send the event
        /// </summary>
        /// <value>number of retries to send the event</value>
        [DataMember(Name="retries", EmitDefaultValue=false)]
        public int? Retries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookEventResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  LastSendAt: ").Append(LastSendAt).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookEventResponse);
        }

        /// <summary>
        /// Returns true if WebhookEventResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookEventResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookEventResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.LastSendAt == input.LastSendAt ||
                    (this.LastSendAt != null &&
                    this.LastSendAt.Equals(input.LastSendAt))
                ) && 
                (
                    this.Retries == input.Retries ||
                    (this.Retries != null &&
                    this.Retries.Equals(input.Retries))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                if (this.LastSendAt != null)
                    hashCode = hashCode * 59 + this.LastSendAt.GetHashCode();
                if (this.Retries != null)
                    hashCode = hashCode * 59 + this.Retries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
