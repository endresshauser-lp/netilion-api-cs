/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// APISubscriptionBase
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "apiSubscriptionBaseType")]
    [JsonSubtypes.KnownSubType(typeof(APISubscriptionResponse), "APISubscriptionResponse")]
    [JsonSubtypes.KnownSubType(typeof(APISubscriptionRequest), "APISubscriptionRequest")]
        public partial class APISubscriptionBase :  IEquatable<APISubscriptionBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APISubscriptionBase" /> class.
        /// </summary>
        /// <param name="displayName">Name of the api subscription.</param>
        /// <param name="description">Description of the api subscription.</param>
        /// <param name="externalReference">can be used to store id of external api subscription managment system.</param>
        /// <param name="status">status of the api subscription, can be  open, payment_required, confirmed, cancelled, scheduled_update and non_renewing.</param>
        /// <param name="notificationStatus">status of the mail notification for the api subscription, can be no_notification, first_notification, second_notification or alert_notification.</param>
        /// <param name="subscriptionType">type of the api subscription, can be &#x27;s&#x27; or &#x27;m&#x27;.</param>
        /// <param name="customerPurchaseOrder">reference for customer system.</param>
        /// <param name="startDate">start date of the api subscription.</param>
        /// <param name="endDate">end date of the api subscription.</param>
        /// <param name="billedUntil">end date of the api subscription.</param>
        /// <param name="externalUserReference">can be used to store user id of external api subscription managment system.</param>
        /// <param name="externalPlanVariantReference">can be used to store paln variant of external api subscription managment system.</param>
        /// <param name="apiCallQuota">number of bought api calls.</param>
        /// <param name="storageQuota">number of bought storage (in bytes).</param>
        /// <param name="numberAssignedAssets">number of assigned assets.</param>
        /// <param name="connectedAssetsUsed">number of connected assets used.</param>
        /// <param name="uploadDownloadQuota">traffic for up- and download of data (in bytes).</param>
        /// <param name="connectedAssetQuota">number of bought connected asset addons.</param>
        /// <param name="apiCallsUsed">number of api calls used.</param>
        /// <param name="storageUsed">number of storage used (in bytes).</param>
        /// <param name="uploadDownloadUsed">data up- and download used (in bytes).</param>
        public APISubscriptionBase(string displayName = default(string), string description = default(string), string externalReference = default(string), string status = default(string), string notificationStatus = default(string), string subscriptionType = default(string), string customerPurchaseOrder = default(string), string startDate = default(string), string endDate = default(string), string billedUntil = default(string), string externalUserReference = default(string), string externalPlanVariantReference = default(string), int? apiCallQuota = default(int?), int? storageQuota = default(int?), int? numberAssignedAssets = default(int?), int? connectedAssetsUsed = default(int?), int? uploadDownloadQuota = default(int?), int? connectedAssetQuota = default(int?), int? apiCallsUsed = default(int?), int? storageUsed = default(int?), int? uploadDownloadUsed = default(int?))
        {
            this.DisplayName = displayName;
            this.Description = description;
            this.ExternalReference = externalReference;
            this.Status = status;
            this.NotificationStatus = notificationStatus;
            this.SubscriptionType = subscriptionType;
            this.CustomerPurchaseOrder = customerPurchaseOrder;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.BilledUntil = billedUntil;
            this.ExternalUserReference = externalUserReference;
            this.ExternalPlanVariantReference = externalPlanVariantReference;
            this.ApiCallQuota = apiCallQuota;
            this.StorageQuota = storageQuota;
            this.NumberAssignedAssets = numberAssignedAssets;
            this.ConnectedAssetsUsed = connectedAssetsUsed;
            this.UploadDownloadQuota = uploadDownloadQuota;
            this.ConnectedAssetQuota = connectedAssetQuota;
            this.ApiCallsUsed = apiCallsUsed;
            this.StorageUsed = storageUsed;
            this.UploadDownloadUsed = uploadDownloadUsed;
        }
        
        /// <summary>
        /// Name of the api subscription
        /// </summary>
        /// <value>Name of the api subscription</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Description of the api subscription
        /// </summary>
        /// <value>Description of the api subscription</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// can be used to store id of external api subscription managment system
        /// </summary>
        /// <value>can be used to store id of external api subscription managment system</value>
        [DataMember(Name="external_reference", EmitDefaultValue=false)]
        public string ExternalReference { get; set; }

        /// <summary>
        /// status of the api subscription, can be  open, payment_required, confirmed, cancelled, scheduled_update and non_renewing
        /// </summary>
        /// <value>status of the api subscription, can be  open, payment_required, confirmed, cancelled, scheduled_update and non_renewing</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// status of the mail notification for the api subscription, can be no_notification, first_notification, second_notification or alert_notification
        /// </summary>
        /// <value>status of the mail notification for the api subscription, can be no_notification, first_notification, second_notification or alert_notification</value>
        [DataMember(Name="notification_status", EmitDefaultValue=false)]
        public string NotificationStatus { get; set; }

        /// <summary>
        /// type of the api subscription, can be &#x27;s&#x27; or &#x27;m&#x27;
        /// </summary>
        /// <value>type of the api subscription, can be &#x27;s&#x27; or &#x27;m&#x27;</value>
        [DataMember(Name="subscription_type", EmitDefaultValue=false)]
        public string SubscriptionType { get; set; }

        /// <summary>
        /// reference for customer system
        /// </summary>
        /// <value>reference for customer system</value>
        [DataMember(Name="customer_purchase_order", EmitDefaultValue=false)]
        public string CustomerPurchaseOrder { get; set; }

        /// <summary>
        /// start date of the api subscription
        /// </summary>
        /// <value>start date of the api subscription</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// end date of the api subscription
        /// </summary>
        /// <value>end date of the api subscription</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// end date of the api subscription
        /// </summary>
        /// <value>end date of the api subscription</value>
        [DataMember(Name="billed_until", EmitDefaultValue=false)]
        public string BilledUntil { get; set; }

        /// <summary>
        /// can be used to store user id of external api subscription managment system
        /// </summary>
        /// <value>can be used to store user id of external api subscription managment system</value>
        [DataMember(Name="external_user_reference", EmitDefaultValue=false)]
        public string ExternalUserReference { get; set; }

        /// <summary>
        /// can be used to store paln variant of external api subscription managment system
        /// </summary>
        /// <value>can be used to store paln variant of external api subscription managment system</value>
        [DataMember(Name="external_plan_variant_reference", EmitDefaultValue=false)]
        public string ExternalPlanVariantReference { get; set; }

        /// <summary>
        /// number of bought api calls
        /// </summary>
        /// <value>number of bought api calls</value>
        [DataMember(Name="api_call_quota", EmitDefaultValue=false)]
        public int? ApiCallQuota { get; set; }

        /// <summary>
        /// number of bought storage (in bytes)
        /// </summary>
        /// <value>number of bought storage (in bytes)</value>
        [DataMember(Name="storage_quota", EmitDefaultValue=false)]
        public int? StorageQuota { get; set; }

        /// <summary>
        /// number of assigned assets
        /// </summary>
        /// <value>number of assigned assets</value>
        [DataMember(Name="number_assigned_assets", EmitDefaultValue=false)]
        public int? NumberAssignedAssets { get; set; }

        /// <summary>
        /// number of connected assets used
        /// </summary>
        /// <value>number of connected assets used</value>
        [DataMember(Name="connected_assets_used", EmitDefaultValue=false)]
        public int? ConnectedAssetsUsed { get; set; }

        /// <summary>
        /// traffic for up- and download of data (in bytes)
        /// </summary>
        /// <value>traffic for up- and download of data (in bytes)</value>
        [DataMember(Name="upload_download_quota", EmitDefaultValue=false)]
        public int? UploadDownloadQuota { get; set; }

        /// <summary>
        /// number of bought connected asset addons
        /// </summary>
        /// <value>number of bought connected asset addons</value>
        [DataMember(Name="connected_asset_quota", EmitDefaultValue=false)]
        public int? ConnectedAssetQuota { get; set; }

        /// <summary>
        /// number of api calls used
        /// </summary>
        /// <value>number of api calls used</value>
        [DataMember(Name="api_calls_used", EmitDefaultValue=false)]
        public int? ApiCallsUsed { get; set; }

        /// <summary>
        /// number of storage used (in bytes)
        /// </summary>
        /// <value>number of storage used (in bytes)</value>
        [DataMember(Name="storage_used", EmitDefaultValue=false)]
        public int? StorageUsed { get; set; }

        /// <summary>
        /// data up- and download used (in bytes)
        /// </summary>
        /// <value>data up- and download used (in bytes)</value>
        [DataMember(Name="upload_download_used", EmitDefaultValue=false)]
        public int? UploadDownloadUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class APISubscriptionBase {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExternalReference: ").Append(ExternalReference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  NotificationStatus: ").Append(NotificationStatus).Append("\n");
            sb.Append("  SubscriptionType: ").Append(SubscriptionType).Append("\n");
            sb.Append("  CustomerPurchaseOrder: ").Append(CustomerPurchaseOrder).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  BilledUntil: ").Append(BilledUntil).Append("\n");
            sb.Append("  ExternalUserReference: ").Append(ExternalUserReference).Append("\n");
            sb.Append("  ExternalPlanVariantReference: ").Append(ExternalPlanVariantReference).Append("\n");
            sb.Append("  ApiCallQuota: ").Append(ApiCallQuota).Append("\n");
            sb.Append("  StorageQuota: ").Append(StorageQuota).Append("\n");
            sb.Append("  NumberAssignedAssets: ").Append(NumberAssignedAssets).Append("\n");
            sb.Append("  ConnectedAssetsUsed: ").Append(ConnectedAssetsUsed).Append("\n");
            sb.Append("  UploadDownloadQuota: ").Append(UploadDownloadQuota).Append("\n");
            sb.Append("  ConnectedAssetQuota: ").Append(ConnectedAssetQuota).Append("\n");
            sb.Append("  ApiCallsUsed: ").Append(ApiCallsUsed).Append("\n");
            sb.Append("  StorageUsed: ").Append(StorageUsed).Append("\n");
            sb.Append("  UploadDownloadUsed: ").Append(UploadDownloadUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as APISubscriptionBase);
        }

        /// <summary>
        /// Returns true if APISubscriptionBase instances are equal
        /// </summary>
        /// <param name="input">Instance of APISubscriptionBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APISubscriptionBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExternalReference == input.ExternalReference ||
                    (this.ExternalReference != null &&
                    this.ExternalReference.Equals(input.ExternalReference))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.NotificationStatus == input.NotificationStatus ||
                    (this.NotificationStatus != null &&
                    this.NotificationStatus.Equals(input.NotificationStatus))
                ) && 
                (
                    this.SubscriptionType == input.SubscriptionType ||
                    (this.SubscriptionType != null &&
                    this.SubscriptionType.Equals(input.SubscriptionType))
                ) && 
                (
                    this.CustomerPurchaseOrder == input.CustomerPurchaseOrder ||
                    (this.CustomerPurchaseOrder != null &&
                    this.CustomerPurchaseOrder.Equals(input.CustomerPurchaseOrder))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.BilledUntil == input.BilledUntil ||
                    (this.BilledUntil != null &&
                    this.BilledUntil.Equals(input.BilledUntil))
                ) && 
                (
                    this.ExternalUserReference == input.ExternalUserReference ||
                    (this.ExternalUserReference != null &&
                    this.ExternalUserReference.Equals(input.ExternalUserReference))
                ) && 
                (
                    this.ExternalPlanVariantReference == input.ExternalPlanVariantReference ||
                    (this.ExternalPlanVariantReference != null &&
                    this.ExternalPlanVariantReference.Equals(input.ExternalPlanVariantReference))
                ) && 
                (
                    this.ApiCallQuota == input.ApiCallQuota ||
                    (this.ApiCallQuota != null &&
                    this.ApiCallQuota.Equals(input.ApiCallQuota))
                ) && 
                (
                    this.StorageQuota == input.StorageQuota ||
                    (this.StorageQuota != null &&
                    this.StorageQuota.Equals(input.StorageQuota))
                ) && 
                (
                    this.NumberAssignedAssets == input.NumberAssignedAssets ||
                    (this.NumberAssignedAssets != null &&
                    this.NumberAssignedAssets.Equals(input.NumberAssignedAssets))
                ) && 
                (
                    this.ConnectedAssetsUsed == input.ConnectedAssetsUsed ||
                    (this.ConnectedAssetsUsed != null &&
                    this.ConnectedAssetsUsed.Equals(input.ConnectedAssetsUsed))
                ) && 
                (
                    this.UploadDownloadQuota == input.UploadDownloadQuota ||
                    (this.UploadDownloadQuota != null &&
                    this.UploadDownloadQuota.Equals(input.UploadDownloadQuota))
                ) && 
                (
                    this.ConnectedAssetQuota == input.ConnectedAssetQuota ||
                    (this.ConnectedAssetQuota != null &&
                    this.ConnectedAssetQuota.Equals(input.ConnectedAssetQuota))
                ) && 
                (
                    this.ApiCallsUsed == input.ApiCallsUsed ||
                    (this.ApiCallsUsed != null &&
                    this.ApiCallsUsed.Equals(input.ApiCallsUsed))
                ) && 
                (
                    this.StorageUsed == input.StorageUsed ||
                    (this.StorageUsed != null &&
                    this.StorageUsed.Equals(input.StorageUsed))
                ) && 
                (
                    this.UploadDownloadUsed == input.UploadDownloadUsed ||
                    (this.UploadDownloadUsed != null &&
                    this.UploadDownloadUsed.Equals(input.UploadDownloadUsed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExternalReference != null)
                    hashCode = hashCode * 59 + this.ExternalReference.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.NotificationStatus != null)
                    hashCode = hashCode * 59 + this.NotificationStatus.GetHashCode();
                if (this.SubscriptionType != null)
                    hashCode = hashCode * 59 + this.SubscriptionType.GetHashCode();
                if (this.CustomerPurchaseOrder != null)
                    hashCode = hashCode * 59 + this.CustomerPurchaseOrder.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.BilledUntil != null)
                    hashCode = hashCode * 59 + this.BilledUntil.GetHashCode();
                if (this.ExternalUserReference != null)
                    hashCode = hashCode * 59 + this.ExternalUserReference.GetHashCode();
                if (this.ExternalPlanVariantReference != null)
                    hashCode = hashCode * 59 + this.ExternalPlanVariantReference.GetHashCode();
                if (this.ApiCallQuota != null)
                    hashCode = hashCode * 59 + this.ApiCallQuota.GetHashCode();
                if (this.StorageQuota != null)
                    hashCode = hashCode * 59 + this.StorageQuota.GetHashCode();
                if (this.NumberAssignedAssets != null)
                    hashCode = hashCode * 59 + this.NumberAssignedAssets.GetHashCode();
                if (this.ConnectedAssetsUsed != null)
                    hashCode = hashCode * 59 + this.ConnectedAssetsUsed.GetHashCode();
                if (this.UploadDownloadQuota != null)
                    hashCode = hashCode * 59 + this.UploadDownloadQuota.GetHashCode();
                if (this.ConnectedAssetQuota != null)
                    hashCode = hashCode * 59 + this.ConnectedAssetQuota.GetHashCode();
                if (this.ApiCallsUsed != null)
                    hashCode = hashCode * 59 + this.ApiCallsUsed.GetHashCode();
                if (this.StorageUsed != null)
                    hashCode = hashCode * 59 + this.StorageUsed.GetHashCode();
                if (this.UploadDownloadUsed != null)
                    hashCode = hashCode * 59 + this.UploadDownloadUsed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
