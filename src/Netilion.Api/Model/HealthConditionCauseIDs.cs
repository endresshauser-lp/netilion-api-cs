/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// HealthConditionCauseIDs
    /// </summary>
    [DataContract]
        public partial class HealthConditionCauseIDs :  IEquatable<HealthConditionCauseIDs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthConditionCauseIDs" /> class.
        /// </summary>
        /// <param name="causes">causes (required).</param>
        public HealthConditionCauseIDs(List<NestedID> causes = default(List<NestedID>))
        {
            // to ensure "causes" is required (not null)
            if (causes == null)
            {
                throw new InvalidDataException("causes is a required property for HealthConditionCauseIDs and cannot be null");
            }
            else
            {
                this.Causes = causes;
            }
        }
        
        /// <summary>
        /// Gets or Sets Causes
        /// </summary>
        [DataMember(Name="causes", EmitDefaultValue=false)]
        public List<NestedID> Causes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HealthConditionCauseIDs {\n");
            sb.Append("  Causes: ").Append(Causes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HealthConditionCauseIDs);
        }

        /// <summary>
        /// Returns true if HealthConditionCauseIDs instances are equal
        /// </summary>
        /// <param name="input">Instance of HealthConditionCauseIDs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HealthConditionCauseIDs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Causes == input.Causes ||
                    this.Causes != null &&
                    input.Causes != null &&
                    this.Causes.SequenceEqual(input.Causes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Causes != null)
                    hashCode = hashCode * 59 + this.Causes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
