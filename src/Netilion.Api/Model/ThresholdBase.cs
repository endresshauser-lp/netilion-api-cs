/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// ThresholdBase
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "ThresholdBaseType")]
    [JsonSubtypes.KnownSubType(typeof(ThresholdRequest), "ThresholdRequest")]
        public partial class ThresholdBase :  IEquatable<ThresholdBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThresholdBase" /> class.
        /// </summary>
        /// <param name="name">name of the threshold. The name of the threshold..</param>
        /// <param name="description">description of the threshold. The description of the threshold..</param>
        /// <param name="key">key of the threshold. This key is related to the keys set in asset values..</param>
        /// <param name="unitId">Id of the unit used for the threshold value property..</param>
        /// <param name="value">the threshold value.</param>
        /// <param name="tolerance">the threshold tolerance, should be a positive value.</param>
        /// <param name="thresholdType">the threshold type, tree values can be given for now, &#x27;low&#x27; if the it is a lower threshold, &#x27;high&#x27; if it is an upper threshold and &#x27;deviation&#x27; if it is as deviation from reference values.</param>
        /// <param name="notification">Whether the threshold should send notifications when exceeded.</param>
        public ThresholdBase(string name = default(string), string description = default(string), string key = default(string), long? unitId = default(long?), float? value = default(float?), float? tolerance = default(float?), string thresholdType = default(string), bool? notification = default(bool?))
        {
            this.Name = name;
            this.Description = description;
            this.Key = key;
            this.UnitId = unitId;
            this.Value = value;
            this.Tolerance = tolerance;
            this.ThresholdType = thresholdType;
            this.Notification = notification;
        }
        
        /// <summary>
        /// name of the threshold. The name of the threshold.
        /// </summary>
        /// <value>name of the threshold. The name of the threshold.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// description of the threshold. The description of the threshold.
        /// </summary>
        /// <value>description of the threshold. The description of the threshold.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// key of the threshold. This key is related to the keys set in asset values.
        /// </summary>
        /// <value>key of the threshold. This key is related to the keys set in asset values.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Id of the unit used for the threshold value property.
        /// </summary>
        /// <value>Id of the unit used for the threshold value property.</value>
        [DataMember(Name="unit_id", EmitDefaultValue=false)]
        public long? UnitId { get; set; }

        /// <summary>
        /// the threshold value
        /// </summary>
        /// <value>the threshold value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? Value { get; set; }

        /// <summary>
        /// the threshold tolerance, should be a positive value
        /// </summary>
        /// <value>the threshold tolerance, should be a positive value</value>
        [DataMember(Name="tolerance", EmitDefaultValue=false)]
        public float? Tolerance { get; set; }

        /// <summary>
        /// the threshold type, tree values can be given for now, &#x27;low&#x27; if the it is a lower threshold, &#x27;high&#x27; if it is an upper threshold and &#x27;deviation&#x27; if it is as deviation from reference values
        /// </summary>
        /// <value>the threshold type, tree values can be given for now, &#x27;low&#x27; if the it is a lower threshold, &#x27;high&#x27; if it is an upper threshold and &#x27;deviation&#x27; if it is as deviation from reference values</value>
        [DataMember(Name="threshold_type", EmitDefaultValue=false)]
        public string ThresholdType { get; set; }

        /// <summary>
        /// Whether the threshold should send notifications when exceeded
        /// </summary>
        /// <value>Whether the threshold should send notifications when exceeded</value>
        [DataMember(Name="notification", EmitDefaultValue=false)]
        public bool? Notification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThresholdBase {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  UnitId: ").Append(UnitId).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Tolerance: ").Append(Tolerance).Append("\n");
            sb.Append("  ThresholdType: ").Append(ThresholdType).Append("\n");
            sb.Append("  Notification: ").Append(Notification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThresholdBase);
        }

        /// <summary>
        /// Returns true if ThresholdBase instances are equal
        /// </summary>
        /// <param name="input">Instance of ThresholdBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThresholdBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.UnitId == input.UnitId ||
                    (this.UnitId != null &&
                    this.UnitId.Equals(input.UnitId))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Tolerance == input.Tolerance ||
                    (this.Tolerance != null &&
                    this.Tolerance.Equals(input.Tolerance))
                ) && 
                (
                    this.ThresholdType == input.ThresholdType ||
                    (this.ThresholdType != null &&
                    this.ThresholdType.Equals(input.ThresholdType))
                ) && 
                (
                    this.Notification == input.Notification ||
                    (this.Notification != null &&
                    this.Notification.Equals(input.Notification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.UnitId != null)
                    hashCode = hashCode * 59 + this.UnitId.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Tolerance != null)
                    hashCode = hashCode * 59 + this.Tolerance.GetHashCode();
                if (this.ThresholdType != null)
                    hashCode = hashCode * 59 + this.ThresholdType.GetHashCode();
                if (this.Notification != null)
                    hashCode = hashCode * 59 + this.Notification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
