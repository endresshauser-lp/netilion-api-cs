/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// SoftwareAttachmentsBody
    /// </summary>
    [DataContract]
        public partial class SoftwareAttachmentsBody :  IEquatable<SoftwareAttachmentsBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareAttachmentsBody" /> class.
        /// </summary>
        /// <param name="file">the filedata to upload (required).</param>
        /// <param name="softwareId">the software id this software attachment belongs to (required).</param>
        /// <param name="contentDate">last edit date of the file. Datetime must be in format YYYY-MM-DD or YYYY-MM-DDThh:mm:ss.</param>
        /// <param name="remarks">remarks on the software attachment.</param>
        public SoftwareAttachmentsBody(byte[] file = default(byte[]), long? softwareId = default(long?), string contentDate = default(string), string remarks = default(string))
        {
            // to ensure "file" is required (not null)
            if (file == null)
            {
                throw new InvalidDataException("file is a required property for SoftwareAttachmentsBody and cannot be null");
            }
            else
            {
                this.File = file;
            }
            // to ensure "softwareId" is required (not null)
            if (softwareId == null)
            {
                throw new InvalidDataException("softwareId is a required property for SoftwareAttachmentsBody and cannot be null");
            }
            else
            {
                this.SoftwareId = softwareId;
            }
            this.ContentDate = contentDate;
            this.Remarks = remarks;
        }
        
        /// <summary>
        /// the filedata to upload
        /// </summary>
        /// <value>the filedata to upload</value>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public byte[] File { get; set; }

        /// <summary>
        /// the software id this software attachment belongs to
        /// </summary>
        /// <value>the software id this software attachment belongs to</value>
        [DataMember(Name="software_id", EmitDefaultValue=false)]
        public long? SoftwareId { get; set; }

        /// <summary>
        /// last edit date of the file. Datetime must be in format YYYY-MM-DD or YYYY-MM-DDThh:mm:ss
        /// </summary>
        /// <value>last edit date of the file. Datetime must be in format YYYY-MM-DD or YYYY-MM-DDThh:mm:ss</value>
        [DataMember(Name="content_date", EmitDefaultValue=false)]
        public string ContentDate { get; set; }

        /// <summary>
        /// remarks on the software attachment
        /// </summary>
        /// <value>remarks on the software attachment</value>
        [DataMember(Name="remarks", EmitDefaultValue=false)]
        public string Remarks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SoftwareAttachmentsBody {\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  SoftwareId: ").Append(SoftwareId).Append("\n");
            sb.Append("  ContentDate: ").Append(ContentDate).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SoftwareAttachmentsBody);
        }

        /// <summary>
        /// Returns true if SoftwareAttachmentsBody instances are equal
        /// </summary>
        /// <param name="input">Instance of SoftwareAttachmentsBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SoftwareAttachmentsBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.SoftwareId == input.SoftwareId ||
                    (this.SoftwareId != null &&
                    this.SoftwareId.Equals(input.SoftwareId))
                ) && 
                (
                    this.ContentDate == input.ContentDate ||
                    (this.ContentDate != null &&
                    this.ContentDate.Equals(input.ContentDate))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.File != null)
                    hashCode = hashCode * 59 + this.File.GetHashCode();
                if (this.SoftwareId != null)
                    hashCode = hashCode * 59 + this.SoftwareId.GetHashCode();
                if (this.ContentDate != null)
                    hashCode = hashCode * 59 + this.ContentDate.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
