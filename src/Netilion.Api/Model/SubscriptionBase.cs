/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// SubscriptionBase
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "subscriptionBaseType")]
    [JsonSubtypes.KnownSubType(typeof(SubscriptionResponse), "SubscriptionResponse")]
    [JsonSubtypes.KnownSubType(typeof(SubscriptionRequest), "SubscriptionRequest")]
        public partial class SubscriptionBase :  IEquatable<SubscriptionBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionBase" /> class.
        /// </summary>
        /// <param name="displayName">Name of the subscription.</param>
        /// <param name="description">Description of the subscription.</param>
        /// <param name="externalReference">can be used to store id of external subscription managment system.</param>
        /// <param name="status">status of the subscription, can be  open, payment_required, confirmed, cancelled, scheduled_update and non_renewing.</param>
        /// <param name="notificationStatus">status of the mail notification for the subscription, can be no_notification, first_notification, second_notification or alert_notification.</param>
        /// <param name="customerPurchaseOrder">reference for customer system.</param>
        /// <param name="startDate">start date of the subscription.</param>
        /// <param name="endDate">end date of the subscription.</param>
        /// <param name="billedUntil">end date of the subscription.</param>
        /// <param name="trialEndDate">end date of the subscription&#x27;s trial period.</param>
        /// <param name="cancelledAt">date when subscription was cancelled.</param>
        /// <param name="externalUserReference">can be used to store user id of external subscription managment system.</param>
        /// <param name="externalPlanVariantReference">can be used to store paln variant of external subscription managment system.</param>
        /// <param name="numberAssignedAssets">number of assigned assets.</param>
        /// <param name="assetQuota">number of bought assets.</param>
        /// <param name="storageQuota">number of bought storage (in bytes).</param>
        /// <param name="seatQuota">number of bought seats.</param>
        /// <param name="forceMfa">will force MFA for the users using this subscription including owner and seat users.</param>
        /// <param name="resellerLabel">Custom label given to the subscription by the reseller user.</param>
        public SubscriptionBase(string displayName = default(string), string description = default(string), string externalReference = default(string), string status = default(string), string notificationStatus = default(string), string customerPurchaseOrder = default(string), string startDate = default(string), string endDate = default(string), string billedUntil = default(string), string trialEndDate = default(string), string cancelledAt = default(string), string externalUserReference = default(string), string externalPlanVariantReference = default(string), int? numberAssignedAssets = default(int?), int? assetQuota = default(int?), int? storageQuota = default(int?), int? seatQuota = default(int?), bool? forceMfa = default(bool?), string resellerLabel = default(string))
        {
            this.DisplayName = displayName;
            this.Description = description;
            this.ExternalReference = externalReference;
            this.Status = status;
            this.NotificationStatus = notificationStatus;
            this.CustomerPurchaseOrder = customerPurchaseOrder;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.BilledUntil = billedUntil;
            this.TrialEndDate = trialEndDate;
            this.CancelledAt = cancelledAt;
            this.ExternalUserReference = externalUserReference;
            this.ExternalPlanVariantReference = externalPlanVariantReference;
            this.NumberAssignedAssets = numberAssignedAssets;
            this.AssetQuota = assetQuota;
            this.StorageQuota = storageQuota;
            this.SeatQuota = seatQuota;
            this.ForceMfa = forceMfa;
            this.ResellerLabel = resellerLabel;
        }
        
        /// <summary>
        /// Name of the subscription
        /// </summary>
        /// <value>Name of the subscription</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Description of the subscription
        /// </summary>
        /// <value>Description of the subscription</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// can be used to store id of external subscription managment system
        /// </summary>
        /// <value>can be used to store id of external subscription managment system</value>
        [DataMember(Name="external_reference", EmitDefaultValue=false)]
        public string ExternalReference { get; set; }

        /// <summary>
        /// status of the subscription, can be  open, payment_required, confirmed, cancelled, scheduled_update and non_renewing
        /// </summary>
        /// <value>status of the subscription, can be  open, payment_required, confirmed, cancelled, scheduled_update and non_renewing</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// status of the mail notification for the subscription, can be no_notification, first_notification, second_notification or alert_notification
        /// </summary>
        /// <value>status of the mail notification for the subscription, can be no_notification, first_notification, second_notification or alert_notification</value>
        [DataMember(Name="notification_status", EmitDefaultValue=false)]
        public string NotificationStatus { get; set; }

        /// <summary>
        /// reference for customer system
        /// </summary>
        /// <value>reference for customer system</value>
        [DataMember(Name="customer_purchase_order", EmitDefaultValue=false)]
        public string CustomerPurchaseOrder { get; set; }

        /// <summary>
        /// start date of the subscription
        /// </summary>
        /// <value>start date of the subscription</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// end date of the subscription
        /// </summary>
        /// <value>end date of the subscription</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// end date of the subscription
        /// </summary>
        /// <value>end date of the subscription</value>
        [DataMember(Name="billed_until", EmitDefaultValue=false)]
        public string BilledUntil { get; set; }

        /// <summary>
        /// end date of the subscription&#x27;s trial period
        /// </summary>
        /// <value>end date of the subscription&#x27;s trial period</value>
        [DataMember(Name="trial_end_date", EmitDefaultValue=false)]
        public string TrialEndDate { get; set; }

        /// <summary>
        /// date when subscription was cancelled
        /// </summary>
        /// <value>date when subscription was cancelled</value>
        [DataMember(Name="cancelled_at", EmitDefaultValue=false)]
        public string CancelledAt { get; set; }

        /// <summary>
        /// can be used to store user id of external subscription managment system
        /// </summary>
        /// <value>can be used to store user id of external subscription managment system</value>
        [DataMember(Name="external_user_reference", EmitDefaultValue=false)]
        public string ExternalUserReference { get; set; }

        /// <summary>
        /// can be used to store paln variant of external subscription managment system
        /// </summary>
        /// <value>can be used to store paln variant of external subscription managment system</value>
        [DataMember(Name="external_plan_variant_reference", EmitDefaultValue=false)]
        public string ExternalPlanVariantReference { get; set; }

        /// <summary>
        /// number of assigned assets
        /// </summary>
        /// <value>number of assigned assets</value>
        [DataMember(Name="number_assigned_assets", EmitDefaultValue=false)]
        public int? NumberAssignedAssets { get; set; }

        /// <summary>
        /// number of bought assets
        /// </summary>
        /// <value>number of bought assets</value>
        [DataMember(Name="asset_quota", EmitDefaultValue=false)]
        public int? AssetQuota { get; set; }

        /// <summary>
        /// number of bought storage (in bytes)
        /// </summary>
        /// <value>number of bought storage (in bytes)</value>
        [DataMember(Name="storage_quota", EmitDefaultValue=false)]
        public int? StorageQuota { get; set; }

        /// <summary>
        /// number of bought seats
        /// </summary>
        /// <value>number of bought seats</value>
        [DataMember(Name="seat_quota", EmitDefaultValue=false)]
        public int? SeatQuota { get; set; }

        /// <summary>
        /// will force MFA for the users using this subscription including owner and seat users
        /// </summary>
        /// <value>will force MFA for the users using this subscription including owner and seat users</value>
        [DataMember(Name="force_mfa", EmitDefaultValue=false)]
        public bool? ForceMfa { get; set; }

        /// <summary>
        /// Custom label given to the subscription by the reseller user
        /// </summary>
        /// <value>Custom label given to the subscription by the reseller user</value>
        [DataMember(Name="reseller_label", EmitDefaultValue=false)]
        public string ResellerLabel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionBase {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExternalReference: ").Append(ExternalReference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  NotificationStatus: ").Append(NotificationStatus).Append("\n");
            sb.Append("  CustomerPurchaseOrder: ").Append(CustomerPurchaseOrder).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  BilledUntil: ").Append(BilledUntil).Append("\n");
            sb.Append("  TrialEndDate: ").Append(TrialEndDate).Append("\n");
            sb.Append("  CancelledAt: ").Append(CancelledAt).Append("\n");
            sb.Append("  ExternalUserReference: ").Append(ExternalUserReference).Append("\n");
            sb.Append("  ExternalPlanVariantReference: ").Append(ExternalPlanVariantReference).Append("\n");
            sb.Append("  NumberAssignedAssets: ").Append(NumberAssignedAssets).Append("\n");
            sb.Append("  AssetQuota: ").Append(AssetQuota).Append("\n");
            sb.Append("  StorageQuota: ").Append(StorageQuota).Append("\n");
            sb.Append("  SeatQuota: ").Append(SeatQuota).Append("\n");
            sb.Append("  ForceMfa: ").Append(ForceMfa).Append("\n");
            sb.Append("  ResellerLabel: ").Append(ResellerLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionBase);
        }

        /// <summary>
        /// Returns true if SubscriptionBase instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExternalReference == input.ExternalReference ||
                    (this.ExternalReference != null &&
                    this.ExternalReference.Equals(input.ExternalReference))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.NotificationStatus == input.NotificationStatus ||
                    (this.NotificationStatus != null &&
                    this.NotificationStatus.Equals(input.NotificationStatus))
                ) && 
                (
                    this.CustomerPurchaseOrder == input.CustomerPurchaseOrder ||
                    (this.CustomerPurchaseOrder != null &&
                    this.CustomerPurchaseOrder.Equals(input.CustomerPurchaseOrder))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.BilledUntil == input.BilledUntil ||
                    (this.BilledUntil != null &&
                    this.BilledUntil.Equals(input.BilledUntil))
                ) && 
                (
                    this.TrialEndDate == input.TrialEndDate ||
                    (this.TrialEndDate != null &&
                    this.TrialEndDate.Equals(input.TrialEndDate))
                ) && 
                (
                    this.CancelledAt == input.CancelledAt ||
                    (this.CancelledAt != null &&
                    this.CancelledAt.Equals(input.CancelledAt))
                ) && 
                (
                    this.ExternalUserReference == input.ExternalUserReference ||
                    (this.ExternalUserReference != null &&
                    this.ExternalUserReference.Equals(input.ExternalUserReference))
                ) && 
                (
                    this.ExternalPlanVariantReference == input.ExternalPlanVariantReference ||
                    (this.ExternalPlanVariantReference != null &&
                    this.ExternalPlanVariantReference.Equals(input.ExternalPlanVariantReference))
                ) && 
                (
                    this.NumberAssignedAssets == input.NumberAssignedAssets ||
                    (this.NumberAssignedAssets != null &&
                    this.NumberAssignedAssets.Equals(input.NumberAssignedAssets))
                ) && 
                (
                    this.AssetQuota == input.AssetQuota ||
                    (this.AssetQuota != null &&
                    this.AssetQuota.Equals(input.AssetQuota))
                ) && 
                (
                    this.StorageQuota == input.StorageQuota ||
                    (this.StorageQuota != null &&
                    this.StorageQuota.Equals(input.StorageQuota))
                ) && 
                (
                    this.SeatQuota == input.SeatQuota ||
                    (this.SeatQuota != null &&
                    this.SeatQuota.Equals(input.SeatQuota))
                ) && 
                (
                    this.ForceMfa == input.ForceMfa ||
                    (this.ForceMfa != null &&
                    this.ForceMfa.Equals(input.ForceMfa))
                ) && 
                (
                    this.ResellerLabel == input.ResellerLabel ||
                    (this.ResellerLabel != null &&
                    this.ResellerLabel.Equals(input.ResellerLabel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExternalReference != null)
                    hashCode = hashCode * 59 + this.ExternalReference.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.NotificationStatus != null)
                    hashCode = hashCode * 59 + this.NotificationStatus.GetHashCode();
                if (this.CustomerPurchaseOrder != null)
                    hashCode = hashCode * 59 + this.CustomerPurchaseOrder.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.BilledUntil != null)
                    hashCode = hashCode * 59 + this.BilledUntil.GetHashCode();
                if (this.TrialEndDate != null)
                    hashCode = hashCode * 59 + this.TrialEndDate.GetHashCode();
                if (this.CancelledAt != null)
                    hashCode = hashCode * 59 + this.CancelledAt.GetHashCode();
                if (this.ExternalUserReference != null)
                    hashCode = hashCode * 59 + this.ExternalUserReference.GetHashCode();
                if (this.ExternalPlanVariantReference != null)
                    hashCode = hashCode * 59 + this.ExternalPlanVariantReference.GetHashCode();
                if (this.NumberAssignedAssets != null)
                    hashCode = hashCode * 59 + this.NumberAssignedAssets.GetHashCode();
                if (this.AssetQuota != null)
                    hashCode = hashCode * 59 + this.AssetQuota.GetHashCode();
                if (this.StorageQuota != null)
                    hashCode = hashCode * 59 + this.StorageQuota.GetHashCode();
                if (this.SeatQuota != null)
                    hashCode = hashCode * 59 + this.SeatQuota.GetHashCode();
                if (this.ForceMfa != null)
                    hashCode = hashCode * 59 + this.ForceMfa.GetHashCode();
                if (this.ResellerLabel != null)
                    hashCode = hashCode * 59 + this.ResellerLabel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
