/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// ClientApplicationRequest
    /// </summary>
    [DataContract]
        public partial class ClientApplicationRequest : ClientApplicationBase,  IEquatable<ClientApplicationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApplicationRequest" /> class.
        /// </summary>
        /// <param name="contactPerson">contactPerson.</param>
        /// <param name="technicalUser">technicalUser.</param>
        /// <param name="billingContact">billingContact.</param>
        public ClientApplicationRequest(NestedID contactPerson = default(NestedID), NestedID technicalUser = default(NestedID), BillingContactRequest billingContact = default(BillingContactRequest), string name = default(string), string description = default(string), List<string> redirectUris = default(List<string>), bool? isInsider = default(bool?), bool? canSendMails = default(bool?)) : base(name, description, redirectUris, isInsider, canSendMails)
        {
            this.ContactPerson = contactPerson;
            this.TechnicalUser = technicalUser;
            this.BillingContact = billingContact;
        }
        
        /// <summary>
        /// Gets or Sets ContactPerson
        /// </summary>
        [DataMember(Name="contact_person", EmitDefaultValue=false)]
        public NestedID ContactPerson { get; set; }

        /// <summary>
        /// Gets or Sets TechnicalUser
        /// </summary>
        [DataMember(Name="technical_user", EmitDefaultValue=false)]
        public NestedID TechnicalUser { get; set; }

        /// <summary>
        /// Gets or Sets BillingContact
        /// </summary>
        [DataMember(Name="billing_contact", EmitDefaultValue=false)]
        public BillingContactRequest BillingContact { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientApplicationRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  TechnicalUser: ").Append(TechnicalUser).Append("\n");
            sb.Append("  BillingContact: ").Append(BillingContact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientApplicationRequest);
        }

        /// <summary>
        /// Returns true if ClientApplicationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientApplicationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientApplicationRequest input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && base.Equals(input) && 
                (
                    this.TechnicalUser == input.TechnicalUser ||
                    (this.TechnicalUser != null &&
                    this.TechnicalUser.Equals(input.TechnicalUser))
                ) && base.Equals(input) && 
                (
                    this.BillingContact == input.BillingContact ||
                    (this.BillingContact != null &&
                    this.BillingContact.Equals(input.BillingContact))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ContactPerson != null)
                    hashCode = hashCode * 59 + this.ContactPerson.GetHashCode();
                if (this.TechnicalUser != null)
                    hashCode = hashCode * 59 + this.TechnicalUser.GetHashCode();
                if (this.BillingContact != null)
                    hashCode = hashCode * 59 + this.BillingContact.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
