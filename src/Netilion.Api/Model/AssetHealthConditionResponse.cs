/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// AssetHealthConditionResponse
    /// </summary>
    [DataContract]
        public partial class AssetHealthConditionResponse : HealthConditionBase,  IEquatable<AssetHealthConditionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetHealthConditionResponse" /> class.
        /// </summary>
        /// <param name="id">Id of health condition.</param>
        /// <param name="assetStatus">assetStatus.</param>
        /// <param name="channel">channel for the health condition.</param>
        /// <param name="module">module for the health condition.</param>
        /// <param name="links">links.</param>
        public AssetHealthConditionResponse(long? id = default(long?), NestedIDHref assetStatus = default(NestedIDHref), string channel = default(string), string module = default(string), Links1 links = default(Links1), string diagnosisCode = default(string)) : base(diagnosisCode)
        {
            this.Id = id;
            this.AssetStatus = assetStatus;
            this.Channel = channel;
            this.Module = module;
            this.Links = links;
        }
        
        /// <summary>
        /// Id of health condition
        /// </summary>
        /// <value>Id of health condition</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AssetStatus
        /// </summary>
        [DataMember(Name="asset_status", EmitDefaultValue=false)]
        public NestedIDHref AssetStatus { get; set; }

        /// <summary>
        /// channel for the health condition
        /// </summary>
        /// <value>channel for the health condition</value>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public string Channel { get; set; }

        /// <summary>
        /// module for the health condition
        /// </summary>
        /// <value>module for the health condition</value>
        [DataMember(Name="module", EmitDefaultValue=false)]
        public string Module { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public Links1 Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetHealthConditionResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssetStatus: ").Append(AssetStatus).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetHealthConditionResponse);
        }

        /// <summary>
        /// Returns true if AssetHealthConditionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetHealthConditionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetHealthConditionResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && base.Equals(input) && 
                (
                    this.AssetStatus == input.AssetStatus ||
                    (this.AssetStatus != null &&
                    this.AssetStatus.Equals(input.AssetStatus))
                ) && base.Equals(input) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && base.Equals(input) && 
                (
                    this.Module == input.Module ||
                    (this.Module != null &&
                    this.Module.Equals(input.Module))
                ) && base.Equals(input) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AssetStatus != null)
                    hashCode = hashCode * 59 + this.AssetStatus.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.Module != null)
                    hashCode = hashCode * 59 + this.Module.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
