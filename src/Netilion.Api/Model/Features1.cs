/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// Features1
    /// </summary>
    [DataContract]
        public partial class Features1 :  IEquatable<Features1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Features1" /> class.
        /// </summary>
        /// <param name="id">Id of the feature (required).</param>
        /// <param name="href">URL of feature (required).</param>
        /// <param name="featureKey">feature_key of product feature (required).</param>
        /// <param name="description">description text of the product feature.</param>
        /// <param name="options">options.</param>
        public Features1(long? id = default(long?), string href = default(string), string featureKey = default(string), string description = default(string), List<Options> options = default(List<Options>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Features1 and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "href" is required (not null)
            if (href == null)
            {
                throw new InvalidDataException("href is a required property for Features1 and cannot be null");
            }
            else
            {
                this.Href = href;
            }
            // to ensure "featureKey" is required (not null)
            if (featureKey == null)
            {
                throw new InvalidDataException("featureKey is a required property for Features1 and cannot be null");
            }
            else
            {
                this.FeatureKey = featureKey;
            }
            this.Description = description;
            this.Options = options;
        }
        
        /// <summary>
        /// Id of the feature
        /// </summary>
        /// <value>Id of the feature</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// URL of feature
        /// </summary>
        /// <value>URL of feature</value>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// feature_key of product feature
        /// </summary>
        /// <value>feature_key of product feature</value>
        [DataMember(Name="feature_key", EmitDefaultValue=false)]
        public string FeatureKey { get; set; }

        /// <summary>
        /// description text of the product feature
        /// </summary>
        /// <value>description text of the product feature</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<Options> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Features1 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  FeatureKey: ").Append(FeatureKey).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Features1);
        }

        /// <summary>
        /// Returns true if Features1 instances are equal
        /// </summary>
        /// <param name="input">Instance of Features1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Features1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.FeatureKey == input.FeatureKey ||
                    (this.FeatureKey != null &&
                    this.FeatureKey.Equals(input.FeatureKey))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.FeatureKey != null)
                    hashCode = hashCode * 59 + this.FeatureKey.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
