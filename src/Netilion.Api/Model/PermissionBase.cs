/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// PermissionBase
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "permissionBaseType")]
    [JsonSubtypes.KnownSubType(typeof(PermissionRequest), "PermissionRequest")]
    [JsonSubtypes.KnownSubType(typeof(PermissionResponse), "PermissionResponse")]
        public partial class PermissionBase :  IEquatable<PermissionBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionBase" /> class.
        /// </summary>
        /// <param name="permissionType">possible values are: &#x27;can_read&#x27;, &#x27;can_update&#x27;, &#x27;can_delete&#x27; and &#x27;can_permit&#x27;.</param>
        /// <param name="assignable">assignable.</param>
        /// <param name="permitable">permitable.</param>
        public PermissionBase(string permissionType = default(string), Assignable assignable = default(Assignable), Permitable permitable = default(Permitable))
        {
            this.PermissionType = permissionType;
            this.Assignable = assignable;
            this.Permitable = permitable;
        }
        
        /// <summary>
        /// possible values are: &#x27;can_read&#x27;, &#x27;can_update&#x27;, &#x27;can_delete&#x27; and &#x27;can_permit&#x27;
        /// </summary>
        /// <value>possible values are: &#x27;can_read&#x27;, &#x27;can_update&#x27;, &#x27;can_delete&#x27; and &#x27;can_permit&#x27;</value>
        [DataMember(Name="permission_type", EmitDefaultValue=false)]
        public string PermissionType { get; set; }

        /// <summary>
        /// Gets or Sets Assignable
        /// </summary>
        [DataMember(Name="assignable", EmitDefaultValue=false)]
        public Assignable Assignable { get; set; }

        /// <summary>
        /// Gets or Sets Permitable
        /// </summary>
        [DataMember(Name="permitable", EmitDefaultValue=false)]
        public Permitable Permitable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PermissionBase {\n");
            sb.Append("  PermissionType: ").Append(PermissionType).Append("\n");
            sb.Append("  Assignable: ").Append(Assignable).Append("\n");
            sb.Append("  Permitable: ").Append(Permitable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermissionBase);
        }

        /// <summary>
        /// Returns true if PermissionBase instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PermissionType == input.PermissionType ||
                    (this.PermissionType != null &&
                    this.PermissionType.Equals(input.PermissionType))
                ) && 
                (
                    this.Assignable == input.Assignable ||
                    (this.Assignable != null &&
                    this.Assignable.Equals(input.Assignable))
                ) && 
                (
                    this.Permitable == input.Permitable ||
                    (this.Permitable != null &&
                    this.Permitable.Equals(input.Permitable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PermissionType != null)
                    hashCode = hashCode * 59 + this.PermissionType.GetHashCode();
                if (this.Assignable != null)
                    hashCode = hashCode * 59 + this.Assignable.GetHashCode();
                if (this.Permitable != null)
                    hashCode = hashCode * 59 + this.Permitable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
