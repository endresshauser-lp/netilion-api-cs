/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// UserResponse
    /// </summary>
    [DataContract]
        public partial class UserResponse : UserBase,  IEquatable<UserResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResponse" /> class.
        /// </summary>
        /// <param name="id">Id of object.</param>
        /// <param name="confirmedAt">Timestamp at which the user was confirmed.</param>
        /// <param name="confirmationSentAt">Timestamp at which the confirmation mail was sent to the user.</param>
        /// <param name="createdAt">Timestamp at which the user was created.</param>
        /// <param name="updatedAt">Timestamp at which the user was last changed.</param>
        /// <param name="disabled">disabled.</param>
        /// <param name="address">address.</param>
        /// <param name="links">links.</param>
        public UserResponse(long? id = default(long?), string confirmedAt = default(string), string confirmationSentAt = default(string), string createdAt = default(string), string updatedAt = default(string), bool? disabled = default(bool?), UserAddressResponse address = default(UserAddressResponse), UserResponseLinks links = default(UserResponseLinks), string email = default(string), string firstName = default(string), string lastName = default(string)) : base(email, firstName, lastName)
        {
            this.Id = id;
            this.ConfirmedAt = confirmedAt;
            this.ConfirmationSentAt = confirmationSentAt;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Disabled = disabled;
            this.Address = address;
            this.Links = links;
        }
        
        /// <summary>
        /// Id of object
        /// </summary>
        /// <value>Id of object</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Timestamp at which the user was confirmed
        /// </summary>
        /// <value>Timestamp at which the user was confirmed</value>
        [DataMember(Name="confirmed_at", EmitDefaultValue=false)]
        public string ConfirmedAt { get; set; }

        /// <summary>
        /// Timestamp at which the confirmation mail was sent to the user
        /// </summary>
        /// <value>Timestamp at which the confirmation mail was sent to the user</value>
        [DataMember(Name="confirmation_sent_at", EmitDefaultValue=false)]
        public string ConfirmationSentAt { get; set; }

        /// <summary>
        /// Timestamp at which the user was created
        /// </summary>
        /// <value>Timestamp at which the user was created</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Timestamp at which the user was last changed
        /// </summary>
        /// <value>Timestamp at which the user was last changed</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name="disabled", EmitDefaultValue=false)]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public UserAddressResponse Address { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public UserResponseLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ConfirmedAt: ").Append(ConfirmedAt).Append("\n");
            sb.Append("  ConfirmationSentAt: ").Append(ConfirmationSentAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserResponse);
        }

        /// <summary>
        /// Returns true if UserResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UserResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && base.Equals(input) && 
                (
                    this.ConfirmedAt == input.ConfirmedAt ||
                    (this.ConfirmedAt != null &&
                    this.ConfirmedAt.Equals(input.ConfirmedAt))
                ) && base.Equals(input) && 
                (
                    this.ConfirmationSentAt == input.ConfirmationSentAt ||
                    (this.ConfirmationSentAt != null &&
                    this.ConfirmationSentAt.Equals(input.ConfirmationSentAt))
                ) && base.Equals(input) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && base.Equals(input) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && base.Equals(input) && 
                (
                    this.Disabled == input.Disabled ||
                    (this.Disabled != null &&
                    this.Disabled.Equals(input.Disabled))
                ) && base.Equals(input) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && base.Equals(input) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ConfirmedAt != null)
                    hashCode = hashCode * 59 + this.ConfirmedAt.GetHashCode();
                if (this.ConfirmationSentAt != null)
                    hashCode = hashCode * 59 + this.ConfirmationSentAt.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Disabled != null)
                    hashCode = hashCode * 59 + this.Disabled.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
