/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// AddressBase
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "addressBaseType")]
    [JsonSubtypes.KnownSubType(typeof(ShippingAddressResponse), "ShippingAddressResponse")]
    [JsonSubtypes.KnownSubType(typeof(BillingContactResponse), "BillingContactResponse")]
    [JsonSubtypes.KnownSubType(typeof(BillingAddressResponse), "BillingAddressResponse")]
    [JsonSubtypes.KnownSubType(typeof(CompanyAddressRequest), "CompanyAddressRequest")]
    [JsonSubtypes.KnownSubType(typeof(UserAddressRequest), "UserAddressRequest")]
    [JsonSubtypes.KnownSubType(typeof(ShippingAddressRequest), "ShippingAddressRequest")]
    [JsonSubtypes.KnownSubType(typeof(BillingAddressRequest), "BillingAddressRequest")]
    [JsonSubtypes.KnownSubType(typeof(UserAddressResponse), "UserAddressResponse")]
    [JsonSubtypes.KnownSubType(typeof(BillingContactRequest), "BillingContactRequest")]
    [JsonSubtypes.KnownSubType(typeof(CompanyAddressResponse), "CompanyAddressResponse")]
        public partial class AddressBase :  IEquatable<AddressBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressBase" /> class.
        /// </summary>
        /// <param name="street">streetname (required).</param>
        /// <param name="streetNumber">street number.</param>
        /// <param name="zipCode">zip code of the city (required).</param>
        /// <param name="city">city name (required).</param>
        /// <param name="regionCode">code of the region.</param>
        /// <param name="countryCode">abbreviation of the country conform to ISO-3166 (required).</param>
        /// <param name="phone">phone number.</param>
        /// <param name="companyName">company name.</param>
        public AddressBase(string street = default(string), string streetNumber = default(string), string zipCode = default(string), string city = default(string), string regionCode = default(string), string countryCode = default(string), string phone = default(string), string companyName = default(string))
        {
            // to ensure "street" is required (not null)
            if (street == null)
            {
                throw new InvalidDataException("street is a required property for AddressBase and cannot be null");
            }
            else
            {
                this.Street = street;
            }
            // to ensure "zipCode" is required (not null)
            if (zipCode == null)
            {
                throw new InvalidDataException("zipCode is a required property for AddressBase and cannot be null");
            }
            else
            {
                this.ZipCode = zipCode;
            }
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new InvalidDataException("city is a required property for AddressBase and cannot be null");
            }
            else
            {
                this.City = city;
            }
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new InvalidDataException("countryCode is a required property for AddressBase and cannot be null");
            }
            else
            {
                this.CountryCode = countryCode;
            }
            this.StreetNumber = streetNumber;
            this.RegionCode = regionCode;
            this.Phone = phone;
            this.CompanyName = companyName;
        }
        
        /// <summary>
        /// streetname
        /// </summary>
        /// <value>streetname</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// street number
        /// </summary>
        /// <value>street number</value>
        [DataMember(Name="street_number", EmitDefaultValue=false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// zip code of the city
        /// </summary>
        /// <value>zip code of the city</value>
        [DataMember(Name="zip_code", EmitDefaultValue=false)]
        public string ZipCode { get; set; }

        /// <summary>
        /// city name
        /// </summary>
        /// <value>city name</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// code of the region
        /// </summary>
        /// <value>code of the region</value>
        [DataMember(Name="region_code", EmitDefaultValue=false)]
        public string RegionCode { get; set; }

        /// <summary>
        /// abbreviation of the country conform to ISO-3166
        /// </summary>
        /// <value>abbreviation of the country conform to ISO-3166</value>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// phone number
        /// </summary>
        /// <value>phone number</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// company name
        /// </summary>
        /// <value>company name</value>
        [DataMember(Name="company_name", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressBase {\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  RegionCode: ").Append(RegionCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressBase);
        }

        /// <summary>
        /// Returns true if AddressBase instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.RegionCode == input.RegionCode ||
                    (this.RegionCode != null &&
                    this.RegionCode.Equals(input.RegionCode))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.ZipCode != null)
                    hashCode = hashCode * 59 + this.ZipCode.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.RegionCode != null)
                    hashCode = hashCode * 59 + this.RegionCode.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
