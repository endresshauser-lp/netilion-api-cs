/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// SpecificationBase
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "specificationBaseType")]
    [JsonSubtypes.KnownSubType(typeof(SpecificationUIVisibleRequest), "SpecificationUIVisibleRequest")]
    [JsonSubtypes.KnownSubType(typeof(SpecificationUIVisibleResponse), "SpecificationUIVisibleResponse")]
    [JsonSubtypes.KnownSubType(typeof(SpecificationRequest), "SpecificationRequest")]
    [JsonSubtypes.KnownSubType(typeof(SpecificationResponse), "SpecificationResponse")]
        public partial class SpecificationBase :  IEquatable<SpecificationBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecificationBase" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="unit">unit.</param>
        /// <param name="sourceTimestamp">source time stamp of the value.</param>
        public SpecificationBase(string value = default(string), string unit = default(string), string sourceTimestamp = default(string))
        {
            this.Value = value;
            this.Unit = unit;
            this.SourceTimestamp = sourceTimestamp;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// source time stamp of the value
        /// </summary>
        /// <value>source time stamp of the value</value>
        [DataMember(Name="source_timestamp", EmitDefaultValue=false)]
        public string SourceTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpecificationBase {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  SourceTimestamp: ").Append(SourceTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpecificationBase);
        }

        /// <summary>
        /// Returns true if SpecificationBase instances are equal
        /// </summary>
        /// <param name="input">Instance of SpecificationBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecificationBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.SourceTimestamp == input.SourceTimestamp ||
                    (this.SourceTimestamp != null &&
                    this.SourceTimestamp.Equals(input.SourceTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.SourceTimestamp != null)
                    hashCode = hashCode * 59 + this.SourceTimestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
