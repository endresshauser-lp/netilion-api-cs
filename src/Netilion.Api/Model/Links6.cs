/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// Links6
    /// </summary>
    [DataContract]
        public partial class Links6 :  IEquatable<Links6>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Links6" /> class.
        /// </summary>
        /// <param name="attachments">attachments.</param>
        /// <param name="categories">categories.</param>
        /// <param name="assets">assets.</param>
        /// <param name="billOfMaterials">billOfMaterials.</param>
        /// <param name="events">events.</param>
        /// <param name="deliveries">deliveries.</param>
        /// <param name="products">products.</param>
        /// <param name="instrumentations">instrumentations.</param>
        /// <param name="nodes">nodes.</param>
        /// <param name="purchaseOrders">purchaseOrders.</param>
        /// <param name="quotations">quotations.</param>
        /// <param name="requestForQuotations">requestForQuotations.</param>
        public Links6(Link attachments = default(Link), Link categories = default(Link), Link assets = default(Link), Link billOfMaterials = default(Link), Link events = default(Link), Link deliveries = default(Link), Link products = default(Link), Link instrumentations = default(Link), Link nodes = default(Link), Link purchaseOrders = default(Link), Link quotations = default(Link), Link requestForQuotations = default(Link))
        {
            this.Attachments = attachments;
            this.Categories = categories;
            this.Assets = assets;
            this.BillOfMaterials = billOfMaterials;
            this.Events = events;
            this.Deliveries = deliveries;
            this.Products = products;
            this.Instrumentations = instrumentations;
            this.Nodes = nodes;
            this.PurchaseOrders = purchaseOrders;
            this.Quotations = quotations;
            this.RequestForQuotations = requestForQuotations;
        }
        
        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public Link Attachments { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public Link Categories { get; set; }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name="assets", EmitDefaultValue=false)]
        public Link Assets { get; set; }

        /// <summary>
        /// Gets or Sets BillOfMaterials
        /// </summary>
        [DataMember(Name="bill_of_materials", EmitDefaultValue=false)]
        public Link BillOfMaterials { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public Link Events { get; set; }

        /// <summary>
        /// Gets or Sets Deliveries
        /// </summary>
        [DataMember(Name="deliveries", EmitDefaultValue=false)]
        public Link Deliveries { get; set; }

        /// <summary>
        /// Gets or Sets Products
        /// </summary>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public Link Products { get; set; }

        /// <summary>
        /// Gets or Sets Instrumentations
        /// </summary>
        [DataMember(Name="instrumentations", EmitDefaultValue=false)]
        public Link Instrumentations { get; set; }

        /// <summary>
        /// Gets or Sets Nodes
        /// </summary>
        [DataMember(Name="nodes", EmitDefaultValue=false)]
        public Link Nodes { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrders
        /// </summary>
        [DataMember(Name="purchase_orders", EmitDefaultValue=false)]
        public Link PurchaseOrders { get; set; }

        /// <summary>
        /// Gets or Sets Quotations
        /// </summary>
        [DataMember(Name="quotations", EmitDefaultValue=false)]
        public Link Quotations { get; set; }

        /// <summary>
        /// Gets or Sets RequestForQuotations
        /// </summary>
        [DataMember(Name="request_for_quotations", EmitDefaultValue=false)]
        public Link RequestForQuotations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Links6 {\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  BillOfMaterials: ").Append(BillOfMaterials).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Deliveries: ").Append(Deliveries).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  Instrumentations: ").Append(Instrumentations).Append("\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  PurchaseOrders: ").Append(PurchaseOrders).Append("\n");
            sb.Append("  Quotations: ").Append(Quotations).Append("\n");
            sb.Append("  RequestForQuotations: ").Append(RequestForQuotations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Links6);
        }

        /// <summary>
        /// Returns true if Links6 instances are equal
        /// </summary>
        /// <param name="input">Instance of Links6 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Links6 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attachments == input.Attachments ||
                    (this.Attachments != null &&
                    this.Attachments.Equals(input.Attachments))
                ) && 
                (
                    this.Categories == input.Categories ||
                    (this.Categories != null &&
                    this.Categories.Equals(input.Categories))
                ) && 
                (
                    this.Assets == input.Assets ||
                    (this.Assets != null &&
                    this.Assets.Equals(input.Assets))
                ) && 
                (
                    this.BillOfMaterials == input.BillOfMaterials ||
                    (this.BillOfMaterials != null &&
                    this.BillOfMaterials.Equals(input.BillOfMaterials))
                ) && 
                (
                    this.Events == input.Events ||
                    (this.Events != null &&
                    this.Events.Equals(input.Events))
                ) && 
                (
                    this.Deliveries == input.Deliveries ||
                    (this.Deliveries != null &&
                    this.Deliveries.Equals(input.Deliveries))
                ) && 
                (
                    this.Products == input.Products ||
                    (this.Products != null &&
                    this.Products.Equals(input.Products))
                ) && 
                (
                    this.Instrumentations == input.Instrumentations ||
                    (this.Instrumentations != null &&
                    this.Instrumentations.Equals(input.Instrumentations))
                ) && 
                (
                    this.Nodes == input.Nodes ||
                    (this.Nodes != null &&
                    this.Nodes.Equals(input.Nodes))
                ) && 
                (
                    this.PurchaseOrders == input.PurchaseOrders ||
                    (this.PurchaseOrders != null &&
                    this.PurchaseOrders.Equals(input.PurchaseOrders))
                ) && 
                (
                    this.Quotations == input.Quotations ||
                    (this.Quotations != null &&
                    this.Quotations.Equals(input.Quotations))
                ) && 
                (
                    this.RequestForQuotations == input.RequestForQuotations ||
                    (this.RequestForQuotations != null &&
                    this.RequestForQuotations.Equals(input.RequestForQuotations))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.Assets != null)
                    hashCode = hashCode * 59 + this.Assets.GetHashCode();
                if (this.BillOfMaterials != null)
                    hashCode = hashCode * 59 + this.BillOfMaterials.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.Deliveries != null)
                    hashCode = hashCode * 59 + this.Deliveries.GetHashCode();
                if (this.Products != null)
                    hashCode = hashCode * 59 + this.Products.GetHashCode();
                if (this.Instrumentations != null)
                    hashCode = hashCode * 59 + this.Instrumentations.GetHashCode();
                if (this.Nodes != null)
                    hashCode = hashCode * 59 + this.Nodes.GetHashCode();
                if (this.PurchaseOrders != null)
                    hashCode = hashCode * 59 + this.PurchaseOrders.GetHashCode();
                if (this.Quotations != null)
                    hashCode = hashCode * 59 + this.Quotations.GetHashCode();
                if (this.RequestForQuotations != null)
                    hashCode = hashCode * 59 + this.RequestForQuotations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
