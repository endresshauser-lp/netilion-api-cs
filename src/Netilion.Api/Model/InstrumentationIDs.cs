/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// InstrumentationIDs
    /// </summary>
    [DataContract]
        public partial class InstrumentationIDs :  IEquatable<InstrumentationIDs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentationIDs" /> class.
        /// </summary>
        /// <param name="instrumentations">instrumentations (required).</param>
        public InstrumentationIDs(List<NestedID> instrumentations = default(List<NestedID>))
        {
            // to ensure "instrumentations" is required (not null)
            if (instrumentations == null)
            {
                throw new InvalidDataException("instrumentations is a required property for InstrumentationIDs and cannot be null");
            }
            else
            {
                this.Instrumentations = instrumentations;
            }
        }
        
        /// <summary>
        /// Gets or Sets Instrumentations
        /// </summary>
        [DataMember(Name="instrumentations", EmitDefaultValue=false)]
        public List<NestedID> Instrumentations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstrumentationIDs {\n");
            sb.Append("  Instrumentations: ").Append(Instrumentations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentationIDs);
        }

        /// <summary>
        /// Returns true if InstrumentationIDs instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentationIDs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentationIDs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Instrumentations == input.Instrumentations ||
                    this.Instrumentations != null &&
                    input.Instrumentations != null &&
                    this.Instrumentations.SequenceEqual(input.Instrumentations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Instrumentations != null)
                    hashCode = hashCode * 59 + this.Instrumentations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
