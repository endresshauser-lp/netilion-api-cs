/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// HealthConditionBase
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "healthConditionBaseType")]
    [JsonSubtypes.KnownSubType(typeof(HealthConditionRequest), "HealthConditionRequest")]
    [JsonSubtypes.KnownSubType(typeof(HealthConditionResponse), "HealthConditionResponse")]
    [JsonSubtypes.KnownSubType(typeof(AssetHealthConditionResponse), "AssetHealthConditionResponse")]
    [JsonSubtypes.KnownSubType(typeof(HealthConditionExtended), "HealthConditionExtended")]
        public partial class HealthConditionBase :  IEquatable<HealthConditionBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthConditionBase" /> class.
        /// </summary>
        /// <param name="diagnosisCode">Diagnosis code of the health condition. Whitespaces are trimmed (required).</param>
        public HealthConditionBase(string diagnosisCode = default(string))
        {
            // to ensure "diagnosisCode" is required (not null)
            if (diagnosisCode == null)
            {
                throw new InvalidDataException("diagnosisCode is a required property for HealthConditionBase and cannot be null");
            }
            else
            {
                this.DiagnosisCode = diagnosisCode;
            }
        }
        
        /// <summary>
        /// Diagnosis code of the health condition. Whitespaces are trimmed
        /// </summary>
        /// <value>Diagnosis code of the health condition. Whitespaces are trimmed</value>
        [DataMember(Name="diagnosis_code", EmitDefaultValue=false)]
        public string DiagnosisCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HealthConditionBase {\n");
            sb.Append("  DiagnosisCode: ").Append(DiagnosisCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HealthConditionBase);
        }

        /// <summary>
        /// Returns true if HealthConditionBase instances are equal
        /// </summary>
        /// <param name="input">Instance of HealthConditionBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HealthConditionBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiagnosisCode == input.DiagnosisCode ||
                    (this.DiagnosisCode != null &&
                    this.DiagnosisCode.Equals(input.DiagnosisCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiagnosisCode != null)
                    hashCode = hashCode * 59 + this.DiagnosisCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
