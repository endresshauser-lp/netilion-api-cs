/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// NotificationBase
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "notificationBaseType")]
    [JsonSubtypes.KnownSubType(typeof(NotificationResponse), "NotificationResponse")]
    [JsonSubtypes.KnownSubType(typeof(NotificationRequest), "NotificationRequest")]
        public partial class NotificationBase :  IEquatable<NotificationBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationBase" /> class.
        /// </summary>
        /// <param name="name">The name of the notification (required).</param>
        /// <param name="content">Supports translations. (required).</param>
        /// <param name="startDatetime">start date/time of the notification: format example: 2016-01-01T18:30:00 (required).</param>
        /// <param name="endDatetime">end date/time of the notification: format example: 2016-01-01T18:30:00.</param>
        public NotificationBase(string name = default(string), string content = default(string), string startDatetime = default(string), string endDatetime = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for NotificationBase and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new InvalidDataException("content is a required property for NotificationBase and cannot be null");
            }
            else
            {
                this.Content = content;
            }
            // to ensure "startDatetime" is required (not null)
            if (startDatetime == null)
            {
                throw new InvalidDataException("startDatetime is a required property for NotificationBase and cannot be null");
            }
            else
            {
                this.StartDatetime = startDatetime;
            }
            this.EndDatetime = endDatetime;
        }
        
        /// <summary>
        /// The name of the notification
        /// </summary>
        /// <value>The name of the notification</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Supports translations.
        /// </summary>
        /// <value>Supports translations.</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// start date/time of the notification: format example: 2016-01-01T18:30:00
        /// </summary>
        /// <value>start date/time of the notification: format example: 2016-01-01T18:30:00</value>
        [DataMember(Name="start_datetime", EmitDefaultValue=false)]
        public string StartDatetime { get; set; }

        /// <summary>
        /// end date/time of the notification: format example: 2016-01-01T18:30:00
        /// </summary>
        /// <value>end date/time of the notification: format example: 2016-01-01T18:30:00</value>
        [DataMember(Name="end_datetime", EmitDefaultValue=false)]
        public string EndDatetime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationBase {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  StartDatetime: ").Append(StartDatetime).Append("\n");
            sb.Append("  EndDatetime: ").Append(EndDatetime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationBase);
        }

        /// <summary>
        /// Returns true if NotificationBase instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.StartDatetime == input.StartDatetime ||
                    (this.StartDatetime != null &&
                    this.StartDatetime.Equals(input.StartDatetime))
                ) && 
                (
                    this.EndDatetime == input.EndDatetime ||
                    (this.EndDatetime != null &&
                    this.EndDatetime.Equals(input.EndDatetime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.StartDatetime != null)
                    hashCode = hashCode * 59 + this.StartDatetime.GetHashCode();
                if (this.EndDatetime != null)
                    hashCode = hashCode * 59 + this.EndDatetime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
