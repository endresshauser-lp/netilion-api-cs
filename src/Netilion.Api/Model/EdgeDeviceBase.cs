/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// EdgeDeviceBase
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "edgeDeviceBaseType")]
    [JsonSubtypes.KnownSubType(typeof(EdgeDeviceResponse), "EdgeDeviceResponse")]
        public partial class EdgeDeviceBase :  IEquatable<EdgeDeviceBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeDeviceBase" /> class.
        /// </summary>
        /// <param name="serialNumber">serial number of the edge device (required).</param>
        /// <param name="name">name of the edge device.</param>
        /// <param name="description">description of the edge device.</param>
        /// <param name="logLevel">log level the edge device should use (allowed values: trace, debug, info, warning, error, critical, off).</param>
        /// <param name="applyTimestamp">timestamp when the current settings have been applied at in the edge device. Expected date format is YYYY-MM-DDThh:mm:ss.</param>
        public EdgeDeviceBase(string serialNumber = default(string), string name = default(string), string description = default(string), string logLevel = default(string), string applyTimestamp = default(string))
        {
            // to ensure "serialNumber" is required (not null)
            if (serialNumber == null)
            {
                throw new InvalidDataException("serialNumber is a required property for EdgeDeviceBase and cannot be null");
            }
            else
            {
                this.SerialNumber = serialNumber;
            }
            this.Name = name;
            this.Description = description;
            this.LogLevel = logLevel;
            this.ApplyTimestamp = applyTimestamp;
        }
        
        /// <summary>
        /// serial number of the edge device
        /// </summary>
        /// <value>serial number of the edge device</value>
        [DataMember(Name="serial_number", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// name of the edge device
        /// </summary>
        /// <value>name of the edge device</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// description of the edge device
        /// </summary>
        /// <value>description of the edge device</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// log level the edge device should use (allowed values: trace, debug, info, warning, error, critical, off)
        /// </summary>
        /// <value>log level the edge device should use (allowed values: trace, debug, info, warning, error, critical, off)</value>
        [DataMember(Name="log_level", EmitDefaultValue=false)]
        public string LogLevel { get; set; }

        /// <summary>
        /// timestamp when the current settings have been applied at in the edge device. Expected date format is YYYY-MM-DDThh:mm:ss
        /// </summary>
        /// <value>timestamp when the current settings have been applied at in the edge device. Expected date format is YYYY-MM-DDThh:mm:ss</value>
        [DataMember(Name="apply_timestamp", EmitDefaultValue=false)]
        public string ApplyTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdgeDeviceBase {\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LogLevel: ").Append(LogLevel).Append("\n");
            sb.Append("  ApplyTimestamp: ").Append(ApplyTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdgeDeviceBase);
        }

        /// <summary>
        /// Returns true if EdgeDeviceBase instances are equal
        /// </summary>
        /// <param name="input">Instance of EdgeDeviceBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdgeDeviceBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LogLevel == input.LogLevel ||
                    (this.LogLevel != null &&
                    this.LogLevel.Equals(input.LogLevel))
                ) && 
                (
                    this.ApplyTimestamp == input.ApplyTimestamp ||
                    (this.ApplyTimestamp != null &&
                    this.ApplyTimestamp.Equals(input.ApplyTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.LogLevel != null)
                    hashCode = hashCode * 59 + this.LogLevel.GetHashCode();
                if (this.ApplyTimestamp != null)
                    hashCode = hashCode * 59 + this.ApplyTimestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
