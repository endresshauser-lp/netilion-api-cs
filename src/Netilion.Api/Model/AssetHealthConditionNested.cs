/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// AssetHealthConditionNested
    /// </summary>
    [DataContract]
        public partial class AssetHealthConditionNested :  IEquatable<AssetHealthConditionNested>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetHealthConditionNested" /> class.
        /// </summary>
        /// <param name="id">ID of the nested resources (required).</param>
        /// <param name="diagnosisCode">diagnosis_code of the nested resource (required).</param>
        /// <param name="assetStatus">assetStatus (required).</param>
        /// <param name="channel">channel of the nested resource (required).</param>
        /// <param name="module">module of the nested resource (required).</param>
        /// <param name="links">links.</param>
        public AssetHealthConditionNested(long? id = default(long?), string diagnosisCode = default(string), NestedIDHref assetStatus = default(NestedIDHref), string channel = default(string), string module = default(string), Links1 links = default(Links1))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for AssetHealthConditionNested and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "diagnosisCode" is required (not null)
            if (diagnosisCode == null)
            {
                throw new InvalidDataException("diagnosisCode is a required property for AssetHealthConditionNested and cannot be null");
            }
            else
            {
                this.DiagnosisCode = diagnosisCode;
            }
            // to ensure "assetStatus" is required (not null)
            if (assetStatus == null)
            {
                throw new InvalidDataException("assetStatus is a required property for AssetHealthConditionNested and cannot be null");
            }
            else
            {
                this.AssetStatus = assetStatus;
            }
            // to ensure "channel" is required (not null)
            if (channel == null)
            {
                throw new InvalidDataException("channel is a required property for AssetHealthConditionNested and cannot be null");
            }
            else
            {
                this.Channel = channel;
            }
            // to ensure "module" is required (not null)
            if (module == null)
            {
                throw new InvalidDataException("module is a required property for AssetHealthConditionNested and cannot be null");
            }
            else
            {
                this.Module = module;
            }
            this.Links = links;
        }
        
        /// <summary>
        /// ID of the nested resources
        /// </summary>
        /// <value>ID of the nested resources</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// diagnosis_code of the nested resource
        /// </summary>
        /// <value>diagnosis_code of the nested resource</value>
        [DataMember(Name="diagnosis_code", EmitDefaultValue=false)]
        public string DiagnosisCode { get; set; }

        /// <summary>
        /// Gets or Sets AssetStatus
        /// </summary>
        [DataMember(Name="asset_status", EmitDefaultValue=false)]
        public NestedIDHref AssetStatus { get; set; }

        /// <summary>
        /// channel of the nested resource
        /// </summary>
        /// <value>channel of the nested resource</value>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public string Channel { get; set; }

        /// <summary>
        /// module of the nested resource
        /// </summary>
        /// <value>module of the nested resource</value>
        [DataMember(Name="module", EmitDefaultValue=false)]
        public string Module { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public Links1 Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetHealthConditionNested {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DiagnosisCode: ").Append(DiagnosisCode).Append("\n");
            sb.Append("  AssetStatus: ").Append(AssetStatus).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetHealthConditionNested);
        }

        /// <summary>
        /// Returns true if AssetHealthConditionNested instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetHealthConditionNested to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetHealthConditionNested input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DiagnosisCode == input.DiagnosisCode ||
                    (this.DiagnosisCode != null &&
                    this.DiagnosisCode.Equals(input.DiagnosisCode))
                ) && 
                (
                    this.AssetStatus == input.AssetStatus ||
                    (this.AssetStatus != null &&
                    this.AssetStatus.Equals(input.AssetStatus))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.Module == input.Module ||
                    (this.Module != null &&
                    this.Module.Equals(input.Module))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DiagnosisCode != null)
                    hashCode = hashCode * 59 + this.DiagnosisCode.GetHashCode();
                if (this.AssetStatus != null)
                    hashCode = hashCode * 59 + this.AssetStatus.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.Module != null)
                    hashCode = hashCode * 59 + this.Module.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
