/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// SoftwareAttachmentLinkRequestPost
    /// </summary>
    [DataContract]
        public partial class SoftwareAttachmentLinkRequestPost :  IEquatable<SoftwareAttachmentLinkRequestPost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareAttachmentLinkRequestPost" /> class.
        /// </summary>
        /// <param name="href">the link, must be http or https link (required).</param>
        /// <param name="contentDate">Last edit date of the file.</param>
        /// <param name="remarks">remarks of the software attachment.</param>
        /// <param name="software">software (required).</param>
        public SoftwareAttachmentLinkRequestPost(string href = default(string), string contentDate = default(string), string remarks = default(string), NestedID software = default(NestedID))
        {
            // to ensure "href" is required (not null)
            if (href == null)
            {
                throw new InvalidDataException("href is a required property for SoftwareAttachmentLinkRequestPost and cannot be null");
            }
            else
            {
                this.Href = href;
            }
            // to ensure "software" is required (not null)
            if (software == null)
            {
                throw new InvalidDataException("software is a required property for SoftwareAttachmentLinkRequestPost and cannot be null");
            }
            else
            {
                this.Software = software;
            }
            this.ContentDate = contentDate;
            this.Remarks = remarks;
        }
        
        /// <summary>
        /// the link, must be http or https link
        /// </summary>
        /// <value>the link, must be http or https link</value>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// Last edit date of the file
        /// </summary>
        /// <value>Last edit date of the file</value>
        [DataMember(Name="content_date", EmitDefaultValue=false)]
        public string ContentDate { get; set; }

        /// <summary>
        /// remarks of the software attachment
        /// </summary>
        /// <value>remarks of the software attachment</value>
        [DataMember(Name="remarks", EmitDefaultValue=false)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets Software
        /// </summary>
        [DataMember(Name="software", EmitDefaultValue=false)]
        public NestedID Software { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SoftwareAttachmentLinkRequestPost {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  ContentDate: ").Append(ContentDate).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  Software: ").Append(Software).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SoftwareAttachmentLinkRequestPost);
        }

        /// <summary>
        /// Returns true if SoftwareAttachmentLinkRequestPost instances are equal
        /// </summary>
        /// <param name="input">Instance of SoftwareAttachmentLinkRequestPost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SoftwareAttachmentLinkRequestPost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.ContentDate == input.ContentDate ||
                    (this.ContentDate != null &&
                    this.ContentDate.Equals(input.ContentDate))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.Software == input.Software ||
                    (this.Software != null &&
                    this.Software.Equals(input.Software))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.ContentDate != null)
                    hashCode = hashCode * 59 + this.ContentDate.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                if (this.Software != null)
                    hashCode = hashCode * 59 + this.Software.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
