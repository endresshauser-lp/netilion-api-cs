/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// HealthConditionExtendedRules
    /// </summary>
    [DataContract]
        public partial class HealthConditionExtendedRules :  IEquatable<HealthConditionExtendedRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthConditionExtendedRules" /> class.
        /// </summary>
        /// <param name="type">type of the rule, possible values are &#x27;bit&#x27;, &#x27;bitarea&#x27; and &#x27;channel&#x27; (required).</param>
        /// <param name="bit">bit.</param>
        /// <param name="startBit">startBit.</param>
        /// <param name="endBit">endBit.</param>
        /// <param name="value">value.</param>
        public HealthConditionExtendedRules(string type = default(string), long? bit = default(long?), long? startBit = default(long?), long? endBit = default(long?), long? value = default(long?))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for HealthConditionExtendedRules and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Bit = bit;
            this.StartBit = startBit;
            this.EndBit = endBit;
            this.Value = value;
        }
        
        /// <summary>
        /// type of the rule, possible values are &#x27;bit&#x27;, &#x27;bitarea&#x27; and &#x27;channel&#x27;
        /// </summary>
        /// <value>type of the rule, possible values are &#x27;bit&#x27;, &#x27;bitarea&#x27; and &#x27;channel&#x27;</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Bit
        /// </summary>
        [DataMember(Name="bit", EmitDefaultValue=false)]
        public long? Bit { get; set; }

        /// <summary>
        /// Gets or Sets StartBit
        /// </summary>
        [DataMember(Name="start_bit", EmitDefaultValue=false)]
        public long? StartBit { get; set; }

        /// <summary>
        /// Gets or Sets EndBit
        /// </summary>
        [DataMember(Name="end_bit", EmitDefaultValue=false)]
        public long? EndBit { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public long? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HealthConditionExtendedRules {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Bit: ").Append(Bit).Append("\n");
            sb.Append("  StartBit: ").Append(StartBit).Append("\n");
            sb.Append("  EndBit: ").Append(EndBit).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HealthConditionExtendedRules);
        }

        /// <summary>
        /// Returns true if HealthConditionExtendedRules instances are equal
        /// </summary>
        /// <param name="input">Instance of HealthConditionExtendedRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HealthConditionExtendedRules input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Bit == input.Bit ||
                    (this.Bit != null &&
                    this.Bit.Equals(input.Bit))
                ) && 
                (
                    this.StartBit == input.StartBit ||
                    (this.StartBit != null &&
                    this.StartBit.Equals(input.StartBit))
                ) && 
                (
                    this.EndBit == input.EndBit ||
                    (this.EndBit != null &&
                    this.EndBit.Equals(input.EndBit))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Bit != null)
                    hashCode = hashCode * 59 + this.Bit.GetHashCode();
                if (this.StartBit != null)
                    hashCode = hashCode * 59 + this.StartBit.GetHashCode();
                if (this.EndBit != null)
                    hashCode = hashCode * 59 + this.EndBit.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
