/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// AssetBase
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "assetBaseType")]
    [JsonSubtypes.KnownSubType(typeof(AssetHistoryBase), "AssetHistoryBase")]
    [JsonSubtypes.KnownSubType(typeof(AssetRequest), "AssetRequest")]
    [JsonSubtypes.KnownSubType(typeof(AssetResponse), "AssetResponse")]
        public partial class AssetBase :  IEquatable<AssetBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetBase" /> class.
        /// </summary>
        /// <param name="serialNumber">at least 4 characters long and unique within the manufacturers scope. Whitespaces are trimmed (required).</param>
        /// <param name="description">description text of the asset.</param>
        /// <param name="productionDate">Date of production of the asset.</param>
        /// <param name="lastSeenAt">last time this asset has been visited/seen/scanned by a person or edge device.</param>
        public AssetBase(string serialNumber = default(string), string description = default(string), string productionDate = default(string), string lastSeenAt = default(string))
        {
            // to ensure "serialNumber" is required (not null)
            if (serialNumber == null)
            {
                throw new InvalidDataException("serialNumber is a required property for AssetBase and cannot be null");
            }
            else
            {
                this.SerialNumber = serialNumber;
            }
            this.Description = description;
            this.ProductionDate = productionDate;
            this.LastSeenAt = lastSeenAt;
        }
        
        /// <summary>
        /// at least 4 characters long and unique within the manufacturers scope. Whitespaces are trimmed
        /// </summary>
        /// <value>at least 4 characters long and unique within the manufacturers scope. Whitespaces are trimmed</value>
        [DataMember(Name="serial_number", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// description text of the asset
        /// </summary>
        /// <value>description text of the asset</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Date of production of the asset
        /// </summary>
        /// <value>Date of production of the asset</value>
        [DataMember(Name="production_date", EmitDefaultValue=false)]
        public string ProductionDate { get; set; }

        /// <summary>
        /// last time this asset has been visited/seen/scanned by a person or edge device
        /// </summary>
        /// <value>last time this asset has been visited/seen/scanned by a person or edge device</value>
        [DataMember(Name="last_seen_at", EmitDefaultValue=false)]
        public string LastSeenAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetBase {\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProductionDate: ").Append(ProductionDate).Append("\n");
            sb.Append("  LastSeenAt: ").Append(LastSeenAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetBase);
        }

        /// <summary>
        /// Returns true if AssetBase instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ProductionDate == input.ProductionDate ||
                    (this.ProductionDate != null &&
                    this.ProductionDate.Equals(input.ProductionDate))
                ) && 
                (
                    this.LastSeenAt == input.LastSeenAt ||
                    (this.LastSeenAt != null &&
                    this.LastSeenAt.Equals(input.LastSeenAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ProductionDate != null)
                    hashCode = hashCode * 59 + this.ProductionDate.GetHashCode();
                if (this.LastSeenAt != null)
                    hashCode = hashCode * 59 + this.LastSeenAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
