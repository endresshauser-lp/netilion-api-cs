/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// InstrumentationAssetHistory
    /// </summary>
    [DataContract]
        public partial class InstrumentationAssetHistory :  IEquatable<InstrumentationAssetHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentationAssetHistory" /> class.
        /// </summary>
        /// <param name="asset">asset (required).</param>
        /// <param name="_event">Event type, can be create or destroy (required).</param>
        /// <param name="eventDatetime">Date of the Event (required).</param>
        public InstrumentationAssetHistory(NestedIDHrefSerialnumber asset = default(NestedIDHrefSerialnumber), string _event = default(string), DateTime? eventDatetime = default(DateTime?))
        {
            // to ensure "asset" is required (not null)
            if (asset == null)
            {
                throw new InvalidDataException("asset is a required property for InstrumentationAssetHistory and cannot be null");
            }
            else
            {
                this.Asset = asset;
            }
            // to ensure "_event" is required (not null)
            if (_event == null)
            {
                throw new InvalidDataException("_event is a required property for InstrumentationAssetHistory and cannot be null");
            }
            else
            {
                this._Event = _event;
            }
            // to ensure "eventDatetime" is required (not null)
            if (eventDatetime == null)
            {
                throw new InvalidDataException("eventDatetime is a required property for InstrumentationAssetHistory and cannot be null");
            }
            else
            {
                this.EventDatetime = eventDatetime;
            }
        }
        
        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name="asset", EmitDefaultValue=false)]
        public NestedIDHrefSerialnumber Asset { get; set; }

        /// <summary>
        /// Event type, can be create or destroy
        /// </summary>
        /// <value>Event type, can be create or destroy</value>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public string _Event { get; set; }

        /// <summary>
        /// Date of the Event
        /// </summary>
        /// <value>Date of the Event</value>
        [DataMember(Name="event_datetime", EmitDefaultValue=false)]
        public DateTime? EventDatetime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstrumentationAssetHistory {\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  _Event: ").Append(_Event).Append("\n");
            sb.Append("  EventDatetime: ").Append(EventDatetime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentationAssetHistory);
        }

        /// <summary>
        /// Returns true if InstrumentationAssetHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentationAssetHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentationAssetHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Asset == input.Asset ||
                    (this.Asset != null &&
                    this.Asset.Equals(input.Asset))
                ) && 
                (
                    this._Event == input._Event ||
                    (this._Event != null &&
                    this._Event.Equals(input._Event))
                ) && 
                (
                    this.EventDatetime == input.EventDatetime ||
                    (this.EventDatetime != null &&
                    this.EventDatetime.Equals(input.EventDatetime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asset != null)
                    hashCode = hashCode * 59 + this.Asset.GetHashCode();
                if (this._Event != null)
                    hashCode = hashCode * 59 + this._Event.GetHashCode();
                if (this.EventDatetime != null)
                    hashCode = hashCode * 59 + this.EventDatetime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
