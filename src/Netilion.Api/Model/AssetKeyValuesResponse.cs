/* 
 * Netilion API Documentation
 *
 * Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/ 
 *
 * OpenAPI spec version: 01.00.00
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Netilion.Api.Client.SwaggerDateConverter;

namespace Netilion.Api.Model
{
    /// <summary>
    /// AssetKeyValuesResponse
    /// </summary>
    [DataContract]
        public partial class AssetKeyValuesResponse :  IEquatable<AssetKeyValuesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetKeyValuesResponse" /> class.
        /// </summary>
        /// <param name="key">key of the asset values (required).</param>
        /// <param name="unit">unit.</param>
        /// <param name="group">group of the asset value. No wildcard-filter supported..</param>
        /// <param name="latest">the last written asset value.</param>
        /// <param name="max">the maximum value for the requested time slot.</param>
        /// <param name="min">the minimum value for the requested time slot.</param>
        /// <param name="mean">the mean (average) value for the requested time slot.</param>
        /// <param name="data">data.</param>
        /// <param name="pagination">pagination (required).</param>
        public AssetKeyValuesResponse(string key = default(string), NestedID unit = default(NestedID), string group = default(string), string latest = default(string), string max = default(string), string min = default(string), string mean = default(string), List<AssetKeyValuesData> data = default(List<AssetKeyValuesData>), AssetValuesPagination pagination = default(AssetValuesPagination))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new InvalidDataException("key is a required property for AssetKeyValuesResponse and cannot be null");
            }
            else
            {
                this.Key = key;
            }
            // to ensure "pagination" is required (not null)
            if (pagination == null)
            {
                throw new InvalidDataException("pagination is a required property for AssetKeyValuesResponse and cannot be null");
            }
            else
            {
                this.Pagination = pagination;
            }
            this.Unit = unit;
            this.Group = group;
            this.Latest = latest;
            this.Max = max;
            this.Min = min;
            this.Mean = mean;
            this.Data = data;
        }
        
        /// <summary>
        /// key of the asset values
        /// </summary>
        /// <value>key of the asset values</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public NestedID Unit { get; set; }

        /// <summary>
        /// group of the asset value. No wildcard-filter supported.
        /// </summary>
        /// <value>group of the asset value. No wildcard-filter supported.</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// the last written asset value
        /// </summary>
        /// <value>the last written asset value</value>
        [DataMember(Name="latest", EmitDefaultValue=false)]
        public string Latest { get; set; }

        /// <summary>
        /// the maximum value for the requested time slot
        /// </summary>
        /// <value>the maximum value for the requested time slot</value>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public string Max { get; set; }

        /// <summary>
        /// the minimum value for the requested time slot
        /// </summary>
        /// <value>the minimum value for the requested time slot</value>
        [DataMember(Name="min", EmitDefaultValue=false)]
        public string Min { get; set; }

        /// <summary>
        /// the mean (average) value for the requested time slot
        /// </summary>
        /// <value>the mean (average) value for the requested time slot</value>
        [DataMember(Name="mean", EmitDefaultValue=false)]
        public string Mean { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public List<AssetKeyValuesData> Data { get; set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name="pagination", EmitDefaultValue=false)]
        public AssetValuesPagination Pagination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetKeyValuesResponse {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Latest: ").Append(Latest).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Mean: ").Append(Mean).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetKeyValuesResponse);
        }

        /// <summary>
        /// Returns true if AssetKeyValuesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetKeyValuesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetKeyValuesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Latest == input.Latest ||
                    (this.Latest != null &&
                    this.Latest.Equals(input.Latest))
                ) && 
                (
                    this.Max == input.Max ||
                    (this.Max != null &&
                    this.Max.Equals(input.Max))
                ) && 
                (
                    this.Min == input.Min ||
                    (this.Min != null &&
                    this.Min.Equals(input.Min))
                ) && 
                (
                    this.Mean == input.Mean ||
                    (this.Mean != null &&
                    this.Mean.Equals(input.Mean))
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Latest != null)
                    hashCode = hashCode * 59 + this.Latest.GetHashCode();
                if (this.Max != null)
                    hashCode = hashCode * 59 + this.Max.GetHashCode();
                if (this.Min != null)
                    hashCode = hashCode * 59 + this.Min.GetHashCode();
                if (this.Mean != null)
                    hashCode = hashCode * 59 + this.Mean.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Pagination != null)
                    hashCode = hashCode * 59 + this.Pagination.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
